Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ID

Grammar

Rule 0     S' -> start_symbol
Rule 1     start_symbol -> program
Rule 2     program -> program_components
Rule 3     program -> empty
Rule 4     program_components -> program_component
Rule 5     program_components -> program_component program_components
Rule 6     program_component -> function_definition
Rule 7     program_component -> class_definition
Rule 8     program_component -> including
Rule 9     program_component -> using_namespace_std
Rule 10    program_component -> var_declaration
Rule 11    program_component -> array_declaration
Rule 12    program_component -> comment
Rule 13    program_component -> empty
Rule 14    using_namespace_std -> USING NAMESPACE STD SEMICOLON
Rule 15    including -> HASH INCLUDE LIBRARY
Rule 16    function_definition -> type_function_definition
Rule 17    function_definition -> void_function_definition
Rule 18    type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
Rule 19    void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 20    function_var_declaration -> var_declaration_no_semicolon
Rule 21    function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration
Rule 22    function_var_declaration -> empty
Rule 23    var_declaration_no_semicolon -> type VAR
Rule 24    class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON
Rule 25    class_declaration -> var_declaration
Rule 26    class_declaration -> function_definition
Rule 27    class_declarations -> class_declaration
Rule 28    class_declarations -> class_declaration class_declarations
Rule 29    class_declarations -> empty
Rule 30    instructions -> instruction
Rule 31    instructions -> instruction instructions
Rule 32    instruction -> loop
Rule 33    instruction -> if_statement
Rule 34    instruction -> assignment
Rule 35    instruction -> operation
Rule 36    instruction -> empty
Rule 37    instruction -> var_declaration
Rule 38    instruction -> print
Rule 39    instruction -> input
Rule 40    instruction -> comment
Rule 41    while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 42    while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 43    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 44    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 45    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 46    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 47    for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 48    loop -> while_loop
Rule 49    loop -> for_loop
Rule 50    else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 51    if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 52    if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
Rule 53    comparisons -> comparison
Rule 54    comparisons -> comparison conjunction comparisons
Rule 55    comparison -> value comparator value
Rule 56    comparator -> LESS
Rule 57    comparator -> LESS_EQUAL
Rule 58    comparator -> GREATER
Rule 59    comparator -> GREATER_EQUAL
Rule 60    comparator -> EQUAL_EQUAL
Rule 61    comparator -> NOT_EQUAL
Rule 62    operator -> PLUS
Rule 63    operator -> MINUS
Rule 64    operator -> MULTIPLY
Rule 65    operator -> DIVIDE
Rule 66    type -> INT
Rule 67    type -> CHAR
Rule 68    type -> STRING
Rule 69    type -> BOOL
Rule 70    type -> FLOAT
Rule 71    type -> LONG
Rule 72    type -> SHORT
Rule 73    type -> DOUBLE
Rule 74    conjunction -> AND
Rule 75    conjunction -> OR
Rule 76    string_value -> TEXT
Rule 77    string_value -> SIGN
Rule 78    number -> INT_NUMBER
Rule 79    number -> FLOAT_NUMBER
Rule 80    bool_value -> TRUE
Rule 81    bool_value -> FALSE
Rule 82    value -> number
Rule 83    value -> VAR
Rule 84    value -> get_array_element
Rule 85    value -> string_value
Rule 86    value -> bool_value
Rule 87    increment -> VAR PLUS_PLUS SEMICOLON
Rule 88    decrement -> VAR MINUS_MINUS SEMICOLON
Rule 89    get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
Rule 90    operation -> increment
Rule 91    operation -> decrement
Rule 92    operation -> value operator value SEMICOLON
Rule 93    assignment -> VAR EQUAL value SEMICOLON
Rule 94    assignment -> VAR EQUAL VAR SEMICOLON
Rule 95    assignment -> get_array_element EQUAL value SEMICOLON
Rule 96    assignment -> get_array_element EQUAL VAR SEMICOLON
Rule 97    var_declaration -> type VAR SEMICOLON
Rule 98    var_declaration -> array_declaration
Rule 99    var_declaration -> type VAR EQUAL value SEMICOLON
Rule 100   var_declaration -> type VAR EQUAL VAR SEMICOLON
Rule 101   array_declaration -> type get_array_element SEMICOLON
Rule 102   out -> OUT VAR
Rule 103   out -> OUT VAR out
Rule 104   out -> OUT TEXT
Rule 105   out -> OUT TEXT out
Rule 106   out -> OUT ENDL
Rule 107   out -> OUT ENDL out
Rule 108   in -> IN VAR
Rule 109   in -> IN VAR in
Rule 110   print -> COUT out SEMICOLON
Rule 111   input -> CIN in SEMICOLON
Rule 112   returning -> RETURN value SEMICOLON
Rule 113   comment -> COMMENT
Rule 114   empty -> <empty>
Rule 115   change_tab_number -> <empty>

Terminals, with rules where they appear

AND                  : 74
BOOL                 : 69
CHAR                 : 67
CIN                  : 111
CLASS                : 24
COMMA                : 21
COMMENT              : 113
COUT                 : 110
DIVIDE               : 65
DOUBLE               : 73
ELSE                 : 50
ENDL                 : 106 107
EQUAL                : 43 44 45 46 93 94 95 96 99 100
EQUAL_EQUAL          : 60
FALSE                : 81
FLOAT                : 70
FLOAT_NUMBER         : 79
FOR                  : 43 44 45 46
GREATER              : 45 58
GREATER_EQUAL        : 46 59
HASH                 : 15
ID                   : 
IF                   : 51 52
IN                   : 108 109
INCLUDE              : 15
INT                  : 43 44 45 46 66
INT_NUMBER           : 43 43 44 44 45 45 46 46 78 89
LEFT_BR              : 18 19 41 42 43 44 45 46 51 52
LEFT_BR_CURLY        : 18 19 24 41 42 47 50 51 52
LEFT_BR_SQUARED      : 89
LESS                 : 43 56
LESS_EQUAL           : 44 57
LIBRARY              : 15
LONG                 : 71
MINUS                : 63
MINUS_MINUS          : 45 46 88
MULTIPLY             : 64
NAMESPACE            : 14
NOT_EQUAL            : 61
OR                   : 75
OUT                  : 102 103 104 105 106 107
PLUS                 : 62
PLUS_PLUS            : 43 44 87
RETURN               : 112
RIGHT_BR             : 18 19 41 42 43 44 45 46 51 52
RIGHT_BR_CURLY       : 18 19 24 41 42 47 50 51 52
RIGHT_BR_SQUARED     : 89
SEMICOLON            : 14 24 43 43 44 44 45 45 46 46 87 88 92 93 94 95 96 97 99 100 101 110 111 112
SHORT                : 72
SIGN                 : 77
STD                  : 14
STRING               : 68
TEXT                 : 76 104 105
TRUE                 : 80
USING                : 14
VAR                  : 18 19 23 24 43 43 43 44 44 44 45 45 45 46 46 46 83 87 88 89 93 94 94 96 97 99 100 100 102 103 108 109
VOID                 : 19
WHILE                : 41 42
error                : 

Nonterminals, with rules where they appear

array_declaration    : 11 98
assignment           : 34
bool_value           : 42 86
change_tab_number    : 18 19 41 42 47 51 52
class_declaration    : 27 28
class_declarations   : 24 28
class_definition     : 7
comment              : 12 40
comparator           : 55
comparison           : 53 54
comparisons          : 41 51 52 54
conjunction          : 54
decrement            : 91
else_statement       : 52
empty                : 3 13 22 29 36
for_loop             : 49
for_loop_statement   : 47
function_definition  : 6 26
function_var_declaration : 18 19 21
get_array_element    : 84 95 96 101
if_statement         : 33
in                   : 109 111
including            : 8
increment            : 90
input                : 39
instruction          : 30 31
instructions         : 18 19 31 41 42 47 50 51 52
loop                 : 32
number               : 82
operation            : 35
operator             : 92
out                  : 103 105 107 110
print                : 38
program              : 1
program_component    : 4 5
program_components   : 2 5
returning            : 18
start_symbol         : 0
string_value         : 85
type                 : 18 23 97 99 100 101
type_function_definition : 16
using_namespace_std  : 9
value                : 55 55 92 92 93 95 99 112
var_declaration      : 10 25 37
var_declaration_no_semicolon : 20 21
void_function_definition : 17
while_loop           : 48

Parsing method: LALR

state 0

    (0) S' -> . start_symbol
    (1) start_symbol -> . program
    (2) program -> . program_components
    (3) program -> . empty
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (114) empty -> .
    (6) program_component -> . function_definition
    (7) program_component -> . class_definition
    (8) program_component -> . including
    (9) program_component -> . using_namespace_std
    (10) program_component -> . var_declaration
    (11) program_component -> . array_declaration
    (12) program_component -> . comment
    (13) program_component -> . empty
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (24) class_definition -> . CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (101) array_declaration -> . type get_array_element SEMICOLON
    (113) comment -> . COMMENT
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 114 (empty -> .)
    CLASS           shift and go to state 15
    HASH            shift and go to state 16
    USING           shift and go to state 17
    COMMENT         shift and go to state 19
    VOID            shift and go to state 20
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

  ! CLASS           [ reduce using rule 114 (empty -> .) ]
  ! HASH            [ reduce using rule 114 (empty -> .) ]
  ! USING           [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! VOID            [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]

    start_symbol                   shift and go to state 1
    program                        shift and go to state 2
    program_components             shift and go to state 3
    empty                          shift and go to state 4
    program_component              shift and go to state 5
    function_definition            shift and go to state 6
    class_definition               shift and go to state 7
    including                      shift and go to state 8
    using_namespace_std            shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    comment                        shift and go to state 12
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 18

state 1

    (0) S' -> start_symbol .



state 2

    (1) start_symbol -> program .

    $end            reduce using rule 1 (start_symbol -> program .)


state 3

    (2) program -> program_components .

    $end            reduce using rule 2 (program -> program_components .)


state 4

    (3) program -> empty .
    (13) program_component -> empty .

  ! reduce/reduce conflict for $end resolved using rule 3 (program -> empty .)
    $end            reduce using rule 3 (program -> empty .)
    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    COMMENT         reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)
    DOUBLE          reduce using rule 13 (program_component -> empty .)

  ! $end            [ reduce using rule 13 (program_component -> empty .) ]


state 5

    (4) program_components -> program_component .
    (5) program_components -> program_component . program_components
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_component -> . function_definition
    (7) program_component -> . class_definition
    (8) program_component -> . including
    (9) program_component -> . using_namespace_std
    (10) program_component -> . var_declaration
    (11) program_component -> . array_declaration
    (12) program_component -> . comment
    (13) program_component -> . empty
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (24) class_definition -> . CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (101) array_declaration -> . type get_array_element SEMICOLON
    (113) comment -> . COMMENT
    (114) empty -> .
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (program_components -> program_component .)
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 4 (program_components -> program_component .)
    CLASS           shift and go to state 15
    HASH            shift and go to state 16
    USING           shift and go to state 17
    COMMENT         shift and go to state 19
    VOID            shift and go to state 20
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

  ! CLASS           [ reduce using rule 114 (empty -> .) ]
  ! HASH            [ reduce using rule 114 (empty -> .) ]
  ! USING           [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! VOID            [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]
  ! $end            [ reduce using rule 114 (empty -> .) ]

    program_component              shift and go to state 5
    program_components             shift and go to state 29
    function_definition            shift and go to state 6
    class_definition               shift and go to state 7
    including                      shift and go to state 8
    using_namespace_std            shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 30
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 18

state 6

    (6) program_component -> function_definition .

    CLASS           reduce using rule 6 (program_component -> function_definition .)
    HASH            reduce using rule 6 (program_component -> function_definition .)
    USING           reduce using rule 6 (program_component -> function_definition .)
    COMMENT         reduce using rule 6 (program_component -> function_definition .)
    VOID            reduce using rule 6 (program_component -> function_definition .)
    INT             reduce using rule 6 (program_component -> function_definition .)
    CHAR            reduce using rule 6 (program_component -> function_definition .)
    STRING          reduce using rule 6 (program_component -> function_definition .)
    BOOL            reduce using rule 6 (program_component -> function_definition .)
    FLOAT           reduce using rule 6 (program_component -> function_definition .)
    LONG            reduce using rule 6 (program_component -> function_definition .)
    SHORT           reduce using rule 6 (program_component -> function_definition .)
    DOUBLE          reduce using rule 6 (program_component -> function_definition .)
    $end            reduce using rule 6 (program_component -> function_definition .)


state 7

    (7) program_component -> class_definition .

    CLASS           reduce using rule 7 (program_component -> class_definition .)
    HASH            reduce using rule 7 (program_component -> class_definition .)
    USING           reduce using rule 7 (program_component -> class_definition .)
    COMMENT         reduce using rule 7 (program_component -> class_definition .)
    VOID            reduce using rule 7 (program_component -> class_definition .)
    INT             reduce using rule 7 (program_component -> class_definition .)
    CHAR            reduce using rule 7 (program_component -> class_definition .)
    STRING          reduce using rule 7 (program_component -> class_definition .)
    BOOL            reduce using rule 7 (program_component -> class_definition .)
    FLOAT           reduce using rule 7 (program_component -> class_definition .)
    LONG            reduce using rule 7 (program_component -> class_definition .)
    SHORT           reduce using rule 7 (program_component -> class_definition .)
    DOUBLE          reduce using rule 7 (program_component -> class_definition .)
    $end            reduce using rule 7 (program_component -> class_definition .)


state 8

    (8) program_component -> including .

    CLASS           reduce using rule 8 (program_component -> including .)
    HASH            reduce using rule 8 (program_component -> including .)
    USING           reduce using rule 8 (program_component -> including .)
    COMMENT         reduce using rule 8 (program_component -> including .)
    VOID            reduce using rule 8 (program_component -> including .)
    INT             reduce using rule 8 (program_component -> including .)
    CHAR            reduce using rule 8 (program_component -> including .)
    STRING          reduce using rule 8 (program_component -> including .)
    BOOL            reduce using rule 8 (program_component -> including .)
    FLOAT           reduce using rule 8 (program_component -> including .)
    LONG            reduce using rule 8 (program_component -> including .)
    SHORT           reduce using rule 8 (program_component -> including .)
    DOUBLE          reduce using rule 8 (program_component -> including .)
    $end            reduce using rule 8 (program_component -> including .)


state 9

    (9) program_component -> using_namespace_std .

    CLASS           reduce using rule 9 (program_component -> using_namespace_std .)
    HASH            reduce using rule 9 (program_component -> using_namespace_std .)
    USING           reduce using rule 9 (program_component -> using_namespace_std .)
    COMMENT         reduce using rule 9 (program_component -> using_namespace_std .)
    VOID            reduce using rule 9 (program_component -> using_namespace_std .)
    INT             reduce using rule 9 (program_component -> using_namespace_std .)
    CHAR            reduce using rule 9 (program_component -> using_namespace_std .)
    STRING          reduce using rule 9 (program_component -> using_namespace_std .)
    BOOL            reduce using rule 9 (program_component -> using_namespace_std .)
    FLOAT           reduce using rule 9 (program_component -> using_namespace_std .)
    LONG            reduce using rule 9 (program_component -> using_namespace_std .)
    SHORT           reduce using rule 9 (program_component -> using_namespace_std .)
    DOUBLE          reduce using rule 9 (program_component -> using_namespace_std .)
    $end            reduce using rule 9 (program_component -> using_namespace_std .)


state 10

    (10) program_component -> var_declaration .

    CLASS           reduce using rule 10 (program_component -> var_declaration .)
    HASH            reduce using rule 10 (program_component -> var_declaration .)
    USING           reduce using rule 10 (program_component -> var_declaration .)
    COMMENT         reduce using rule 10 (program_component -> var_declaration .)
    VOID            reduce using rule 10 (program_component -> var_declaration .)
    INT             reduce using rule 10 (program_component -> var_declaration .)
    CHAR            reduce using rule 10 (program_component -> var_declaration .)
    STRING          reduce using rule 10 (program_component -> var_declaration .)
    BOOL            reduce using rule 10 (program_component -> var_declaration .)
    FLOAT           reduce using rule 10 (program_component -> var_declaration .)
    LONG            reduce using rule 10 (program_component -> var_declaration .)
    SHORT           reduce using rule 10 (program_component -> var_declaration .)
    DOUBLE          reduce using rule 10 (program_component -> var_declaration .)
    $end            reduce using rule 10 (program_component -> var_declaration .)


state 11

    (11) program_component -> array_declaration .
    (98) var_declaration -> array_declaration .

  ! reduce/reduce conflict for CLASS resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for HASH resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for USING resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for COMMENT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for VOID resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for INT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for CHAR resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for BOOL resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for LONG resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for SHORT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for $end resolved using rule 11 (program_component -> array_declaration .)
    CLASS           reduce using rule 11 (program_component -> array_declaration .)
    HASH            reduce using rule 11 (program_component -> array_declaration .)
    USING           reduce using rule 11 (program_component -> array_declaration .)
    COMMENT         reduce using rule 11 (program_component -> array_declaration .)
    VOID            reduce using rule 11 (program_component -> array_declaration .)
    INT             reduce using rule 11 (program_component -> array_declaration .)
    CHAR            reduce using rule 11 (program_component -> array_declaration .)
    STRING          reduce using rule 11 (program_component -> array_declaration .)
    BOOL            reduce using rule 11 (program_component -> array_declaration .)
    FLOAT           reduce using rule 11 (program_component -> array_declaration .)
    LONG            reduce using rule 11 (program_component -> array_declaration .)
    SHORT           reduce using rule 11 (program_component -> array_declaration .)
    DOUBLE          reduce using rule 11 (program_component -> array_declaration .)
    $end            reduce using rule 11 (program_component -> array_declaration .)

  ! CLASS           [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! HASH            [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! USING           [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! COMMENT         [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! VOID            [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! INT             [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! CHAR            [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! STRING          [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! BOOL            [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! FLOAT           [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! LONG            [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! SHORT           [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! DOUBLE          [ reduce using rule 98 (var_declaration -> array_declaration .) ]
  ! $end            [ reduce using rule 98 (var_declaration -> array_declaration .) ]


state 12

    (12) program_component -> comment .

    CLASS           reduce using rule 12 (program_component -> comment .)
    HASH            reduce using rule 12 (program_component -> comment .)
    USING           reduce using rule 12 (program_component -> comment .)
    COMMENT         reduce using rule 12 (program_component -> comment .)
    VOID            reduce using rule 12 (program_component -> comment .)
    INT             reduce using rule 12 (program_component -> comment .)
    CHAR            reduce using rule 12 (program_component -> comment .)
    STRING          reduce using rule 12 (program_component -> comment .)
    BOOL            reduce using rule 12 (program_component -> comment .)
    FLOAT           reduce using rule 12 (program_component -> comment .)
    LONG            reduce using rule 12 (program_component -> comment .)
    SHORT           reduce using rule 12 (program_component -> comment .)
    DOUBLE          reduce using rule 12 (program_component -> comment .)
    $end            reduce using rule 12 (program_component -> comment .)


state 13

    (16) function_definition -> type_function_definition .

    CLASS           reduce using rule 16 (function_definition -> type_function_definition .)
    HASH            reduce using rule 16 (function_definition -> type_function_definition .)
    USING           reduce using rule 16 (function_definition -> type_function_definition .)
    COMMENT         reduce using rule 16 (function_definition -> type_function_definition .)
    VOID            reduce using rule 16 (function_definition -> type_function_definition .)
    INT             reduce using rule 16 (function_definition -> type_function_definition .)
    CHAR            reduce using rule 16 (function_definition -> type_function_definition .)
    STRING          reduce using rule 16 (function_definition -> type_function_definition .)
    BOOL            reduce using rule 16 (function_definition -> type_function_definition .)
    FLOAT           reduce using rule 16 (function_definition -> type_function_definition .)
    LONG            reduce using rule 16 (function_definition -> type_function_definition .)
    SHORT           reduce using rule 16 (function_definition -> type_function_definition .)
    DOUBLE          reduce using rule 16 (function_definition -> type_function_definition .)
    $end            reduce using rule 16 (function_definition -> type_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 16 (function_definition -> type_function_definition .)


state 14

    (17) function_definition -> void_function_definition .

    CLASS           reduce using rule 17 (function_definition -> void_function_definition .)
    HASH            reduce using rule 17 (function_definition -> void_function_definition .)
    USING           reduce using rule 17 (function_definition -> void_function_definition .)
    COMMENT         reduce using rule 17 (function_definition -> void_function_definition .)
    VOID            reduce using rule 17 (function_definition -> void_function_definition .)
    INT             reduce using rule 17 (function_definition -> void_function_definition .)
    CHAR            reduce using rule 17 (function_definition -> void_function_definition .)
    STRING          reduce using rule 17 (function_definition -> void_function_definition .)
    BOOL            reduce using rule 17 (function_definition -> void_function_definition .)
    FLOAT           reduce using rule 17 (function_definition -> void_function_definition .)
    LONG            reduce using rule 17 (function_definition -> void_function_definition .)
    SHORT           reduce using rule 17 (function_definition -> void_function_definition .)
    DOUBLE          reduce using rule 17 (function_definition -> void_function_definition .)
    $end            reduce using rule 17 (function_definition -> void_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 17 (function_definition -> void_function_definition .)


state 15

    (24) class_definition -> CLASS . VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON

    VAR             shift and go to state 31


state 16

    (15) including -> HASH . INCLUDE LIBRARY

    INCLUDE         shift and go to state 32


state 17

    (14) using_namespace_std -> USING . NAMESPACE STD SEMICOLON

    NAMESPACE       shift and go to state 33


state 18

    (97) var_declaration -> type . VAR SEMICOLON
    (99) var_declaration -> type . VAR EQUAL value SEMICOLON
    (100) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (101) array_declaration -> type . get_array_element SEMICOLON
    (18) type_function_definition -> type . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    VAR             shift and go to state 34

    get_array_element              shift and go to state 35

state 19

    (113) comment -> COMMENT .

    CLASS           reduce using rule 113 (comment -> COMMENT .)
    HASH            reduce using rule 113 (comment -> COMMENT .)
    USING           reduce using rule 113 (comment -> COMMENT .)
    COMMENT         reduce using rule 113 (comment -> COMMENT .)
    VOID            reduce using rule 113 (comment -> COMMENT .)
    INT             reduce using rule 113 (comment -> COMMENT .)
    CHAR            reduce using rule 113 (comment -> COMMENT .)
    STRING          reduce using rule 113 (comment -> COMMENT .)
    BOOL            reduce using rule 113 (comment -> COMMENT .)
    FLOAT           reduce using rule 113 (comment -> COMMENT .)
    LONG            reduce using rule 113 (comment -> COMMENT .)
    SHORT           reduce using rule 113 (comment -> COMMENT .)
    DOUBLE          reduce using rule 113 (comment -> COMMENT .)
    $end            reduce using rule 113 (comment -> COMMENT .)
    IF              reduce using rule 113 (comment -> COMMENT .)
    VAR             reduce using rule 113 (comment -> COMMENT .)
    COUT            reduce using rule 113 (comment -> COMMENT .)
    CIN             reduce using rule 113 (comment -> COMMENT .)
    WHILE           reduce using rule 113 (comment -> COMMENT .)
    FOR             reduce using rule 113 (comment -> COMMENT .)
    INT_NUMBER      reduce using rule 113 (comment -> COMMENT .)
    FLOAT_NUMBER    reduce using rule 113 (comment -> COMMENT .)
    TEXT            reduce using rule 113 (comment -> COMMENT .)
    SIGN            reduce using rule 113 (comment -> COMMENT .)
    TRUE            reduce using rule 113 (comment -> COMMENT .)
    FALSE           reduce using rule 113 (comment -> COMMENT .)
    RETURN          reduce using rule 113 (comment -> COMMENT .)
    RIGHT_BR_CURLY  reduce using rule 113 (comment -> COMMENT .)


state 20

    (19) void_function_definition -> VOID . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    VAR             shift and go to state 36


state 21

    (66) type -> INT .

    VAR             reduce using rule 66 (type -> INT .)


state 22

    (67) type -> CHAR .

    VAR             reduce using rule 67 (type -> CHAR .)


state 23

    (68) type -> STRING .

    VAR             reduce using rule 68 (type -> STRING .)


state 24

    (69) type -> BOOL .

    VAR             reduce using rule 69 (type -> BOOL .)


state 25

    (70) type -> FLOAT .

    VAR             reduce using rule 70 (type -> FLOAT .)


state 26

    (71) type -> LONG .

    VAR             reduce using rule 71 (type -> LONG .)


state 27

    (72) type -> SHORT .

    VAR             reduce using rule 72 (type -> SHORT .)


state 28

    (73) type -> DOUBLE .

    VAR             reduce using rule 73 (type -> DOUBLE .)


state 29

    (5) program_components -> program_component program_components .

    $end            reduce using rule 5 (program_components -> program_component program_components .)


state 30

    (13) program_component -> empty .

    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    COMMENT         reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)
    DOUBLE          reduce using rule 13 (program_component -> empty .)
    $end            reduce using rule 13 (program_component -> empty .)


state 31

    (24) class_definition -> CLASS VAR . LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON

    LEFT_BR_CURLY   shift and go to state 37


state 32

    (15) including -> HASH INCLUDE . LIBRARY

    LIBRARY         shift and go to state 38


state 33

    (14) using_namespace_std -> USING NAMESPACE . STD SEMICOLON

    STD             shift and go to state 39


state 34

    (97) var_declaration -> type VAR . SEMICOLON
    (99) var_declaration -> type VAR . EQUAL value SEMICOLON
    (100) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (18) type_function_definition -> type VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (89) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 40
    EQUAL           shift and go to state 41
    LEFT_BR         shift and go to state 42
    LEFT_BR_SQUARED shift and go to state 43


state 35

    (101) array_declaration -> type get_array_element . SEMICOLON

    SEMICOLON       shift and go to state 44


state 36

    (19) void_function_definition -> VOID VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 45


state 37

    (24) class_definition -> CLASS VAR LEFT_BR_CURLY . class_declarations RIGHT_BR_CURLY SEMICOLON
    (27) class_declarations -> . class_declaration
    (28) class_declarations -> . class_declaration class_declarations
    (29) class_declarations -> . empty
    (25) class_declaration -> . var_declaration
    (26) class_declaration -> . function_definition
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    RIGHT_BR_CURLY  reduce using rule 114 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 20

    class_declarations             shift and go to state 46
    class_declaration              shift and go to state 47
    empty                          shift and go to state 48
    var_declaration                shift and go to state 49
    function_definition            shift and go to state 50
    type                           shift and go to state 18
    array_declaration              shift and go to state 51
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 38

    (15) including -> HASH INCLUDE LIBRARY .

    CLASS           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    HASH            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    USING           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    COMMENT         reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    VOID            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    INT             reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    CHAR            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    STRING          reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    BOOL            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    FLOAT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    LONG            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    SHORT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    DOUBLE          reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    $end            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)


state 39

    (14) using_namespace_std -> USING NAMESPACE STD . SEMICOLON

    SEMICOLON       shift and go to state 52


state 40

    (97) var_declaration -> type VAR SEMICOLON .

    CLASS           reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    HASH            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    USING           reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    COMMENT         reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    VOID            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    INT             reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    CHAR            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    STRING          reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    BOOL            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    FLOAT           reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    LONG            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    SHORT           reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    DOUBLE          reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    $end            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    IF              reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    VAR             reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    COUT            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    CIN             reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    WHILE           reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    FOR             reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    TEXT            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    SIGN            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    TRUE            reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    FALSE           reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)
    RETURN          reduce using rule 97 (var_declaration -> type VAR SEMICOLON .)


state 41

    (99) var_declaration -> type VAR EQUAL . value SEMICOLON
    (100) var_declaration -> type VAR EQUAL . VAR SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

    VAR             shift and go to state 53
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    value                          shift and go to state 54
    number                         shift and go to state 55
    get_array_element              shift and go to state 56
    string_value                   shift and go to state 57
    bool_value                     shift and go to state 58

state 42

    (18) type_function_definition -> type VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (20) function_var_declaration -> . var_declaration_no_semicolon
    (21) function_var_declaration -> . var_declaration_no_semicolon COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (23) var_declaration_no_semicolon -> . type VAR
    (114) empty -> .
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE

    RIGHT_BR        reduce using rule 114 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

    type                           shift and go to state 65
    function_var_declaration       shift and go to state 66
    var_declaration_no_semicolon   shift and go to state 67
    empty                          shift and go to state 68

state 43

    (89) get_array_element -> VAR LEFT_BR_SQUARED . INT_NUMBER RIGHT_BR_SQUARED

    INT_NUMBER      shift and go to state 69


state 44

    (101) array_declaration -> type get_array_element SEMICOLON .

    CLASS           reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    HASH            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    USING           reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    COMMENT         reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    VOID            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    INT             reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    CHAR            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    STRING          reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    BOOL            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT           reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    LONG            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    SHORT           reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    DOUBLE          reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    $end            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    IF              reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    VAR             reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    COUT            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    CIN             reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    WHILE           reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    FOR             reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    INT_NUMBER      reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    TEXT            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    SIGN            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    TRUE            reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    FALSE           reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)
    RETURN          reduce using rule 101 (array_declaration -> type get_array_element SEMICOLON .)


state 45

    (19) void_function_definition -> VOID VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (20) function_var_declaration -> . var_declaration_no_semicolon
    (21) function_var_declaration -> . var_declaration_no_semicolon COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (23) var_declaration_no_semicolon -> . type VAR
    (114) empty -> .
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE

    RIGHT_BR        reduce using rule 114 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

    function_var_declaration       shift and go to state 70
    var_declaration_no_semicolon   shift and go to state 67
    empty                          shift and go to state 68
    type                           shift and go to state 65

state 46

    (24) class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations . RIGHT_BR_CURLY SEMICOLON

    RIGHT_BR_CURLY  shift and go to state 71


state 47

    (27) class_declarations -> class_declaration .
    (28) class_declarations -> class_declaration . class_declarations
    (27) class_declarations -> . class_declaration
    (28) class_declarations -> . class_declaration class_declarations
    (29) class_declarations -> . empty
    (25) class_declaration -> . var_declaration
    (26) class_declaration -> . function_definition
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 27 (class_declarations -> class_declaration .)
    RIGHT_BR_CURLY  reduce using rule 27 (class_declarations -> class_declaration .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 20

  ! RIGHT_BR_CURLY  [ reduce using rule 114 (empty -> .) ]

    class_declaration              shift and go to state 47
    class_declarations             shift and go to state 72
    empty                          shift and go to state 48
    var_declaration                shift and go to state 49
    function_definition            shift and go to state 50
    type                           shift and go to state 18
    array_declaration              shift and go to state 51
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 48

    (29) class_declarations -> empty .

    RIGHT_BR_CURLY  reduce using rule 29 (class_declarations -> empty .)


state 49

    (25) class_declaration -> var_declaration .

    INT             reduce using rule 25 (class_declaration -> var_declaration .)
    CHAR            reduce using rule 25 (class_declaration -> var_declaration .)
    STRING          reduce using rule 25 (class_declaration -> var_declaration .)
    BOOL            reduce using rule 25 (class_declaration -> var_declaration .)
    FLOAT           reduce using rule 25 (class_declaration -> var_declaration .)
    LONG            reduce using rule 25 (class_declaration -> var_declaration .)
    SHORT           reduce using rule 25 (class_declaration -> var_declaration .)
    DOUBLE          reduce using rule 25 (class_declaration -> var_declaration .)
    VOID            reduce using rule 25 (class_declaration -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 25 (class_declaration -> var_declaration .)


state 50

    (26) class_declaration -> function_definition .

    INT             reduce using rule 26 (class_declaration -> function_definition .)
    CHAR            reduce using rule 26 (class_declaration -> function_definition .)
    STRING          reduce using rule 26 (class_declaration -> function_definition .)
    BOOL            reduce using rule 26 (class_declaration -> function_definition .)
    FLOAT           reduce using rule 26 (class_declaration -> function_definition .)
    LONG            reduce using rule 26 (class_declaration -> function_definition .)
    SHORT           reduce using rule 26 (class_declaration -> function_definition .)
    DOUBLE          reduce using rule 26 (class_declaration -> function_definition .)
    VOID            reduce using rule 26 (class_declaration -> function_definition .)
    RIGHT_BR_CURLY  reduce using rule 26 (class_declaration -> function_definition .)


state 51

    (98) var_declaration -> array_declaration .

    INT             reduce using rule 98 (var_declaration -> array_declaration .)
    CHAR            reduce using rule 98 (var_declaration -> array_declaration .)
    STRING          reduce using rule 98 (var_declaration -> array_declaration .)
    BOOL            reduce using rule 98 (var_declaration -> array_declaration .)
    FLOAT           reduce using rule 98 (var_declaration -> array_declaration .)
    LONG            reduce using rule 98 (var_declaration -> array_declaration .)
    SHORT           reduce using rule 98 (var_declaration -> array_declaration .)
    DOUBLE          reduce using rule 98 (var_declaration -> array_declaration .)
    VOID            reduce using rule 98 (var_declaration -> array_declaration .)
    RIGHT_BR_CURLY  reduce using rule 98 (var_declaration -> array_declaration .)
    IF              reduce using rule 98 (var_declaration -> array_declaration .)
    VAR             reduce using rule 98 (var_declaration -> array_declaration .)
    COUT            reduce using rule 98 (var_declaration -> array_declaration .)
    CIN             reduce using rule 98 (var_declaration -> array_declaration .)
    COMMENT         reduce using rule 98 (var_declaration -> array_declaration .)
    WHILE           reduce using rule 98 (var_declaration -> array_declaration .)
    FOR             reduce using rule 98 (var_declaration -> array_declaration .)
    INT_NUMBER      reduce using rule 98 (var_declaration -> array_declaration .)
    FLOAT_NUMBER    reduce using rule 98 (var_declaration -> array_declaration .)
    TEXT            reduce using rule 98 (var_declaration -> array_declaration .)
    SIGN            reduce using rule 98 (var_declaration -> array_declaration .)
    TRUE            reduce using rule 98 (var_declaration -> array_declaration .)
    FALSE           reduce using rule 98 (var_declaration -> array_declaration .)
    RETURN          reduce using rule 98 (var_declaration -> array_declaration .)


state 52

    (14) using_namespace_std -> USING NAMESPACE STD SEMICOLON .

    CLASS           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    HASH            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    USING           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    COMMENT         reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    VOID            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    INT             reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    CHAR            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    STRING          reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    BOOL            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    FLOAT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    LONG            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    SHORT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    DOUBLE          reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    $end            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)


state 53

    (100) var_declaration -> type VAR EQUAL VAR . SEMICOLON
    (83) value -> VAR .
    (89) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 73
    LEFT_BR_SQUARED shift and go to state 43

  ! SEMICOLON       [ reduce using rule 83 (value -> VAR .) ]


state 54

    (99) var_declaration -> type VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 74


state 55

    (82) value -> number .

    SEMICOLON       reduce using rule 82 (value -> number .)
    PLUS            reduce using rule 82 (value -> number .)
    MINUS           reduce using rule 82 (value -> number .)
    MULTIPLY        reduce using rule 82 (value -> number .)
    DIVIDE          reduce using rule 82 (value -> number .)
    LESS            reduce using rule 82 (value -> number .)
    LESS_EQUAL      reduce using rule 82 (value -> number .)
    GREATER         reduce using rule 82 (value -> number .)
    GREATER_EQUAL   reduce using rule 82 (value -> number .)
    EQUAL_EQUAL     reduce using rule 82 (value -> number .)
    NOT_EQUAL       reduce using rule 82 (value -> number .)
    AND             reduce using rule 82 (value -> number .)
    OR              reduce using rule 82 (value -> number .)
    RIGHT_BR        reduce using rule 82 (value -> number .)


state 56

    (84) value -> get_array_element .

    SEMICOLON       reduce using rule 84 (value -> get_array_element .)
    LESS            reduce using rule 84 (value -> get_array_element .)
    LESS_EQUAL      reduce using rule 84 (value -> get_array_element .)
    GREATER         reduce using rule 84 (value -> get_array_element .)
    GREATER_EQUAL   reduce using rule 84 (value -> get_array_element .)
    EQUAL_EQUAL     reduce using rule 84 (value -> get_array_element .)
    NOT_EQUAL       reduce using rule 84 (value -> get_array_element .)
    AND             reduce using rule 84 (value -> get_array_element .)
    OR              reduce using rule 84 (value -> get_array_element .)
    RIGHT_BR        reduce using rule 84 (value -> get_array_element .)


state 57

    (85) value -> string_value .

    SEMICOLON       reduce using rule 85 (value -> string_value .)
    PLUS            reduce using rule 85 (value -> string_value .)
    MINUS           reduce using rule 85 (value -> string_value .)
    MULTIPLY        reduce using rule 85 (value -> string_value .)
    DIVIDE          reduce using rule 85 (value -> string_value .)
    LESS            reduce using rule 85 (value -> string_value .)
    LESS_EQUAL      reduce using rule 85 (value -> string_value .)
    GREATER         reduce using rule 85 (value -> string_value .)
    GREATER_EQUAL   reduce using rule 85 (value -> string_value .)
    EQUAL_EQUAL     reduce using rule 85 (value -> string_value .)
    NOT_EQUAL       reduce using rule 85 (value -> string_value .)
    AND             reduce using rule 85 (value -> string_value .)
    OR              reduce using rule 85 (value -> string_value .)
    RIGHT_BR        reduce using rule 85 (value -> string_value .)


state 58

    (86) value -> bool_value .

    SEMICOLON       reduce using rule 86 (value -> bool_value .)
    PLUS            reduce using rule 86 (value -> bool_value .)
    MINUS           reduce using rule 86 (value -> bool_value .)
    MULTIPLY        reduce using rule 86 (value -> bool_value .)
    DIVIDE          reduce using rule 86 (value -> bool_value .)
    LESS            reduce using rule 86 (value -> bool_value .)
    LESS_EQUAL      reduce using rule 86 (value -> bool_value .)
    GREATER         reduce using rule 86 (value -> bool_value .)
    GREATER_EQUAL   reduce using rule 86 (value -> bool_value .)
    EQUAL_EQUAL     reduce using rule 86 (value -> bool_value .)
    NOT_EQUAL       reduce using rule 86 (value -> bool_value .)
    AND             reduce using rule 86 (value -> bool_value .)
    OR              reduce using rule 86 (value -> bool_value .)
    RIGHT_BR        reduce using rule 86 (value -> bool_value .)


state 59

    (78) number -> INT_NUMBER .

    SEMICOLON       reduce using rule 78 (number -> INT_NUMBER .)
    PLUS            reduce using rule 78 (number -> INT_NUMBER .)
    MINUS           reduce using rule 78 (number -> INT_NUMBER .)
    MULTIPLY        reduce using rule 78 (number -> INT_NUMBER .)
    DIVIDE          reduce using rule 78 (number -> INT_NUMBER .)
    LESS            reduce using rule 78 (number -> INT_NUMBER .)
    LESS_EQUAL      reduce using rule 78 (number -> INT_NUMBER .)
    GREATER         reduce using rule 78 (number -> INT_NUMBER .)
    GREATER_EQUAL   reduce using rule 78 (number -> INT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 78 (number -> INT_NUMBER .)
    NOT_EQUAL       reduce using rule 78 (number -> INT_NUMBER .)
    AND             reduce using rule 78 (number -> INT_NUMBER .)
    OR              reduce using rule 78 (number -> INT_NUMBER .)
    RIGHT_BR        reduce using rule 78 (number -> INT_NUMBER .)


state 60

    (79) number -> FLOAT_NUMBER .

    SEMICOLON       reduce using rule 79 (number -> FLOAT_NUMBER .)
    PLUS            reduce using rule 79 (number -> FLOAT_NUMBER .)
    MINUS           reduce using rule 79 (number -> FLOAT_NUMBER .)
    MULTIPLY        reduce using rule 79 (number -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 79 (number -> FLOAT_NUMBER .)
    LESS            reduce using rule 79 (number -> FLOAT_NUMBER .)
    LESS_EQUAL      reduce using rule 79 (number -> FLOAT_NUMBER .)
    GREATER         reduce using rule 79 (number -> FLOAT_NUMBER .)
    GREATER_EQUAL   reduce using rule 79 (number -> FLOAT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 79 (number -> FLOAT_NUMBER .)
    NOT_EQUAL       reduce using rule 79 (number -> FLOAT_NUMBER .)
    AND             reduce using rule 79 (number -> FLOAT_NUMBER .)
    OR              reduce using rule 79 (number -> FLOAT_NUMBER .)
    RIGHT_BR        reduce using rule 79 (number -> FLOAT_NUMBER .)


state 61

    (76) string_value -> TEXT .

    SEMICOLON       reduce using rule 76 (string_value -> TEXT .)
    PLUS            reduce using rule 76 (string_value -> TEXT .)
    MINUS           reduce using rule 76 (string_value -> TEXT .)
    MULTIPLY        reduce using rule 76 (string_value -> TEXT .)
    DIVIDE          reduce using rule 76 (string_value -> TEXT .)
    LESS            reduce using rule 76 (string_value -> TEXT .)
    LESS_EQUAL      reduce using rule 76 (string_value -> TEXT .)
    GREATER         reduce using rule 76 (string_value -> TEXT .)
    GREATER_EQUAL   reduce using rule 76 (string_value -> TEXT .)
    EQUAL_EQUAL     reduce using rule 76 (string_value -> TEXT .)
    NOT_EQUAL       reduce using rule 76 (string_value -> TEXT .)
    AND             reduce using rule 76 (string_value -> TEXT .)
    OR              reduce using rule 76 (string_value -> TEXT .)
    RIGHT_BR        reduce using rule 76 (string_value -> TEXT .)


state 62

    (77) string_value -> SIGN .

    SEMICOLON       reduce using rule 77 (string_value -> SIGN .)
    PLUS            reduce using rule 77 (string_value -> SIGN .)
    MINUS           reduce using rule 77 (string_value -> SIGN .)
    MULTIPLY        reduce using rule 77 (string_value -> SIGN .)
    DIVIDE          reduce using rule 77 (string_value -> SIGN .)
    LESS            reduce using rule 77 (string_value -> SIGN .)
    LESS_EQUAL      reduce using rule 77 (string_value -> SIGN .)
    GREATER         reduce using rule 77 (string_value -> SIGN .)
    GREATER_EQUAL   reduce using rule 77 (string_value -> SIGN .)
    EQUAL_EQUAL     reduce using rule 77 (string_value -> SIGN .)
    NOT_EQUAL       reduce using rule 77 (string_value -> SIGN .)
    AND             reduce using rule 77 (string_value -> SIGN .)
    OR              reduce using rule 77 (string_value -> SIGN .)
    RIGHT_BR        reduce using rule 77 (string_value -> SIGN .)


state 63

    (80) bool_value -> TRUE .

    SEMICOLON       reduce using rule 80 (bool_value -> TRUE .)
    PLUS            reduce using rule 80 (bool_value -> TRUE .)
    MINUS           reduce using rule 80 (bool_value -> TRUE .)
    MULTIPLY        reduce using rule 80 (bool_value -> TRUE .)
    DIVIDE          reduce using rule 80 (bool_value -> TRUE .)
    LESS            reduce using rule 80 (bool_value -> TRUE .)
    LESS_EQUAL      reduce using rule 80 (bool_value -> TRUE .)
    GREATER         reduce using rule 80 (bool_value -> TRUE .)
    GREATER_EQUAL   reduce using rule 80 (bool_value -> TRUE .)
    EQUAL_EQUAL     reduce using rule 80 (bool_value -> TRUE .)
    NOT_EQUAL       reduce using rule 80 (bool_value -> TRUE .)
    RIGHT_BR        reduce using rule 80 (bool_value -> TRUE .)
    AND             reduce using rule 80 (bool_value -> TRUE .)
    OR              reduce using rule 80 (bool_value -> TRUE .)


state 64

    (81) bool_value -> FALSE .

    SEMICOLON       reduce using rule 81 (bool_value -> FALSE .)
    PLUS            reduce using rule 81 (bool_value -> FALSE .)
    MINUS           reduce using rule 81 (bool_value -> FALSE .)
    MULTIPLY        reduce using rule 81 (bool_value -> FALSE .)
    DIVIDE          reduce using rule 81 (bool_value -> FALSE .)
    LESS            reduce using rule 81 (bool_value -> FALSE .)
    LESS_EQUAL      reduce using rule 81 (bool_value -> FALSE .)
    GREATER         reduce using rule 81 (bool_value -> FALSE .)
    GREATER_EQUAL   reduce using rule 81 (bool_value -> FALSE .)
    EQUAL_EQUAL     reduce using rule 81 (bool_value -> FALSE .)
    NOT_EQUAL       reduce using rule 81 (bool_value -> FALSE .)
    RIGHT_BR        reduce using rule 81 (bool_value -> FALSE .)
    AND             reduce using rule 81 (bool_value -> FALSE .)
    OR              reduce using rule 81 (bool_value -> FALSE .)


state 65

    (23) var_declaration_no_semicolon -> type . VAR

    VAR             shift and go to state 75


state 66

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 76


state 67

    (20) function_var_declaration -> var_declaration_no_semicolon .
    (21) function_var_declaration -> var_declaration_no_semicolon . COMMA function_var_declaration

    RIGHT_BR        reduce using rule 20 (function_var_declaration -> var_declaration_no_semicolon .)
    COMMA           shift and go to state 77


state 68

    (22) function_var_declaration -> empty .

    RIGHT_BR        reduce using rule 22 (function_var_declaration -> empty .)


state 69

    (89) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER . RIGHT_BR_SQUARED

    RIGHT_BR_SQUARED shift and go to state 78


state 70

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 79


state 71

    (24) class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY . SEMICOLON

    SEMICOLON       shift and go to state 80


state 72

    (28) class_declarations -> class_declaration class_declarations .

    RIGHT_BR_CURLY  reduce using rule 28 (class_declarations -> class_declaration class_declarations .)


state 73

    (100) var_declaration -> type VAR EQUAL VAR SEMICOLON .

    CLASS           reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    HASH            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    USING           reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    COMMENT         reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VOID            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    $end            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    IF              reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    TEXT            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    SIGN            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    TRUE            reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FALSE           reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 100 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)


state 74

    (99) var_declaration -> type VAR EQUAL value SEMICOLON .

    CLASS           reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    HASH            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    USING           reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    COMMENT         reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VOID            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    $end            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    IF              reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    COUT            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CIN             reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    TEXT            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    SIGN            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    TRUE            reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FALSE           reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 99 (var_declaration -> type VAR EQUAL value SEMICOLON .)


state 75

    (23) var_declaration_no_semicolon -> type VAR .

    COMMA           reduce using rule 23 (var_declaration_no_semicolon -> type VAR .)
    RIGHT_BR        reduce using rule 23 (var_declaration_no_semicolon -> type VAR .)


state 76

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 81


state 77

    (21) function_var_declaration -> var_declaration_no_semicolon COMMA . function_var_declaration
    (20) function_var_declaration -> . var_declaration_no_semicolon
    (21) function_var_declaration -> . var_declaration_no_semicolon COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (23) var_declaration_no_semicolon -> . type VAR
    (114) empty -> .
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE

    RIGHT_BR        reduce using rule 114 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

    var_declaration_no_semicolon   shift and go to state 67
    function_var_declaration       shift and go to state 82
    empty                          shift and go to state 68
    type                           shift and go to state 65

state 78

    (89) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .

    SEMICOLON       reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL           reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    PLUS            reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    MINUS           reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    MULTIPLY        reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    DIVIDE          reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS            reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS_EQUAL      reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER         reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER_EQUAL   reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL_EQUAL     reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    NOT_EQUAL       reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    AND             reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    OR              reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    RIGHT_BR        reduce using rule 89 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)


state 79

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 83


state 80

    (24) class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .

    CLASS           reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    HASH            reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    USING           reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    COMMENT         reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    VOID            reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    INT             reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    CHAR            reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    STRING          reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    BOOL            reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    FLOAT           reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    LONG            reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    SHORT           reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    DOUBLE          reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)
    $end            reduce using rule 24 (class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON .)


state 81

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions returning RIGHT_BR_CURLY
    (115) change_tab_number -> .

    IF              reduce using rule 115 (change_tab_number -> .)
    VAR             reduce using rule 115 (change_tab_number -> .)
    COUT            reduce using rule 115 (change_tab_number -> .)
    CIN             reduce using rule 115 (change_tab_number -> .)
    COMMENT         reduce using rule 115 (change_tab_number -> .)
    WHILE           reduce using rule 115 (change_tab_number -> .)
    INT             reduce using rule 115 (change_tab_number -> .)
    CHAR            reduce using rule 115 (change_tab_number -> .)
    STRING          reduce using rule 115 (change_tab_number -> .)
    BOOL            reduce using rule 115 (change_tab_number -> .)
    FLOAT           reduce using rule 115 (change_tab_number -> .)
    LONG            reduce using rule 115 (change_tab_number -> .)
    SHORT           reduce using rule 115 (change_tab_number -> .)
    DOUBLE          reduce using rule 115 (change_tab_number -> .)
    FOR             reduce using rule 115 (change_tab_number -> .)
    INT_NUMBER      reduce using rule 115 (change_tab_number -> .)
    FLOAT_NUMBER    reduce using rule 115 (change_tab_number -> .)
    TEXT            reduce using rule 115 (change_tab_number -> .)
    SIGN            reduce using rule 115 (change_tab_number -> .)
    TRUE            reduce using rule 115 (change_tab_number -> .)
    FALSE           reduce using rule 115 (change_tab_number -> .)
    RETURN          reduce using rule 115 (change_tab_number -> .)

    change_tab_number              shift and go to state 84

state 82

    (21) function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration .

    RIGHT_BR        reduce using rule 21 (function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration .)


state 83

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (115) change_tab_number -> .

    IF              reduce using rule 115 (change_tab_number -> .)
    VAR             reduce using rule 115 (change_tab_number -> .)
    COUT            reduce using rule 115 (change_tab_number -> .)
    CIN             reduce using rule 115 (change_tab_number -> .)
    COMMENT         reduce using rule 115 (change_tab_number -> .)
    WHILE           reduce using rule 115 (change_tab_number -> .)
    INT             reduce using rule 115 (change_tab_number -> .)
    CHAR            reduce using rule 115 (change_tab_number -> .)
    STRING          reduce using rule 115 (change_tab_number -> .)
    BOOL            reduce using rule 115 (change_tab_number -> .)
    FLOAT           reduce using rule 115 (change_tab_number -> .)
    LONG            reduce using rule 115 (change_tab_number -> .)
    SHORT           reduce using rule 115 (change_tab_number -> .)
    DOUBLE          reduce using rule 115 (change_tab_number -> .)
    FOR             reduce using rule 115 (change_tab_number -> .)
    INT_NUMBER      reduce using rule 115 (change_tab_number -> .)
    FLOAT_NUMBER    reduce using rule 115 (change_tab_number -> .)
    TEXT            reduce using rule 115 (change_tab_number -> .)
    SIGN            reduce using rule 115 (change_tab_number -> .)
    TRUE            reduce using rule 115 (change_tab_number -> .)
    FALSE           reduce using rule 115 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 115 (change_tab_number -> .)

    change_tab_number              shift and go to state 85

state 84

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions returning RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (38) instruction -> . print
    (39) instruction -> . input
    (40) instruction -> . comment
    (48) loop -> . while_loop
    (49) loop -> . for_loop
    (51) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (93) assignment -> . VAR EQUAL value SEMICOLON
    (94) assignment -> . VAR EQUAL VAR SEMICOLON
    (95) assignment -> . get_array_element EQUAL value SEMICOLON
    (96) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (90) operation -> . increment
    (91) operation -> . decrement
    (92) operation -> . value operator value SEMICOLON
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (110) print -> . COUT out SEMICOLON
    (111) input -> . CIN in SEMICOLON
    (113) comment -> . COMMENT
    (41) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (87) increment -> . VAR PLUS_PLUS SEMICOLON
    (88) decrement -> . VAR MINUS_MINUS SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 87
    RETURN          reduce using rule 114 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 108
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! VAR             [ reduce using rule 114 (empty -> .) ]
  ! COUT            [ reduce using rule 114 (empty -> .) ]
  ! CIN             [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 114 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 114 (empty -> .) ]
  ! TEXT            [ reduce using rule 114 (empty -> .) ]
  ! SIGN            [ reduce using rule 114 (empty -> .) ]
  ! TRUE            [ reduce using rule 114 (empty -> .) ]
  ! FALSE           [ reduce using rule 114 (empty -> .) ]

    type                           shift and go to state 86
    instructions                   shift and go to state 88
    instruction                    shift and go to state 89
    loop                           shift and go to state 90
    if_statement                   shift and go to state 91
    assignment                     shift and go to state 92
    operation                      shift and go to state 93
    empty                          shift and go to state 94
    var_declaration                shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    comment                        shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    array_declaration              shift and go to state 51
    bool_value                     shift and go to state 58
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 55
    string_value                   shift and go to state 57

state 85

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (38) instruction -> . print
    (39) instruction -> . input
    (40) instruction -> . comment
    (48) loop -> . while_loop
    (49) loop -> . for_loop
    (51) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (93) assignment -> . VAR EQUAL value SEMICOLON
    (94) assignment -> . VAR EQUAL VAR SEMICOLON
    (95) assignment -> . get_array_element EQUAL value SEMICOLON
    (96) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (90) operation -> . increment
    (91) operation -> . decrement
    (92) operation -> . value operator value SEMICOLON
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (110) print -> . COUT out SEMICOLON
    (111) input -> . CIN in SEMICOLON
    (113) comment -> . COMMENT
    (41) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (87) increment -> . VAR PLUS_PLUS SEMICOLON
    (88) decrement -> . VAR MINUS_MINUS SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 87
    RIGHT_BR_CURLY  reduce using rule 114 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 108
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! VAR             [ reduce using rule 114 (empty -> .) ]
  ! COUT            [ reduce using rule 114 (empty -> .) ]
  ! CIN             [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 114 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 114 (empty -> .) ]
  ! TEXT            [ reduce using rule 114 (empty -> .) ]
  ! SIGN            [ reduce using rule 114 (empty -> .) ]
  ! TRUE            [ reduce using rule 114 (empty -> .) ]
  ! FALSE           [ reduce using rule 114 (empty -> .) ]

    instructions                   shift and go to state 111
    instruction                    shift and go to state 89
    loop                           shift and go to state 90
    if_statement                   shift and go to state 91
    assignment                     shift and go to state 92
    operation                      shift and go to state 93
    empty                          shift and go to state 94
    var_declaration                shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    comment                        shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 86
    array_declaration              shift and go to state 51
    bool_value                     shift and go to state 58
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 55
    string_value                   shift and go to state 57

state 86

    (97) var_declaration -> type . VAR SEMICOLON
    (99) var_declaration -> type . VAR EQUAL value SEMICOLON
    (100) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (101) array_declaration -> type . get_array_element SEMICOLON
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    VAR             shift and go to state 112

    get_array_element              shift and go to state 35

state 87

    (93) assignment -> VAR . EQUAL value SEMICOLON
    (94) assignment -> VAR . EQUAL VAR SEMICOLON
    (89) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (87) increment -> VAR . PLUS_PLUS SEMICOLON
    (88) decrement -> VAR . MINUS_MINUS SEMICOLON
    (83) value -> VAR .

    EQUAL           shift and go to state 113
    LEFT_BR_SQUARED shift and go to state 43
    PLUS_PLUS       shift and go to state 114
    MINUS_MINUS     shift and go to state 115
    PLUS            reduce using rule 83 (value -> VAR .)
    MINUS           reduce using rule 83 (value -> VAR .)
    MULTIPLY        reduce using rule 83 (value -> VAR .)
    DIVIDE          reduce using rule 83 (value -> VAR .)


state 88

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . returning RIGHT_BR_CURLY
    (112) returning -> . RETURN value SEMICOLON

    RETURN          shift and go to state 117

    returning                      shift and go to state 116

state 89

    (30) instructions -> instruction .
    (31) instructions -> instruction . instructions
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (38) instruction -> . print
    (39) instruction -> . input
    (40) instruction -> . comment
    (48) loop -> . while_loop
    (49) loop -> . for_loop
    (51) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (93) assignment -> . VAR EQUAL value SEMICOLON
    (94) assignment -> . VAR EQUAL VAR SEMICOLON
    (95) assignment -> . get_array_element EQUAL value SEMICOLON
    (96) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (90) operation -> . increment
    (91) operation -> . decrement
    (92) operation -> . value operator value SEMICOLON
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (110) print -> . COUT out SEMICOLON
    (111) input -> . CIN in SEMICOLON
    (113) comment -> . COMMENT
    (41) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (87) increment -> . VAR PLUS_PLUS SEMICOLON
    (88) decrement -> . VAR MINUS_MINUS SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 30 (instructions -> instruction .)
  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 30 (instructions -> instruction .)
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RETURN          reduce using rule 30 (instructions -> instruction .)
    RIGHT_BR_CURLY  reduce using rule 30 (instructions -> instruction .)
    IF              shift and go to state 101
    VAR             shift and go to state 87
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 108
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! VAR             [ reduce using rule 114 (empty -> .) ]
  ! COUT            [ reduce using rule 114 (empty -> .) ]
  ! CIN             [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 114 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 114 (empty -> .) ]
  ! TEXT            [ reduce using rule 114 (empty -> .) ]
  ! SIGN            [ reduce using rule 114 (empty -> .) ]
  ! TRUE            [ reduce using rule 114 (empty -> .) ]
  ! FALSE           [ reduce using rule 114 (empty -> .) ]
  ! RETURN          [ reduce using rule 114 (empty -> .) ]
  ! RIGHT_BR_CURLY  [ reduce using rule 114 (empty -> .) ]

    instruction                    shift and go to state 89
    instructions                   shift and go to state 118
    loop                           shift and go to state 90
    if_statement                   shift and go to state 91
    assignment                     shift and go to state 92
    operation                      shift and go to state 93
    empty                          shift and go to state 94
    var_declaration                shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    comment                        shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 86
    array_declaration              shift and go to state 51
    bool_value                     shift and go to state 58
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 55
    string_value                   shift and go to state 57

state 90

    (32) instruction -> loop .

    IF              reduce using rule 32 (instruction -> loop .)
    VAR             reduce using rule 32 (instruction -> loop .)
    COUT            reduce using rule 32 (instruction -> loop .)
    CIN             reduce using rule 32 (instruction -> loop .)
    COMMENT         reduce using rule 32 (instruction -> loop .)
    WHILE           reduce using rule 32 (instruction -> loop .)
    INT             reduce using rule 32 (instruction -> loop .)
    CHAR            reduce using rule 32 (instruction -> loop .)
    STRING          reduce using rule 32 (instruction -> loop .)
    BOOL            reduce using rule 32 (instruction -> loop .)
    FLOAT           reduce using rule 32 (instruction -> loop .)
    LONG            reduce using rule 32 (instruction -> loop .)
    SHORT           reduce using rule 32 (instruction -> loop .)
    DOUBLE          reduce using rule 32 (instruction -> loop .)
    FOR             reduce using rule 32 (instruction -> loop .)
    INT_NUMBER      reduce using rule 32 (instruction -> loop .)
    FLOAT_NUMBER    reduce using rule 32 (instruction -> loop .)
    TEXT            reduce using rule 32 (instruction -> loop .)
    SIGN            reduce using rule 32 (instruction -> loop .)
    TRUE            reduce using rule 32 (instruction -> loop .)
    FALSE           reduce using rule 32 (instruction -> loop .)
    RETURN          reduce using rule 32 (instruction -> loop .)
    RIGHT_BR_CURLY  reduce using rule 32 (instruction -> loop .)


state 91

    (33) instruction -> if_statement .

    IF              reduce using rule 33 (instruction -> if_statement .)
    VAR             reduce using rule 33 (instruction -> if_statement .)
    COUT            reduce using rule 33 (instruction -> if_statement .)
    CIN             reduce using rule 33 (instruction -> if_statement .)
    COMMENT         reduce using rule 33 (instruction -> if_statement .)
    WHILE           reduce using rule 33 (instruction -> if_statement .)
    INT             reduce using rule 33 (instruction -> if_statement .)
    CHAR            reduce using rule 33 (instruction -> if_statement .)
    STRING          reduce using rule 33 (instruction -> if_statement .)
    BOOL            reduce using rule 33 (instruction -> if_statement .)
    FLOAT           reduce using rule 33 (instruction -> if_statement .)
    LONG            reduce using rule 33 (instruction -> if_statement .)
    SHORT           reduce using rule 33 (instruction -> if_statement .)
    DOUBLE          reduce using rule 33 (instruction -> if_statement .)
    FOR             reduce using rule 33 (instruction -> if_statement .)
    INT_NUMBER      reduce using rule 33 (instruction -> if_statement .)
    FLOAT_NUMBER    reduce using rule 33 (instruction -> if_statement .)
    TEXT            reduce using rule 33 (instruction -> if_statement .)
    SIGN            reduce using rule 33 (instruction -> if_statement .)
    TRUE            reduce using rule 33 (instruction -> if_statement .)
    FALSE           reduce using rule 33 (instruction -> if_statement .)
    RETURN          reduce using rule 33 (instruction -> if_statement .)
    RIGHT_BR_CURLY  reduce using rule 33 (instruction -> if_statement .)


state 92

    (34) instruction -> assignment .

    IF              reduce using rule 34 (instruction -> assignment .)
    VAR             reduce using rule 34 (instruction -> assignment .)
    COUT            reduce using rule 34 (instruction -> assignment .)
    CIN             reduce using rule 34 (instruction -> assignment .)
    COMMENT         reduce using rule 34 (instruction -> assignment .)
    WHILE           reduce using rule 34 (instruction -> assignment .)
    INT             reduce using rule 34 (instruction -> assignment .)
    CHAR            reduce using rule 34 (instruction -> assignment .)
    STRING          reduce using rule 34 (instruction -> assignment .)
    BOOL            reduce using rule 34 (instruction -> assignment .)
    FLOAT           reduce using rule 34 (instruction -> assignment .)
    LONG            reduce using rule 34 (instruction -> assignment .)
    SHORT           reduce using rule 34 (instruction -> assignment .)
    DOUBLE          reduce using rule 34 (instruction -> assignment .)
    FOR             reduce using rule 34 (instruction -> assignment .)
    INT_NUMBER      reduce using rule 34 (instruction -> assignment .)
    FLOAT_NUMBER    reduce using rule 34 (instruction -> assignment .)
    TEXT            reduce using rule 34 (instruction -> assignment .)
    SIGN            reduce using rule 34 (instruction -> assignment .)
    TRUE            reduce using rule 34 (instruction -> assignment .)
    FALSE           reduce using rule 34 (instruction -> assignment .)
    RETURN          reduce using rule 34 (instruction -> assignment .)
    RIGHT_BR_CURLY  reduce using rule 34 (instruction -> assignment .)


state 93

    (35) instruction -> operation .

    IF              reduce using rule 35 (instruction -> operation .)
    VAR             reduce using rule 35 (instruction -> operation .)
    COUT            reduce using rule 35 (instruction -> operation .)
    CIN             reduce using rule 35 (instruction -> operation .)
    COMMENT         reduce using rule 35 (instruction -> operation .)
    WHILE           reduce using rule 35 (instruction -> operation .)
    INT             reduce using rule 35 (instruction -> operation .)
    CHAR            reduce using rule 35 (instruction -> operation .)
    STRING          reduce using rule 35 (instruction -> operation .)
    BOOL            reduce using rule 35 (instruction -> operation .)
    FLOAT           reduce using rule 35 (instruction -> operation .)
    LONG            reduce using rule 35 (instruction -> operation .)
    SHORT           reduce using rule 35 (instruction -> operation .)
    DOUBLE          reduce using rule 35 (instruction -> operation .)
    FOR             reduce using rule 35 (instruction -> operation .)
    INT_NUMBER      reduce using rule 35 (instruction -> operation .)
    FLOAT_NUMBER    reduce using rule 35 (instruction -> operation .)
    TEXT            reduce using rule 35 (instruction -> operation .)
    SIGN            reduce using rule 35 (instruction -> operation .)
    TRUE            reduce using rule 35 (instruction -> operation .)
    FALSE           reduce using rule 35 (instruction -> operation .)
    RETURN          reduce using rule 35 (instruction -> operation .)
    RIGHT_BR_CURLY  reduce using rule 35 (instruction -> operation .)


state 94

    (36) instruction -> empty .

    IF              reduce using rule 36 (instruction -> empty .)
    VAR             reduce using rule 36 (instruction -> empty .)
    COUT            reduce using rule 36 (instruction -> empty .)
    CIN             reduce using rule 36 (instruction -> empty .)
    COMMENT         reduce using rule 36 (instruction -> empty .)
    WHILE           reduce using rule 36 (instruction -> empty .)
    INT             reduce using rule 36 (instruction -> empty .)
    CHAR            reduce using rule 36 (instruction -> empty .)
    STRING          reduce using rule 36 (instruction -> empty .)
    BOOL            reduce using rule 36 (instruction -> empty .)
    FLOAT           reduce using rule 36 (instruction -> empty .)
    LONG            reduce using rule 36 (instruction -> empty .)
    SHORT           reduce using rule 36 (instruction -> empty .)
    DOUBLE          reduce using rule 36 (instruction -> empty .)
    FOR             reduce using rule 36 (instruction -> empty .)
    INT_NUMBER      reduce using rule 36 (instruction -> empty .)
    FLOAT_NUMBER    reduce using rule 36 (instruction -> empty .)
    TEXT            reduce using rule 36 (instruction -> empty .)
    SIGN            reduce using rule 36 (instruction -> empty .)
    TRUE            reduce using rule 36 (instruction -> empty .)
    FALSE           reduce using rule 36 (instruction -> empty .)
    RETURN          reduce using rule 36 (instruction -> empty .)
    RIGHT_BR_CURLY  reduce using rule 36 (instruction -> empty .)


state 95

    (37) instruction -> var_declaration .

    IF              reduce using rule 37 (instruction -> var_declaration .)
    VAR             reduce using rule 37 (instruction -> var_declaration .)
    COUT            reduce using rule 37 (instruction -> var_declaration .)
    CIN             reduce using rule 37 (instruction -> var_declaration .)
    COMMENT         reduce using rule 37 (instruction -> var_declaration .)
    WHILE           reduce using rule 37 (instruction -> var_declaration .)
    INT             reduce using rule 37 (instruction -> var_declaration .)
    CHAR            reduce using rule 37 (instruction -> var_declaration .)
    STRING          reduce using rule 37 (instruction -> var_declaration .)
    BOOL            reduce using rule 37 (instruction -> var_declaration .)
    FLOAT           reduce using rule 37 (instruction -> var_declaration .)
    LONG            reduce using rule 37 (instruction -> var_declaration .)
    SHORT           reduce using rule 37 (instruction -> var_declaration .)
    DOUBLE          reduce using rule 37 (instruction -> var_declaration .)
    FOR             reduce using rule 37 (instruction -> var_declaration .)
    INT_NUMBER      reduce using rule 37 (instruction -> var_declaration .)
    FLOAT_NUMBER    reduce using rule 37 (instruction -> var_declaration .)
    TEXT            reduce using rule 37 (instruction -> var_declaration .)
    SIGN            reduce using rule 37 (instruction -> var_declaration .)
    TRUE            reduce using rule 37 (instruction -> var_declaration .)
    FALSE           reduce using rule 37 (instruction -> var_declaration .)
    RETURN          reduce using rule 37 (instruction -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 37 (instruction -> var_declaration .)


state 96

    (38) instruction -> print .

    IF              reduce using rule 38 (instruction -> print .)
    VAR             reduce using rule 38 (instruction -> print .)
    COUT            reduce using rule 38 (instruction -> print .)
    CIN             reduce using rule 38 (instruction -> print .)
    COMMENT         reduce using rule 38 (instruction -> print .)
    WHILE           reduce using rule 38 (instruction -> print .)
    INT             reduce using rule 38 (instruction -> print .)
    CHAR            reduce using rule 38 (instruction -> print .)
    STRING          reduce using rule 38 (instruction -> print .)
    BOOL            reduce using rule 38 (instruction -> print .)
    FLOAT           reduce using rule 38 (instruction -> print .)
    LONG            reduce using rule 38 (instruction -> print .)
    SHORT           reduce using rule 38 (instruction -> print .)
    DOUBLE          reduce using rule 38 (instruction -> print .)
    FOR             reduce using rule 38 (instruction -> print .)
    INT_NUMBER      reduce using rule 38 (instruction -> print .)
    FLOAT_NUMBER    reduce using rule 38 (instruction -> print .)
    TEXT            reduce using rule 38 (instruction -> print .)
    SIGN            reduce using rule 38 (instruction -> print .)
    TRUE            reduce using rule 38 (instruction -> print .)
    FALSE           reduce using rule 38 (instruction -> print .)
    RETURN          reduce using rule 38 (instruction -> print .)
    RIGHT_BR_CURLY  reduce using rule 38 (instruction -> print .)


state 97

    (39) instruction -> input .

    IF              reduce using rule 39 (instruction -> input .)
    VAR             reduce using rule 39 (instruction -> input .)
    COUT            reduce using rule 39 (instruction -> input .)
    CIN             reduce using rule 39 (instruction -> input .)
    COMMENT         reduce using rule 39 (instruction -> input .)
    WHILE           reduce using rule 39 (instruction -> input .)
    INT             reduce using rule 39 (instruction -> input .)
    CHAR            reduce using rule 39 (instruction -> input .)
    STRING          reduce using rule 39 (instruction -> input .)
    BOOL            reduce using rule 39 (instruction -> input .)
    FLOAT           reduce using rule 39 (instruction -> input .)
    LONG            reduce using rule 39 (instruction -> input .)
    SHORT           reduce using rule 39 (instruction -> input .)
    DOUBLE          reduce using rule 39 (instruction -> input .)
    FOR             reduce using rule 39 (instruction -> input .)
    INT_NUMBER      reduce using rule 39 (instruction -> input .)
    FLOAT_NUMBER    reduce using rule 39 (instruction -> input .)
    TEXT            reduce using rule 39 (instruction -> input .)
    SIGN            reduce using rule 39 (instruction -> input .)
    TRUE            reduce using rule 39 (instruction -> input .)
    FALSE           reduce using rule 39 (instruction -> input .)
    RETURN          reduce using rule 39 (instruction -> input .)
    RIGHT_BR_CURLY  reduce using rule 39 (instruction -> input .)


state 98

    (40) instruction -> comment .

    IF              reduce using rule 40 (instruction -> comment .)
    VAR             reduce using rule 40 (instruction -> comment .)
    COUT            reduce using rule 40 (instruction -> comment .)
    CIN             reduce using rule 40 (instruction -> comment .)
    COMMENT         reduce using rule 40 (instruction -> comment .)
    WHILE           reduce using rule 40 (instruction -> comment .)
    INT             reduce using rule 40 (instruction -> comment .)
    CHAR            reduce using rule 40 (instruction -> comment .)
    STRING          reduce using rule 40 (instruction -> comment .)
    BOOL            reduce using rule 40 (instruction -> comment .)
    FLOAT           reduce using rule 40 (instruction -> comment .)
    LONG            reduce using rule 40 (instruction -> comment .)
    SHORT           reduce using rule 40 (instruction -> comment .)
    DOUBLE          reduce using rule 40 (instruction -> comment .)
    FOR             reduce using rule 40 (instruction -> comment .)
    INT_NUMBER      reduce using rule 40 (instruction -> comment .)
    FLOAT_NUMBER    reduce using rule 40 (instruction -> comment .)
    TEXT            reduce using rule 40 (instruction -> comment .)
    SIGN            reduce using rule 40 (instruction -> comment .)
    TRUE            reduce using rule 40 (instruction -> comment .)
    FALSE           reduce using rule 40 (instruction -> comment .)
    RETURN          reduce using rule 40 (instruction -> comment .)
    RIGHT_BR_CURLY  reduce using rule 40 (instruction -> comment .)


state 99

    (48) loop -> while_loop .

    IF              reduce using rule 48 (loop -> while_loop .)
    VAR             reduce using rule 48 (loop -> while_loop .)
    COUT            reduce using rule 48 (loop -> while_loop .)
    CIN             reduce using rule 48 (loop -> while_loop .)
    COMMENT         reduce using rule 48 (loop -> while_loop .)
    WHILE           reduce using rule 48 (loop -> while_loop .)
    INT             reduce using rule 48 (loop -> while_loop .)
    CHAR            reduce using rule 48 (loop -> while_loop .)
    STRING          reduce using rule 48 (loop -> while_loop .)
    BOOL            reduce using rule 48 (loop -> while_loop .)
    FLOAT           reduce using rule 48 (loop -> while_loop .)
    LONG            reduce using rule 48 (loop -> while_loop .)
    SHORT           reduce using rule 48 (loop -> while_loop .)
    DOUBLE          reduce using rule 48 (loop -> while_loop .)
    FOR             reduce using rule 48 (loop -> while_loop .)
    INT_NUMBER      reduce using rule 48 (loop -> while_loop .)
    FLOAT_NUMBER    reduce using rule 48 (loop -> while_loop .)
    TEXT            reduce using rule 48 (loop -> while_loop .)
    SIGN            reduce using rule 48 (loop -> while_loop .)
    TRUE            reduce using rule 48 (loop -> while_loop .)
    FALSE           reduce using rule 48 (loop -> while_loop .)
    RETURN          reduce using rule 48 (loop -> while_loop .)
    RIGHT_BR_CURLY  reduce using rule 48 (loop -> while_loop .)


state 100

    (49) loop -> for_loop .

    IF              reduce using rule 49 (loop -> for_loop .)
    VAR             reduce using rule 49 (loop -> for_loop .)
    COUT            reduce using rule 49 (loop -> for_loop .)
    CIN             reduce using rule 49 (loop -> for_loop .)
    COMMENT         reduce using rule 49 (loop -> for_loop .)
    WHILE           reduce using rule 49 (loop -> for_loop .)
    INT             reduce using rule 49 (loop -> for_loop .)
    CHAR            reduce using rule 49 (loop -> for_loop .)
    STRING          reduce using rule 49 (loop -> for_loop .)
    BOOL            reduce using rule 49 (loop -> for_loop .)
    FLOAT           reduce using rule 49 (loop -> for_loop .)
    LONG            reduce using rule 49 (loop -> for_loop .)
    SHORT           reduce using rule 49 (loop -> for_loop .)
    DOUBLE          reduce using rule 49 (loop -> for_loop .)
    FOR             reduce using rule 49 (loop -> for_loop .)
    INT_NUMBER      reduce using rule 49 (loop -> for_loop .)
    FLOAT_NUMBER    reduce using rule 49 (loop -> for_loop .)
    TEXT            reduce using rule 49 (loop -> for_loop .)
    SIGN            reduce using rule 49 (loop -> for_loop .)
    TRUE            reduce using rule 49 (loop -> for_loop .)
    FALSE           reduce using rule 49 (loop -> for_loop .)
    RETURN          reduce using rule 49 (loop -> for_loop .)
    RIGHT_BR_CURLY  reduce using rule 49 (loop -> for_loop .)


state 101

    (51) if_statement -> IF . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> IF . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement

    LEFT_BR         shift and go to state 119


state 102

    (92) operation -> value . operator value SEMICOLON
    (62) operator -> . PLUS
    (63) operator -> . MINUS
    (64) operator -> . MULTIPLY
    (65) operator -> . DIVIDE

    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    MULTIPLY        shift and go to state 123
    DIVIDE          shift and go to state 124

    operator                       shift and go to state 120

state 103

    (95) assignment -> get_array_element . EQUAL value SEMICOLON
    (96) assignment -> get_array_element . EQUAL VAR SEMICOLON
    (84) value -> get_array_element .

    EQUAL           shift and go to state 125
    PLUS            reduce using rule 84 (value -> get_array_element .)
    MINUS           reduce using rule 84 (value -> get_array_element .)
    MULTIPLY        reduce using rule 84 (value -> get_array_element .)
    DIVIDE          reduce using rule 84 (value -> get_array_element .)


state 104

    (90) operation -> increment .

    IF              reduce using rule 90 (operation -> increment .)
    VAR             reduce using rule 90 (operation -> increment .)
    COUT            reduce using rule 90 (operation -> increment .)
    CIN             reduce using rule 90 (operation -> increment .)
    COMMENT         reduce using rule 90 (operation -> increment .)
    WHILE           reduce using rule 90 (operation -> increment .)
    INT             reduce using rule 90 (operation -> increment .)
    CHAR            reduce using rule 90 (operation -> increment .)
    STRING          reduce using rule 90 (operation -> increment .)
    BOOL            reduce using rule 90 (operation -> increment .)
    FLOAT           reduce using rule 90 (operation -> increment .)
    LONG            reduce using rule 90 (operation -> increment .)
    SHORT           reduce using rule 90 (operation -> increment .)
    DOUBLE          reduce using rule 90 (operation -> increment .)
    FOR             reduce using rule 90 (operation -> increment .)
    INT_NUMBER      reduce using rule 90 (operation -> increment .)
    FLOAT_NUMBER    reduce using rule 90 (operation -> increment .)
    TEXT            reduce using rule 90 (operation -> increment .)
    SIGN            reduce using rule 90 (operation -> increment .)
    TRUE            reduce using rule 90 (operation -> increment .)
    FALSE           reduce using rule 90 (operation -> increment .)
    RETURN          reduce using rule 90 (operation -> increment .)
    RIGHT_BR_CURLY  reduce using rule 90 (operation -> increment .)


state 105

    (91) operation -> decrement .

    IF              reduce using rule 91 (operation -> decrement .)
    VAR             reduce using rule 91 (operation -> decrement .)
    COUT            reduce using rule 91 (operation -> decrement .)
    CIN             reduce using rule 91 (operation -> decrement .)
    COMMENT         reduce using rule 91 (operation -> decrement .)
    WHILE           reduce using rule 91 (operation -> decrement .)
    INT             reduce using rule 91 (operation -> decrement .)
    CHAR            reduce using rule 91 (operation -> decrement .)
    STRING          reduce using rule 91 (operation -> decrement .)
    BOOL            reduce using rule 91 (operation -> decrement .)
    FLOAT           reduce using rule 91 (operation -> decrement .)
    LONG            reduce using rule 91 (operation -> decrement .)
    SHORT           reduce using rule 91 (operation -> decrement .)
    DOUBLE          reduce using rule 91 (operation -> decrement .)
    FOR             reduce using rule 91 (operation -> decrement .)
    INT_NUMBER      reduce using rule 91 (operation -> decrement .)
    FLOAT_NUMBER    reduce using rule 91 (operation -> decrement .)
    TEXT            reduce using rule 91 (operation -> decrement .)
    SIGN            reduce using rule 91 (operation -> decrement .)
    TRUE            reduce using rule 91 (operation -> decrement .)
    FALSE           reduce using rule 91 (operation -> decrement .)
    RETURN          reduce using rule 91 (operation -> decrement .)
    RIGHT_BR_CURLY  reduce using rule 91 (operation -> decrement .)


state 106

    (110) print -> COUT . out SEMICOLON
    (102) out -> . OUT VAR
    (103) out -> . OUT VAR out
    (104) out -> . OUT TEXT
    (105) out -> . OUT TEXT out
    (106) out -> . OUT ENDL
    (107) out -> . OUT ENDL out

    OUT             shift and go to state 127

    out                            shift and go to state 126

state 107

    (111) input -> CIN . in SEMICOLON
    (108) in -> . IN VAR
    (109) in -> . IN VAR in

    IN              shift and go to state 129

    in                             shift and go to state 128

state 108

    (41) while_loop -> WHILE . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> WHILE . LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 130


state 109

    (47) for_loop -> for_loop_statement . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 131


state 110

    (43) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LEFT_BR         shift and go to state 132


state 111

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 133


state 112

    (97) var_declaration -> type VAR . SEMICOLON
    (99) var_declaration -> type VAR . EQUAL value SEMICOLON
    (100) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (89) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 40
    EQUAL           shift and go to state 41
    LEFT_BR_SQUARED shift and go to state 43


state 113

    (93) assignment -> VAR EQUAL . value SEMICOLON
    (94) assignment -> VAR EQUAL . VAR SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

    VAR             shift and go to state 134
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    value                          shift and go to state 135
    number                         shift and go to state 55
    get_array_element              shift and go to state 56
    string_value                   shift and go to state 57
    bool_value                     shift and go to state 58

state 114

    (87) increment -> VAR PLUS_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 136


state 115

    (88) decrement -> VAR MINUS_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 137


state 116

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 138


state 117

    (112) returning -> RETURN . value SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    value                          shift and go to state 139
    number                         shift and go to state 55
    get_array_element              shift and go to state 56
    string_value                   shift and go to state 57
    bool_value                     shift and go to state 58

state 118

    (31) instructions -> instruction instructions .

    RETURN          reduce using rule 31 (instructions -> instruction instructions .)
    RIGHT_BR_CURLY  reduce using rule 31 (instructions -> instruction instructions .)


state 119

    (51) if_statement -> IF LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> IF LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (53) comparisons -> . comparison
    (54) comparisons -> . comparison conjunction comparisons
    (55) comparison -> . value comparator value
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    comparisons                    shift and go to state 141
    comparison                     shift and go to state 142
    value                          shift and go to state 143
    number                         shift and go to state 55
    get_array_element              shift and go to state 56
    string_value                   shift and go to state 57
    bool_value                     shift and go to state 58

state 120

    (92) operation -> value operator . value SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    value                          shift and go to state 144
    number                         shift and go to state 55
    get_array_element              shift and go to state 56
    string_value                   shift and go to state 57
    bool_value                     shift and go to state 58

state 121

    (62) operator -> PLUS .

    VAR             reduce using rule 62 (operator -> PLUS .)
    INT_NUMBER      reduce using rule 62 (operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 62 (operator -> PLUS .)
    TEXT            reduce using rule 62 (operator -> PLUS .)
    SIGN            reduce using rule 62 (operator -> PLUS .)
    TRUE            reduce using rule 62 (operator -> PLUS .)
    FALSE           reduce using rule 62 (operator -> PLUS .)


state 122

    (63) operator -> MINUS .

    VAR             reduce using rule 63 (operator -> MINUS .)
    INT_NUMBER      reduce using rule 63 (operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 63 (operator -> MINUS .)
    TEXT            reduce using rule 63 (operator -> MINUS .)
    SIGN            reduce using rule 63 (operator -> MINUS .)
    TRUE            reduce using rule 63 (operator -> MINUS .)
    FALSE           reduce using rule 63 (operator -> MINUS .)


state 123

    (64) operator -> MULTIPLY .

    VAR             reduce using rule 64 (operator -> MULTIPLY .)
    INT_NUMBER      reduce using rule 64 (operator -> MULTIPLY .)
    FLOAT_NUMBER    reduce using rule 64 (operator -> MULTIPLY .)
    TEXT            reduce using rule 64 (operator -> MULTIPLY .)
    SIGN            reduce using rule 64 (operator -> MULTIPLY .)
    TRUE            reduce using rule 64 (operator -> MULTIPLY .)
    FALSE           reduce using rule 64 (operator -> MULTIPLY .)


state 124

    (65) operator -> DIVIDE .

    VAR             reduce using rule 65 (operator -> DIVIDE .)
    INT_NUMBER      reduce using rule 65 (operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 65 (operator -> DIVIDE .)
    TEXT            reduce using rule 65 (operator -> DIVIDE .)
    SIGN            reduce using rule 65 (operator -> DIVIDE .)
    TRUE            reduce using rule 65 (operator -> DIVIDE .)
    FALSE           reduce using rule 65 (operator -> DIVIDE .)


state 125

    (95) assignment -> get_array_element EQUAL . value SEMICOLON
    (96) assignment -> get_array_element EQUAL . VAR SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

    VAR             shift and go to state 146
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    get_array_element              shift and go to state 56
    value                          shift and go to state 145
    number                         shift and go to state 55
    string_value                   shift and go to state 57
    bool_value                     shift and go to state 58

state 126

    (110) print -> COUT out . SEMICOLON

    SEMICOLON       shift and go to state 147


state 127

    (102) out -> OUT . VAR
    (103) out -> OUT . VAR out
    (104) out -> OUT . TEXT
    (105) out -> OUT . TEXT out
    (106) out -> OUT . ENDL
    (107) out -> OUT . ENDL out

    VAR             shift and go to state 148
    TEXT            shift and go to state 149
    ENDL            shift and go to state 150


state 128

    (111) input -> CIN in . SEMICOLON

    SEMICOLON       shift and go to state 151


state 129

    (108) in -> IN . VAR
    (109) in -> IN . VAR in

    VAR             shift and go to state 152


state 130

    (41) while_loop -> WHILE LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> WHILE LEFT_BR . bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (53) comparisons -> . comparison
    (54) comparisons -> . comparison conjunction comparisons
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE
    (55) comparison -> . value comparator value
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN

    TRUE            shift and go to state 63
    FALSE           shift and go to state 64
    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62

    comparisons                    shift and go to state 153
    bool_value                     shift and go to state 154
    comparison                     shift and go to state 142
    value                          shift and go to state 143
    number                         shift and go to state 55
    get_array_element              shift and go to state 56
    string_value                   shift and go to state 57

state 131

    (47) for_loop -> for_loop_statement LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (115) change_tab_number -> .

    IF              reduce using rule 115 (change_tab_number -> .)
    VAR             reduce using rule 115 (change_tab_number -> .)
    COUT            reduce using rule 115 (change_tab_number -> .)
    CIN             reduce using rule 115 (change_tab_number -> .)
    COMMENT         reduce using rule 115 (change_tab_number -> .)
    WHILE           reduce using rule 115 (change_tab_number -> .)
    INT             reduce using rule 115 (change_tab_number -> .)
    CHAR            reduce using rule 115 (change_tab_number -> .)
    STRING          reduce using rule 115 (change_tab_number -> .)
    BOOL            reduce using rule 115 (change_tab_number -> .)
    FLOAT           reduce using rule 115 (change_tab_number -> .)
    LONG            reduce using rule 115 (change_tab_number -> .)
    SHORT           reduce using rule 115 (change_tab_number -> .)
    DOUBLE          reduce using rule 115 (change_tab_number -> .)
    FOR             reduce using rule 115 (change_tab_number -> .)
    INT_NUMBER      reduce using rule 115 (change_tab_number -> .)
    FLOAT_NUMBER    reduce using rule 115 (change_tab_number -> .)
    TEXT            reduce using rule 115 (change_tab_number -> .)
    SIGN            reduce using rule 115 (change_tab_number -> .)
    TRUE            reduce using rule 115 (change_tab_number -> .)
    FALSE           reduce using rule 115 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 115 (change_tab_number -> .)

    change_tab_number              shift and go to state 155

state 132

    (43) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT             shift and go to state 156


state 133

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    CLASS           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    HASH            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    USING           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VOID            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    $end            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 134

    (94) assignment -> VAR EQUAL VAR . SEMICOLON
    (83) value -> VAR .
    (89) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 157
    LEFT_BR_SQUARED shift and go to state 43

  ! SEMICOLON       [ reduce using rule 83 (value -> VAR .) ]


state 135

    (93) assignment -> VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 158


state 136

    (87) increment -> VAR PLUS_PLUS SEMICOLON .

    IF              reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    VAR             reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    COUT            reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CIN             reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    COMMENT         reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    WHILE           reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT             reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CHAR            reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    STRING          reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    BOOL            reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT           reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    LONG            reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    SHORT           reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    DOUBLE          reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FOR             reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT_NUMBER      reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    TEXT            reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    SIGN            reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    TRUE            reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FALSE           reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RETURN          reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 87 (increment -> VAR PLUS_PLUS SEMICOLON .)


state 137

    (88) decrement -> VAR MINUS_MINUS SEMICOLON .

    IF              reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    VAR             reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    COUT            reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CIN             reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    COMMENT         reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    WHILE           reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT             reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CHAR            reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    STRING          reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    BOOL            reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT           reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    LONG            reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    SHORT           reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    DOUBLE          reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FOR             reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT_NUMBER      reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    TEXT            reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    SIGN            reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    TRUE            reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FALSE           reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RETURN          reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 88 (decrement -> VAR MINUS_MINUS SEMICOLON .)


state 138

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .

    CLASS           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    HASH            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    USING           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    VOID            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    INT             reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    CHAR            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    STRING          reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    BOOL            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    LONG            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    SHORT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    $end            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)


state 139

    (112) returning -> RETURN value . SEMICOLON

    SEMICOLON       shift and go to state 159


state 140

    (83) value -> VAR .
    (89) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       reduce using rule 83 (value -> VAR .)
    LESS            reduce using rule 83 (value -> VAR .)
    LESS_EQUAL      reduce using rule 83 (value -> VAR .)
    GREATER         reduce using rule 83 (value -> VAR .)
    GREATER_EQUAL   reduce using rule 83 (value -> VAR .)
    EQUAL_EQUAL     reduce using rule 83 (value -> VAR .)
    NOT_EQUAL       reduce using rule 83 (value -> VAR .)
    AND             reduce using rule 83 (value -> VAR .)
    OR              reduce using rule 83 (value -> VAR .)
    RIGHT_BR        reduce using rule 83 (value -> VAR .)
    LEFT_BR_SQUARED shift and go to state 43


state 141

    (51) if_statement -> IF LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> IF LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement

    RIGHT_BR        shift and go to state 160


state 142

    (53) comparisons -> comparison .
    (54) comparisons -> comparison . conjunction comparisons
    (74) conjunction -> . AND
    (75) conjunction -> . OR

    RIGHT_BR        reduce using rule 53 (comparisons -> comparison .)
    AND             shift and go to state 162
    OR              shift and go to state 163

    conjunction                    shift and go to state 161

state 143

    (55) comparison -> value . comparator value
    (56) comparator -> . LESS
    (57) comparator -> . LESS_EQUAL
    (58) comparator -> . GREATER
    (59) comparator -> . GREATER_EQUAL
    (60) comparator -> . EQUAL_EQUAL
    (61) comparator -> . NOT_EQUAL

    LESS            shift and go to state 165
    LESS_EQUAL      shift and go to state 166
    GREATER         shift and go to state 167
    GREATER_EQUAL   shift and go to state 168
    EQUAL_EQUAL     shift and go to state 169
    NOT_EQUAL       shift and go to state 170

    comparator                     shift and go to state 164

state 144

    (92) operation -> value operator value . SEMICOLON

    SEMICOLON       shift and go to state 171


state 145

    (95) assignment -> get_array_element EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 172


state 146

    (96) assignment -> get_array_element EQUAL VAR . SEMICOLON
    (83) value -> VAR .
    (89) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 173
    LEFT_BR_SQUARED shift and go to state 43

  ! SEMICOLON       [ reduce using rule 83 (value -> VAR .) ]


state 147

    (110) print -> COUT out SEMICOLON .

    IF              reduce using rule 110 (print -> COUT out SEMICOLON .)
    VAR             reduce using rule 110 (print -> COUT out SEMICOLON .)
    COUT            reduce using rule 110 (print -> COUT out SEMICOLON .)
    CIN             reduce using rule 110 (print -> COUT out SEMICOLON .)
    COMMENT         reduce using rule 110 (print -> COUT out SEMICOLON .)
    WHILE           reduce using rule 110 (print -> COUT out SEMICOLON .)
    INT             reduce using rule 110 (print -> COUT out SEMICOLON .)
    CHAR            reduce using rule 110 (print -> COUT out SEMICOLON .)
    STRING          reduce using rule 110 (print -> COUT out SEMICOLON .)
    BOOL            reduce using rule 110 (print -> COUT out SEMICOLON .)
    FLOAT           reduce using rule 110 (print -> COUT out SEMICOLON .)
    LONG            reduce using rule 110 (print -> COUT out SEMICOLON .)
    SHORT           reduce using rule 110 (print -> COUT out SEMICOLON .)
    DOUBLE          reduce using rule 110 (print -> COUT out SEMICOLON .)
    FOR             reduce using rule 110 (print -> COUT out SEMICOLON .)
    INT_NUMBER      reduce using rule 110 (print -> COUT out SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 110 (print -> COUT out SEMICOLON .)
    TEXT            reduce using rule 110 (print -> COUT out SEMICOLON .)
    SIGN            reduce using rule 110 (print -> COUT out SEMICOLON .)
    TRUE            reduce using rule 110 (print -> COUT out SEMICOLON .)
    FALSE           reduce using rule 110 (print -> COUT out SEMICOLON .)
    RETURN          reduce using rule 110 (print -> COUT out SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 110 (print -> COUT out SEMICOLON .)


state 148

    (102) out -> OUT VAR .
    (103) out -> OUT VAR . out
    (102) out -> . OUT VAR
    (103) out -> . OUT VAR out
    (104) out -> . OUT TEXT
    (105) out -> . OUT TEXT out
    (106) out -> . OUT ENDL
    (107) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 102 (out -> OUT VAR .)
    OUT             shift and go to state 127

    out                            shift and go to state 174

state 149

    (104) out -> OUT TEXT .
    (105) out -> OUT TEXT . out
    (102) out -> . OUT VAR
    (103) out -> . OUT VAR out
    (104) out -> . OUT TEXT
    (105) out -> . OUT TEXT out
    (106) out -> . OUT ENDL
    (107) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 104 (out -> OUT TEXT .)
    OUT             shift and go to state 127

    out                            shift and go to state 175

state 150

    (106) out -> OUT ENDL .
    (107) out -> OUT ENDL . out
    (102) out -> . OUT VAR
    (103) out -> . OUT VAR out
    (104) out -> . OUT TEXT
    (105) out -> . OUT TEXT out
    (106) out -> . OUT ENDL
    (107) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 106 (out -> OUT ENDL .)
    OUT             shift and go to state 127

    out                            shift and go to state 176

state 151

    (111) input -> CIN in SEMICOLON .

    IF              reduce using rule 111 (input -> CIN in SEMICOLON .)
    VAR             reduce using rule 111 (input -> CIN in SEMICOLON .)
    COUT            reduce using rule 111 (input -> CIN in SEMICOLON .)
    CIN             reduce using rule 111 (input -> CIN in SEMICOLON .)
    COMMENT         reduce using rule 111 (input -> CIN in SEMICOLON .)
    WHILE           reduce using rule 111 (input -> CIN in SEMICOLON .)
    INT             reduce using rule 111 (input -> CIN in SEMICOLON .)
    CHAR            reduce using rule 111 (input -> CIN in SEMICOLON .)
    STRING          reduce using rule 111 (input -> CIN in SEMICOLON .)
    BOOL            reduce using rule 111 (input -> CIN in SEMICOLON .)
    FLOAT           reduce using rule 111 (input -> CIN in SEMICOLON .)
    LONG            reduce using rule 111 (input -> CIN in SEMICOLON .)
    SHORT           reduce using rule 111 (input -> CIN in SEMICOLON .)
    DOUBLE          reduce using rule 111 (input -> CIN in SEMICOLON .)
    FOR             reduce using rule 111 (input -> CIN in SEMICOLON .)
    INT_NUMBER      reduce using rule 111 (input -> CIN in SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 111 (input -> CIN in SEMICOLON .)
    TEXT            reduce using rule 111 (input -> CIN in SEMICOLON .)
    SIGN            reduce using rule 111 (input -> CIN in SEMICOLON .)
    TRUE            reduce using rule 111 (input -> CIN in SEMICOLON .)
    FALSE           reduce using rule 111 (input -> CIN in SEMICOLON .)
    RETURN          reduce using rule 111 (input -> CIN in SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 111 (input -> CIN in SEMICOLON .)


state 152

    (108) in -> IN VAR .
    (109) in -> IN VAR . in
    (108) in -> . IN VAR
    (109) in -> . IN VAR in

    SEMICOLON       reduce using rule 108 (in -> IN VAR .)
    IN              shift and go to state 129

    in                             shift and go to state 177

state 153

    (41) while_loop -> WHILE LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 178


state 154

    (42) while_loop -> WHILE LEFT_BR bool_value . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (86) value -> bool_value .

    RIGHT_BR        shift and go to state 179
    LESS            reduce using rule 86 (value -> bool_value .)
    LESS_EQUAL      reduce using rule 86 (value -> bool_value .)
    GREATER         reduce using rule 86 (value -> bool_value .)
    GREATER_EQUAL   reduce using rule 86 (value -> bool_value .)
    EQUAL_EQUAL     reduce using rule 86 (value -> bool_value .)
    NOT_EQUAL       reduce using rule 86 (value -> bool_value .)


state 155

    (47) for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (38) instruction -> . print
    (39) instruction -> . input
    (40) instruction -> . comment
    (48) loop -> . while_loop
    (49) loop -> . for_loop
    (51) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (93) assignment -> . VAR EQUAL value SEMICOLON
    (94) assignment -> . VAR EQUAL VAR SEMICOLON
    (95) assignment -> . get_array_element EQUAL value SEMICOLON
    (96) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (90) operation -> . increment
    (91) operation -> . decrement
    (92) operation -> . value operator value SEMICOLON
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (110) print -> . COUT out SEMICOLON
    (111) input -> . CIN in SEMICOLON
    (113) comment -> . COMMENT
    (41) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (87) increment -> . VAR PLUS_PLUS SEMICOLON
    (88) decrement -> . VAR MINUS_MINUS SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 87
    RIGHT_BR_CURLY  reduce using rule 114 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 108
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! VAR             [ reduce using rule 114 (empty -> .) ]
  ! COUT            [ reduce using rule 114 (empty -> .) ]
  ! CIN             [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 114 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 114 (empty -> .) ]
  ! TEXT            [ reduce using rule 114 (empty -> .) ]
  ! SIGN            [ reduce using rule 114 (empty -> .) ]
  ! TRUE            [ reduce using rule 114 (empty -> .) ]
  ! FALSE           [ reduce using rule 114 (empty -> .) ]

    for_loop_statement             shift and go to state 109
    instructions                   shift and go to state 180
    instruction                    shift and go to state 89
    loop                           shift and go to state 90
    if_statement                   shift and go to state 91
    assignment                     shift and go to state 92
    operation                      shift and go to state 93
    empty                          shift and go to state 94
    var_declaration                shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    comment                        shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 86
    array_declaration              shift and go to state 51
    bool_value                     shift and go to state 58
    number                         shift and go to state 55
    string_value                   shift and go to state 57

state 156

    (43) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 181


state 157

    (94) assignment -> VAR EQUAL VAR SEMICOLON .

    IF              reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    COMMENT         reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    TEXT            reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    SIGN            reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    TRUE            reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FALSE           reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 94 (assignment -> VAR EQUAL VAR SEMICOLON .)


state 158

    (93) assignment -> VAR EQUAL value SEMICOLON .

    IF              reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    COUT            reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    CIN             reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    COMMENT         reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    TEXT            reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    SIGN            reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    TRUE            reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    FALSE           reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 93 (assignment -> VAR EQUAL value SEMICOLON .)


state 159

    (112) returning -> RETURN value SEMICOLON .

    RIGHT_BR_CURLY  reduce using rule 112 (returning -> RETURN value SEMICOLON .)


state 160

    (51) if_statement -> IF LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement

    LEFT_BR_CURLY   shift and go to state 182


state 161

    (54) comparisons -> comparison conjunction . comparisons
    (53) comparisons -> . comparison
    (54) comparisons -> . comparison conjunction comparisons
    (55) comparison -> . value comparator value
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    comparison                     shift and go to state 142
    comparisons                    shift and go to state 183
    value                          shift and go to state 143
    number                         shift and go to state 55
    get_array_element              shift and go to state 56
    string_value                   shift and go to state 57
    bool_value                     shift and go to state 58

state 162

    (74) conjunction -> AND .

    VAR             reduce using rule 74 (conjunction -> AND .)
    INT_NUMBER      reduce using rule 74 (conjunction -> AND .)
    FLOAT_NUMBER    reduce using rule 74 (conjunction -> AND .)
    TEXT            reduce using rule 74 (conjunction -> AND .)
    SIGN            reduce using rule 74 (conjunction -> AND .)
    TRUE            reduce using rule 74 (conjunction -> AND .)
    FALSE           reduce using rule 74 (conjunction -> AND .)


state 163

    (75) conjunction -> OR .

    VAR             reduce using rule 75 (conjunction -> OR .)
    INT_NUMBER      reduce using rule 75 (conjunction -> OR .)
    FLOAT_NUMBER    reduce using rule 75 (conjunction -> OR .)
    TEXT            reduce using rule 75 (conjunction -> OR .)
    SIGN            reduce using rule 75 (conjunction -> OR .)
    TRUE            reduce using rule 75 (conjunction -> OR .)
    FALSE           reduce using rule 75 (conjunction -> OR .)


state 164

    (55) comparison -> value comparator . value
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

    value                          shift and go to state 184
    number                         shift and go to state 55
    get_array_element              shift and go to state 56
    string_value                   shift and go to state 57
    bool_value                     shift and go to state 58

state 165

    (56) comparator -> LESS .

    VAR             reduce using rule 56 (comparator -> LESS .)
    INT_NUMBER      reduce using rule 56 (comparator -> LESS .)
    FLOAT_NUMBER    reduce using rule 56 (comparator -> LESS .)
    TEXT            reduce using rule 56 (comparator -> LESS .)
    SIGN            reduce using rule 56 (comparator -> LESS .)
    TRUE            reduce using rule 56 (comparator -> LESS .)
    FALSE           reduce using rule 56 (comparator -> LESS .)


state 166

    (57) comparator -> LESS_EQUAL .

    VAR             reduce using rule 57 (comparator -> LESS_EQUAL .)
    INT_NUMBER      reduce using rule 57 (comparator -> LESS_EQUAL .)
    FLOAT_NUMBER    reduce using rule 57 (comparator -> LESS_EQUAL .)
    TEXT            reduce using rule 57 (comparator -> LESS_EQUAL .)
    SIGN            reduce using rule 57 (comparator -> LESS_EQUAL .)
    TRUE            reduce using rule 57 (comparator -> LESS_EQUAL .)
    FALSE           reduce using rule 57 (comparator -> LESS_EQUAL .)


state 167

    (58) comparator -> GREATER .

    VAR             reduce using rule 58 (comparator -> GREATER .)
    INT_NUMBER      reduce using rule 58 (comparator -> GREATER .)
    FLOAT_NUMBER    reduce using rule 58 (comparator -> GREATER .)
    TEXT            reduce using rule 58 (comparator -> GREATER .)
    SIGN            reduce using rule 58 (comparator -> GREATER .)
    TRUE            reduce using rule 58 (comparator -> GREATER .)
    FALSE           reduce using rule 58 (comparator -> GREATER .)


state 168

    (59) comparator -> GREATER_EQUAL .

    VAR             reduce using rule 59 (comparator -> GREATER_EQUAL .)
    INT_NUMBER      reduce using rule 59 (comparator -> GREATER_EQUAL .)
    FLOAT_NUMBER    reduce using rule 59 (comparator -> GREATER_EQUAL .)
    TEXT            reduce using rule 59 (comparator -> GREATER_EQUAL .)
    SIGN            reduce using rule 59 (comparator -> GREATER_EQUAL .)
    TRUE            reduce using rule 59 (comparator -> GREATER_EQUAL .)
    FALSE           reduce using rule 59 (comparator -> GREATER_EQUAL .)


state 169

    (60) comparator -> EQUAL_EQUAL .

    VAR             reduce using rule 60 (comparator -> EQUAL_EQUAL .)
    INT_NUMBER      reduce using rule 60 (comparator -> EQUAL_EQUAL .)
    FLOAT_NUMBER    reduce using rule 60 (comparator -> EQUAL_EQUAL .)
    TEXT            reduce using rule 60 (comparator -> EQUAL_EQUAL .)
    SIGN            reduce using rule 60 (comparator -> EQUAL_EQUAL .)
    TRUE            reduce using rule 60 (comparator -> EQUAL_EQUAL .)
    FALSE           reduce using rule 60 (comparator -> EQUAL_EQUAL .)


state 170

    (61) comparator -> NOT_EQUAL .

    VAR             reduce using rule 61 (comparator -> NOT_EQUAL .)
    INT_NUMBER      reduce using rule 61 (comparator -> NOT_EQUAL .)
    FLOAT_NUMBER    reduce using rule 61 (comparator -> NOT_EQUAL .)
    TEXT            reduce using rule 61 (comparator -> NOT_EQUAL .)
    SIGN            reduce using rule 61 (comparator -> NOT_EQUAL .)
    TRUE            reduce using rule 61 (comparator -> NOT_EQUAL .)
    FALSE           reduce using rule 61 (comparator -> NOT_EQUAL .)


state 171

    (92) operation -> value operator value SEMICOLON .

    IF              reduce using rule 92 (operation -> value operator value SEMICOLON .)
    VAR             reduce using rule 92 (operation -> value operator value SEMICOLON .)
    COUT            reduce using rule 92 (operation -> value operator value SEMICOLON .)
    CIN             reduce using rule 92 (operation -> value operator value SEMICOLON .)
    COMMENT         reduce using rule 92 (operation -> value operator value SEMICOLON .)
    WHILE           reduce using rule 92 (operation -> value operator value SEMICOLON .)
    INT             reduce using rule 92 (operation -> value operator value SEMICOLON .)
    CHAR            reduce using rule 92 (operation -> value operator value SEMICOLON .)
    STRING          reduce using rule 92 (operation -> value operator value SEMICOLON .)
    BOOL            reduce using rule 92 (operation -> value operator value SEMICOLON .)
    FLOAT           reduce using rule 92 (operation -> value operator value SEMICOLON .)
    LONG            reduce using rule 92 (operation -> value operator value SEMICOLON .)
    SHORT           reduce using rule 92 (operation -> value operator value SEMICOLON .)
    DOUBLE          reduce using rule 92 (operation -> value operator value SEMICOLON .)
    FOR             reduce using rule 92 (operation -> value operator value SEMICOLON .)
    INT_NUMBER      reduce using rule 92 (operation -> value operator value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 92 (operation -> value operator value SEMICOLON .)
    TEXT            reduce using rule 92 (operation -> value operator value SEMICOLON .)
    SIGN            reduce using rule 92 (operation -> value operator value SEMICOLON .)
    TRUE            reduce using rule 92 (operation -> value operator value SEMICOLON .)
    FALSE           reduce using rule 92 (operation -> value operator value SEMICOLON .)
    RETURN          reduce using rule 92 (operation -> value operator value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 92 (operation -> value operator value SEMICOLON .)


state 172

    (95) assignment -> get_array_element EQUAL value SEMICOLON .

    IF              reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    VAR             reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    COUT            reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    CIN             reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    COMMENT         reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    WHILE           reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    INT             reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    CHAR            reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    STRING          reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    BOOL            reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    LONG            reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    SHORT           reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FOR             reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    TEXT            reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    SIGN            reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    TRUE            reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FALSE           reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RETURN          reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 95 (assignment -> get_array_element EQUAL value SEMICOLON .)


state 173

    (96) assignment -> get_array_element EQUAL VAR SEMICOLON .

    IF              reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    COMMENT         reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    INT             reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    TEXT            reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    SIGN            reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    TRUE            reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FALSE           reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 96 (assignment -> get_array_element EQUAL VAR SEMICOLON .)


state 174

    (103) out -> OUT VAR out .

    SEMICOLON       reduce using rule 103 (out -> OUT VAR out .)


state 175

    (105) out -> OUT TEXT out .

    SEMICOLON       reduce using rule 105 (out -> OUT TEXT out .)


state 176

    (107) out -> OUT ENDL out .

    SEMICOLON       reduce using rule 107 (out -> OUT ENDL out .)


state 177

    (109) in -> IN VAR in .

    SEMICOLON       reduce using rule 109 (in -> IN VAR in .)


state 178

    (41) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 185


state 179

    (42) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 186


state 180

    (47) for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 187


state 181

    (43) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    EQUAL           shift and go to state 188


state 182

    (51) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY else_statement
    (115) change_tab_number -> .

    IF              reduce using rule 115 (change_tab_number -> .)
    VAR             reduce using rule 115 (change_tab_number -> .)
    COUT            reduce using rule 115 (change_tab_number -> .)
    CIN             reduce using rule 115 (change_tab_number -> .)
    COMMENT         reduce using rule 115 (change_tab_number -> .)
    WHILE           reduce using rule 115 (change_tab_number -> .)
    INT             reduce using rule 115 (change_tab_number -> .)
    CHAR            reduce using rule 115 (change_tab_number -> .)
    STRING          reduce using rule 115 (change_tab_number -> .)
    BOOL            reduce using rule 115 (change_tab_number -> .)
    FLOAT           reduce using rule 115 (change_tab_number -> .)
    LONG            reduce using rule 115 (change_tab_number -> .)
    SHORT           reduce using rule 115 (change_tab_number -> .)
    DOUBLE          reduce using rule 115 (change_tab_number -> .)
    FOR             reduce using rule 115 (change_tab_number -> .)
    INT_NUMBER      reduce using rule 115 (change_tab_number -> .)
    FLOAT_NUMBER    reduce using rule 115 (change_tab_number -> .)
    TEXT            reduce using rule 115 (change_tab_number -> .)
    SIGN            reduce using rule 115 (change_tab_number -> .)
    TRUE            reduce using rule 115 (change_tab_number -> .)
    FALSE           reduce using rule 115 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 115 (change_tab_number -> .)

    change_tab_number              shift and go to state 189

state 183

    (54) comparisons -> comparison conjunction comparisons .

    RIGHT_BR        reduce using rule 54 (comparisons -> comparison conjunction comparisons .)


state 184

    (55) comparison -> value comparator value .

    AND             reduce using rule 55 (comparison -> value comparator value .)
    OR              reduce using rule 55 (comparison -> value comparator value .)
    RIGHT_BR        reduce using rule 55 (comparison -> value comparator value .)


state 185

    (41) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (115) change_tab_number -> .

    IF              reduce using rule 115 (change_tab_number -> .)
    VAR             reduce using rule 115 (change_tab_number -> .)
    COUT            reduce using rule 115 (change_tab_number -> .)
    CIN             reduce using rule 115 (change_tab_number -> .)
    COMMENT         reduce using rule 115 (change_tab_number -> .)
    WHILE           reduce using rule 115 (change_tab_number -> .)
    INT             reduce using rule 115 (change_tab_number -> .)
    CHAR            reduce using rule 115 (change_tab_number -> .)
    STRING          reduce using rule 115 (change_tab_number -> .)
    BOOL            reduce using rule 115 (change_tab_number -> .)
    FLOAT           reduce using rule 115 (change_tab_number -> .)
    LONG            reduce using rule 115 (change_tab_number -> .)
    SHORT           reduce using rule 115 (change_tab_number -> .)
    DOUBLE          reduce using rule 115 (change_tab_number -> .)
    FOR             reduce using rule 115 (change_tab_number -> .)
    INT_NUMBER      reduce using rule 115 (change_tab_number -> .)
    FLOAT_NUMBER    reduce using rule 115 (change_tab_number -> .)
    TEXT            reduce using rule 115 (change_tab_number -> .)
    SIGN            reduce using rule 115 (change_tab_number -> .)
    TRUE            reduce using rule 115 (change_tab_number -> .)
    FALSE           reduce using rule 115 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 115 (change_tab_number -> .)

    change_tab_number              shift and go to state 190

state 186

    (42) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (115) change_tab_number -> .

    IF              reduce using rule 115 (change_tab_number -> .)
    VAR             reduce using rule 115 (change_tab_number -> .)
    COUT            reduce using rule 115 (change_tab_number -> .)
    CIN             reduce using rule 115 (change_tab_number -> .)
    COMMENT         reduce using rule 115 (change_tab_number -> .)
    WHILE           reduce using rule 115 (change_tab_number -> .)
    INT             reduce using rule 115 (change_tab_number -> .)
    CHAR            reduce using rule 115 (change_tab_number -> .)
    STRING          reduce using rule 115 (change_tab_number -> .)
    BOOL            reduce using rule 115 (change_tab_number -> .)
    FLOAT           reduce using rule 115 (change_tab_number -> .)
    LONG            reduce using rule 115 (change_tab_number -> .)
    SHORT           reduce using rule 115 (change_tab_number -> .)
    DOUBLE          reduce using rule 115 (change_tab_number -> .)
    FOR             reduce using rule 115 (change_tab_number -> .)
    INT_NUMBER      reduce using rule 115 (change_tab_number -> .)
    FLOAT_NUMBER    reduce using rule 115 (change_tab_number -> .)
    TEXT            reduce using rule 115 (change_tab_number -> .)
    SIGN            reduce using rule 115 (change_tab_number -> .)
    TRUE            reduce using rule 115 (change_tab_number -> .)
    FALSE           reduce using rule 115 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 115 (change_tab_number -> .)

    change_tab_number              shift and go to state 191

state 187

    (47) for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    IF              reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    TRUE            reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FALSE           reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 47 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 188

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 192


state 189

    (51) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY else_statement
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (38) instruction -> . print
    (39) instruction -> . input
    (40) instruction -> . comment
    (48) loop -> . while_loop
    (49) loop -> . for_loop
    (51) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (93) assignment -> . VAR EQUAL value SEMICOLON
    (94) assignment -> . VAR EQUAL VAR SEMICOLON
    (95) assignment -> . get_array_element EQUAL value SEMICOLON
    (96) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (90) operation -> . increment
    (91) operation -> . decrement
    (92) operation -> . value operator value SEMICOLON
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (110) print -> . COUT out SEMICOLON
    (111) input -> . CIN in SEMICOLON
    (113) comment -> . COMMENT
    (41) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (87) increment -> . VAR PLUS_PLUS SEMICOLON
    (88) decrement -> . VAR MINUS_MINUS SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 87
    RIGHT_BR_CURLY  reduce using rule 114 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 108
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! VAR             [ reduce using rule 114 (empty -> .) ]
  ! COUT            [ reduce using rule 114 (empty -> .) ]
  ! CIN             [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 114 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 114 (empty -> .) ]
  ! TEXT            [ reduce using rule 114 (empty -> .) ]
  ! SIGN            [ reduce using rule 114 (empty -> .) ]
  ! TRUE            [ reduce using rule 114 (empty -> .) ]
  ! FALSE           [ reduce using rule 114 (empty -> .) ]

    instructions                   shift and go to state 193
    instruction                    shift and go to state 89
    loop                           shift and go to state 90
    if_statement                   shift and go to state 91
    assignment                     shift and go to state 92
    operation                      shift and go to state 93
    empty                          shift and go to state 94
    var_declaration                shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    comment                        shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 86
    array_declaration              shift and go to state 51
    bool_value                     shift and go to state 58
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 55
    string_value                   shift and go to state 57

state 190

    (41) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (38) instruction -> . print
    (39) instruction -> . input
    (40) instruction -> . comment
    (48) loop -> . while_loop
    (49) loop -> . for_loop
    (51) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (93) assignment -> . VAR EQUAL value SEMICOLON
    (94) assignment -> . VAR EQUAL VAR SEMICOLON
    (95) assignment -> . get_array_element EQUAL value SEMICOLON
    (96) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (90) operation -> . increment
    (91) operation -> . decrement
    (92) operation -> . value operator value SEMICOLON
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (110) print -> . COUT out SEMICOLON
    (111) input -> . CIN in SEMICOLON
    (113) comment -> . COMMENT
    (41) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (87) increment -> . VAR PLUS_PLUS SEMICOLON
    (88) decrement -> . VAR MINUS_MINUS SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 87
    RIGHT_BR_CURLY  reduce using rule 114 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 108
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! VAR             [ reduce using rule 114 (empty -> .) ]
  ! COUT            [ reduce using rule 114 (empty -> .) ]
  ! CIN             [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 114 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 114 (empty -> .) ]
  ! TEXT            [ reduce using rule 114 (empty -> .) ]
  ! SIGN            [ reduce using rule 114 (empty -> .) ]
  ! TRUE            [ reduce using rule 114 (empty -> .) ]
  ! FALSE           [ reduce using rule 114 (empty -> .) ]

    instructions                   shift and go to state 194
    instruction                    shift and go to state 89
    loop                           shift and go to state 90
    if_statement                   shift and go to state 91
    assignment                     shift and go to state 92
    operation                      shift and go to state 93
    empty                          shift and go to state 94
    var_declaration                shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    comment                        shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 86
    array_declaration              shift and go to state 51
    bool_value                     shift and go to state 58
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 55
    string_value                   shift and go to state 57

state 191

    (42) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (38) instruction -> . print
    (39) instruction -> . input
    (40) instruction -> . comment
    (48) loop -> . while_loop
    (49) loop -> . for_loop
    (51) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (93) assignment -> . VAR EQUAL value SEMICOLON
    (94) assignment -> . VAR EQUAL VAR SEMICOLON
    (95) assignment -> . get_array_element EQUAL value SEMICOLON
    (96) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (90) operation -> . increment
    (91) operation -> . decrement
    (92) operation -> . value operator value SEMICOLON
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (110) print -> . COUT out SEMICOLON
    (111) input -> . CIN in SEMICOLON
    (113) comment -> . COMMENT
    (41) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (87) increment -> . VAR PLUS_PLUS SEMICOLON
    (88) decrement -> . VAR MINUS_MINUS SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 87
    RIGHT_BR_CURLY  reduce using rule 114 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 108
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! VAR             [ reduce using rule 114 (empty -> .) ]
  ! COUT            [ reduce using rule 114 (empty -> .) ]
  ! CIN             [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 114 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 114 (empty -> .) ]
  ! TEXT            [ reduce using rule 114 (empty -> .) ]
  ! SIGN            [ reduce using rule 114 (empty -> .) ]
  ! TRUE            [ reduce using rule 114 (empty -> .) ]
  ! FALSE           [ reduce using rule 114 (empty -> .) ]

    bool_value                     shift and go to state 58
    instructions                   shift and go to state 195
    instruction                    shift and go to state 89
    loop                           shift and go to state 90
    if_statement                   shift and go to state 91
    assignment                     shift and go to state 92
    operation                      shift and go to state 93
    empty                          shift and go to state 94
    var_declaration                shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    comment                        shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 86
    array_declaration              shift and go to state 51
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 55
    string_value                   shift and go to state 57

state 192

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 196


state 193

    (51) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY
    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY else_statement

    RIGHT_BR_CURLY  shift and go to state 197


state 194

    (41) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 198


state 195

    (42) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 199


state 196

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 200


state 197

    (51) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .
    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY . else_statement
    (50) else_statement -> . ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    IF              reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    TRUE            reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FALSE           reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 51 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    ELSE            shift and go to state 202

    else_statement                 shift and go to state 201

state 198

    (41) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    IF              reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    TRUE            reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FALSE           reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 41 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 199

    (42) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    IF              reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    TRUE            reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FALSE           reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 42 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 200

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LESS            shift and go to state 203
    LESS_EQUAL      shift and go to state 204
    GREATER         shift and go to state 205
    GREATER_EQUAL   shift and go to state 206


state 201

    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .

    IF              reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    VAR             reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    COUT            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    CIN             reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    COMMENT         reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    WHILE           reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    INT             reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    CHAR            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    STRING          reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    BOOL            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    FLOAT           reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    LONG            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    SHORT           reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    DOUBLE          reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    FOR             reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    INT_NUMBER      reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    FLOAT_NUMBER    reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    TEXT            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    SIGN            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    TRUE            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    FALSE           reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    RETURN          reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    RIGHT_BR_CURLY  reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)


state 202

    (50) else_statement -> ELSE . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 207


state 203

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 208


state 204

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 209


state 205

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 210


state 206

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 211


state 207

    (50) else_statement -> ELSE LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (38) instruction -> . print
    (39) instruction -> . input
    (40) instruction -> . comment
    (48) loop -> . while_loop
    (49) loop -> . for_loop
    (51) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (93) assignment -> . VAR EQUAL value SEMICOLON
    (94) assignment -> . VAR EQUAL VAR SEMICOLON
    (95) assignment -> . get_array_element EQUAL value SEMICOLON
    (96) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (90) operation -> . increment
    (91) operation -> . decrement
    (92) operation -> . value operator value SEMICOLON
    (114) empty -> .
    (97) var_declaration -> . type VAR SEMICOLON
    (98) var_declaration -> . array_declaration
    (99) var_declaration -> . type VAR EQUAL value SEMICOLON
    (100) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (110) print -> . COUT out SEMICOLON
    (111) input -> . CIN in SEMICOLON
    (113) comment -> . COMMENT
    (41) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (42) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (89) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (87) increment -> . VAR PLUS_PLUS SEMICOLON
    (88) decrement -> . VAR MINUS_MINUS SEMICOLON
    (82) value -> . number
    (83) value -> . VAR
    (84) value -> . get_array_element
    (85) value -> . string_value
    (86) value -> . bool_value
    (66) type -> . INT
    (67) type -> . CHAR
    (68) type -> . STRING
    (69) type -> . BOOL
    (70) type -> . FLOAT
    (71) type -> . LONG
    (72) type -> . SHORT
    (73) type -> . DOUBLE
    (101) array_declaration -> . type get_array_element SEMICOLON
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (78) number -> . INT_NUMBER
    (79) number -> . FLOAT_NUMBER
    (76) string_value -> . TEXT
    (77) string_value -> . SIGN
    (80) bool_value -> . TRUE
    (81) bool_value -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 87
    RIGHT_BR_CURLY  reduce using rule 114 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 108
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 59
    FLOAT_NUMBER    shift and go to state 60
    TEXT            shift and go to state 61
    SIGN            shift and go to state 62
    TRUE            shift and go to state 63
    FALSE           shift and go to state 64

  ! IF              [ reduce using rule 114 (empty -> .) ]
  ! VAR             [ reduce using rule 114 (empty -> .) ]
  ! COUT            [ reduce using rule 114 (empty -> .) ]
  ! CIN             [ reduce using rule 114 (empty -> .) ]
  ! COMMENT         [ reduce using rule 114 (empty -> .) ]
  ! WHILE           [ reduce using rule 114 (empty -> .) ]
  ! INT             [ reduce using rule 114 (empty -> .) ]
  ! CHAR            [ reduce using rule 114 (empty -> .) ]
  ! STRING          [ reduce using rule 114 (empty -> .) ]
  ! BOOL            [ reduce using rule 114 (empty -> .) ]
  ! FLOAT           [ reduce using rule 114 (empty -> .) ]
  ! LONG            [ reduce using rule 114 (empty -> .) ]
  ! SHORT           [ reduce using rule 114 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 114 (empty -> .) ]
  ! FOR             [ reduce using rule 114 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 114 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 114 (empty -> .) ]
  ! TEXT            [ reduce using rule 114 (empty -> .) ]
  ! SIGN            [ reduce using rule 114 (empty -> .) ]
  ! TRUE            [ reduce using rule 114 (empty -> .) ]
  ! FALSE           [ reduce using rule 114 (empty -> .) ]

    instructions                   shift and go to state 212
    instruction                    shift and go to state 89
    loop                           shift and go to state 90
    if_statement                   shift and go to state 91
    assignment                     shift and go to state 92
    operation                      shift and go to state 93
    empty                          shift and go to state 94
    var_declaration                shift and go to state 95
    print                          shift and go to state 96
    input                          shift and go to state 97
    comment                        shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 86
    array_declaration              shift and go to state 51
    bool_value                     shift and go to state 58
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 55
    string_value                   shift and go to state 57

state 208

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 213


state 209

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 214


state 210

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 215


state 211

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 216


state 212

    (50) else_statement -> ELSE LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 217


state 213

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 218


state 214

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 219


state 215

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 220


state 216

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 221


state 217

    (50) else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    TRUE            reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FALSE           reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 50 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 218

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 222


state 219

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 223


state 220

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 224


state 221

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 225


state 222

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 226


state 223

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 227


state 224

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 228


state 225

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 229


state 226

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 43 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 227

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 44 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 228

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 45 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)


state 229

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 46 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for HASH in state 0 resolved as shift
WARNING: shift/reduce conflict for USING in state 0 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for LONG in state 0 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 5 resolved as shift
WARNING: shift/reduce conflict for HASH in state 5 resolved as shift
WARNING: shift/reduce conflict for USING in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 5 resolved as shift
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for LONG in state 5 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 5 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 5 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 53 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for VAR in state 84 resolved as shift
WARNING: shift/reduce conflict for COUT in state 84 resolved as shift
WARNING: shift/reduce conflict for CIN in state 84 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for INT in state 84 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 84 resolved as shift
WARNING: shift/reduce conflict for STRING in state 84 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 84 resolved as shift
WARNING: shift/reduce conflict for LONG in state 84 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 84 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 84 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 84 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 84 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 84 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 85 resolved as shift
WARNING: shift/reduce conflict for VAR in state 85 resolved as shift
WARNING: shift/reduce conflict for COUT in state 85 resolved as shift
WARNING: shift/reduce conflict for CIN in state 85 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 85 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 85 resolved as shift
WARNING: shift/reduce conflict for INT in state 85 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 85 resolved as shift
WARNING: shift/reduce conflict for STRING in state 85 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 85 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 85 resolved as shift
WARNING: shift/reduce conflict for LONG in state 85 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 85 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 85 resolved as shift
WARNING: shift/reduce conflict for FOR in state 85 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 85 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 85 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 85 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 85 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 85 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 85 resolved as shift
WARNING: shift/reduce conflict for IF in state 89 resolved as shift
WARNING: shift/reduce conflict for VAR in state 89 resolved as shift
WARNING: shift/reduce conflict for COUT in state 89 resolved as shift
WARNING: shift/reduce conflict for CIN in state 89 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 89 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 89 resolved as shift
WARNING: shift/reduce conflict for INT in state 89 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 89 resolved as shift
WARNING: shift/reduce conflict for STRING in state 89 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 89 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 89 resolved as shift
WARNING: shift/reduce conflict for LONG in state 89 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 89 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 89 resolved as shift
WARNING: shift/reduce conflict for FOR in state 89 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 89 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 89 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 89 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 89 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 89 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 89 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 134 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 146 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for VAR in state 155 resolved as shift
WARNING: shift/reduce conflict for COUT in state 155 resolved as shift
WARNING: shift/reduce conflict for CIN in state 155 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 155 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 155 resolved as shift
WARNING: shift/reduce conflict for INT in state 155 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 155 resolved as shift
WARNING: shift/reduce conflict for STRING in state 155 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 155 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 155 resolved as shift
WARNING: shift/reduce conflict for LONG in state 155 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 155 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 155 resolved as shift
WARNING: shift/reduce conflict for FOR in state 155 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 155 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 155 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 155 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 155 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 155 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 189 resolved as shift
WARNING: shift/reduce conflict for VAR in state 189 resolved as shift
WARNING: shift/reduce conflict for COUT in state 189 resolved as shift
WARNING: shift/reduce conflict for CIN in state 189 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 189 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 189 resolved as shift
WARNING: shift/reduce conflict for INT in state 189 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 189 resolved as shift
WARNING: shift/reduce conflict for STRING in state 189 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 189 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 189 resolved as shift
WARNING: shift/reduce conflict for LONG in state 189 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 189 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 189 resolved as shift
WARNING: shift/reduce conflict for FOR in state 189 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 189 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 189 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 189 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 189 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 189 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 189 resolved as shift
WARNING: shift/reduce conflict for IF in state 190 resolved as shift
WARNING: shift/reduce conflict for VAR in state 190 resolved as shift
WARNING: shift/reduce conflict for COUT in state 190 resolved as shift
WARNING: shift/reduce conflict for CIN in state 190 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 190 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 190 resolved as shift
WARNING: shift/reduce conflict for INT in state 190 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 190 resolved as shift
WARNING: shift/reduce conflict for STRING in state 190 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 190 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 190 resolved as shift
WARNING: shift/reduce conflict for LONG in state 190 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 190 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 190 resolved as shift
WARNING: shift/reduce conflict for FOR in state 190 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 190 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 190 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 190 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 190 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 190 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 190 resolved as shift
WARNING: shift/reduce conflict for IF in state 191 resolved as shift
WARNING: shift/reduce conflict for VAR in state 191 resolved as shift
WARNING: shift/reduce conflict for COUT in state 191 resolved as shift
WARNING: shift/reduce conflict for CIN in state 191 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 191 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 191 resolved as shift
WARNING: shift/reduce conflict for INT in state 191 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 191 resolved as shift
WARNING: shift/reduce conflict for STRING in state 191 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 191 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 191 resolved as shift
WARNING: shift/reduce conflict for LONG in state 191 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 191 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 191 resolved as shift
WARNING: shift/reduce conflict for FOR in state 191 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 191 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 191 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 191 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 191 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 191 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 191 resolved as shift
WARNING: shift/reduce conflict for IF in state 207 resolved as shift
WARNING: shift/reduce conflict for VAR in state 207 resolved as shift
WARNING: shift/reduce conflict for COUT in state 207 resolved as shift
WARNING: shift/reduce conflict for CIN in state 207 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 207 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 207 resolved as shift
WARNING: shift/reduce conflict for INT in state 207 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 207 resolved as shift
WARNING: shift/reduce conflict for STRING in state 207 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 207 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 207 resolved as shift
WARNING: shift/reduce conflict for LONG in state 207 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 207 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 207 resolved as shift
WARNING: shift/reduce conflict for FOR in state 207 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 207 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 207 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 207 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 207 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 207 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 207 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> empty)
WARNING: rejected rule (program_component -> empty) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (program_components -> program_component)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 11 resolved using rule (program_component -> array_declaration)
WARNING: rejected rule (var_declaration -> array_declaration) in state 11
WARNING: reduce/reduce conflict in state 47 resolved using rule (class_declarations -> class_declaration)
WARNING: rejected rule (empty -> <empty>) in state 47
WARNING: reduce/reduce conflict in state 89 resolved using rule (instructions -> instruction)
WARNING: rejected rule (empty -> <empty>) in state 89
