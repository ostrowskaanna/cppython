Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    ID

Grammar

Rule 0     S' -> start_symbol
Rule 1     start_symbol -> program
Rule 2     program -> program_components
Rule 3     program -> empty
Rule 4     program_components -> program_component
Rule 5     program_components -> program_component program_components
Rule 6     program_component -> function_definition
Rule 7     program_component -> class_definition
Rule 8     program_component -> including
Rule 9     program_component -> using_namespace_std
Rule 10    program_component -> var_declaration
Rule 11    program_component -> array_declaration
Rule 12    program_component -> comment
Rule 13    program_component -> empty
Rule 14    using_namespace_std -> USING NAMESPACE STD SEMICOLON
Rule 15    including -> HASH INCLUDE LIBRARY
Rule 16    function_definition -> type_function_definition
Rule 17    function_definition -> void_function_definition
Rule 18    type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
Rule 19    void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 20    function_var_declaration -> var_declaration_no_semicolon
Rule 21    function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration
Rule 22    function_var_declaration -> empty
Rule 23    var_declaration_no_semicolon -> type VAR
Rule 24    function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON
Rule 25    function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON
Rule 26    class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON
Rule 27    class_declaration -> var_declaration
Rule 28    class_declaration -> function_definition
Rule 29    class_declarations -> class_declaration
Rule 30    class_declarations -> class_declaration class_declarations
Rule 31    class_declarations -> empty
Rule 32    instructions -> instruction
Rule 33    instructions -> instruction instructions
Rule 34    instruction -> loop
Rule 35    instruction -> if_statement
Rule 36    instruction -> assignment
Rule 37    instruction -> operation
Rule 38    instruction -> empty
Rule 39    instruction -> var_declaration
Rule 40    instruction -> print
Rule 41    instruction -> input
Rule 42    instruction -> comment
Rule 43    instruction -> function_call
Rule 44    while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 45    while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 46    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 47    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 48    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 49    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 50    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 51    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 52    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 53    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 54    for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 55    loop -> while_loop
Rule 56    loop -> for_loop
Rule 57    else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 58    if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 59    if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
Rule 60    comparisons -> comparison
Rule 61    comparisons -> comparison conjunction comparisons
Rule 62    comparison -> value comparator value
Rule 63    comparison -> value EQUAL_EQUAL EMPTY_TEXT
Rule 64    comparator -> LESS
Rule 65    comparator -> LESS_EQUAL
Rule 66    comparator -> GREATER
Rule 67    comparator -> GREATER_EQUAL
Rule 68    comparator -> EQUAL_EQUAL
Rule 69    comparator -> NOT_EQUAL
Rule 70    operator -> PLUS
Rule 71    operator -> MINUS
Rule 72    operator -> MULTIPLY
Rule 73    operator -> DIVIDE
Rule 74    type -> INT
Rule 75    type -> CHAR
Rule 76    type -> STRING
Rule 77    type -> BOOL
Rule 78    type -> FLOAT
Rule 79    type -> LONG
Rule 80    type -> SHORT
Rule 81    type -> DOUBLE
Rule 82    conjunction -> AND
Rule 83    conjunction -> OR
Rule 84    string_value -> TEXT
Rule 85    string_value -> SIGN
Rule 86    number -> INT_NUMBER
Rule 87    number -> FLOAT_NUMBER
Rule 88    bool_value -> TRUE
Rule 89    bool_value -> FALSE
Rule 90    value -> number
Rule 91    value -> VAR
Rule 92    value -> get_array_element
Rule 93    value -> string_value
Rule 94    value -> bool_value
Rule 95    value -> math_operation
Rule 96    increment -> VAR PLUS_PLUS SEMICOLON
Rule 97    decrement -> VAR MINUS_MINUS SEMICOLON
Rule 98    math_operation -> VAR operator VAR
Rule 99    math_operation -> VAR operator number
Rule 100   math_operation -> number operator number
Rule 101   operation -> increment
Rule 102   operation -> decrement
Rule 103   get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
Rule 104   get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
Rule 105   assignment -> VAR EQUAL value SEMICOLON
Rule 106   assignment -> VAR EQUAL VAR SEMICOLON
Rule 107   assignment -> get_array_element EQUAL value SEMICOLON
Rule 108   assignment -> get_array_element EQUAL VAR SEMICOLON
Rule 109   var_declaration -> type VAR SEMICOLON
Rule 110   var_declaration -> array_declaration
Rule 111   var_declaration -> type VAR EQUAL value SEMICOLON
Rule 112   var_declaration -> type VAR EQUAL VAR SEMICOLON
Rule 113   array_declaration -> type get_array_element SEMICOLON
Rule 114   out -> OUT VAR
Rule 115   out -> OUT VAR out
Rule 116   out -> OUT TEXT
Rule 117   out -> OUT TEXT out
Rule 118   out -> OUT ENDL
Rule 119   out -> OUT ENDL out
Rule 120   in -> IN VAR
Rule 121   in -> IN VAR in
Rule 122   print -> COUT out SEMICOLON
Rule 123   input -> CIN in SEMICOLON
Rule 124   returning -> RETURN value SEMICOLON
Rule 125   comment -> COMMENT
Rule 126   empty -> <empty>
Rule 127   change_tab_number -> <empty>

Terminals, with rules where they appear

AND                  : 82
BOOL                 : 77
CHAR                 : 75
CIN                  : 123
CLASS                : 26
COMMA                : 21
COMMENT              : 125
COUT                 : 122
DIVIDE               : 73
DOT                  : 
DOUBLE               : 81
ELSE                 : 57
EMPTY_TEXT           : 63
ENDL                 : 118 119
EQUAL                : 46 47 48 49 50 51 52 53 105 106 107 108 111 112
EQUAL_EQUAL          : 63 68
FALSE                : 89
FLOAT                : 78
FLOAT_NUMBER         : 87
FOR                  : 46 47 48 49 50 51 52 53
GREATER              : 50 51 66
GREATER_EQUAL        : 52 53 67
HASH                 : 15
ID                   : 
IF                   : 58 59
IN                   : 120 121
INCLUDE              : 15
INT                  : 46 47 48 49 50 51 52 53 74
INT_NUMBER           : 46 46 47 48 48 49 50 50 51 52 52 53 86 103
LEFT_BR              : 18 19 24 25 44 45 46 47 48 49 50 51 52 53 58 59
LEFT_BR_CURLY        : 18 19 26 44 45 54 57 58 59
LEFT_BR_SQUARED      : 103 104
LESS                 : 46 47 64
LESS_EQUAL           : 48 49 65
LIBRARY              : 15
LONG                 : 79
MINUS                : 71
MINUS_MINUS          : 50 51 52 53 97
MULTIPLY             : 72
NAMESPACE            : 14
NOT_EQUAL            : 69
OR                   : 83
OUT                  : 114 115 116 117 118 119
PLUS                 : 70
PLUS_PLUS            : 46 47 48 49 96
RETURN               : 124
RIGHT_BR             : 18 19 24 25 44 45 46 47 48 49 50 51 52 53 58 59
RIGHT_BR_CURLY       : 18 19 26 44 45 54 57 58 59
RIGHT_BR_SQUARED     : 103 104
SEMICOLON            : 14 24 25 26 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 96 97 105 106 107 108 109 111 112 113 122 123 124
SHORT                : 80
SIGN                 : 85
STD                  : 14
STRING               : 76
TEXT                 : 84 116 117
TRUE                 : 88
USING                : 14
VAR                  : 18 19 23 24 25 25 26 46 46 46 47 47 47 47 48 48 48 49 49 49 49 50 50 50 51 51 51 51 52 52 52 53 53 53 53 91 96 97 98 98 99 103 104 104 105 106 106 108 109 111 112 112 114 115 120 121
VOID                 : 19
WHILE                : 44 45
error                : 

Nonterminals, with rules where they appear

array_declaration    : 11 110
assignment           : 36
bool_value           : 45 94
change_tab_number    : 18 19 26 44 45 54 58 59
class_declaration    : 29 30
class_declarations   : 26 30
class_definition     : 7
comment              : 12 42
comparator           : 62
comparison           : 60 61
comparisons          : 44 58 59 61
conjunction          : 61
decrement            : 102
else_statement       : 59
empty                : 3 13 22 31 38
for_loop             : 56
for_loop_statement   : 54
function_call        : 43
function_definition  : 6 28
function_var_declaration : 18 19 21
get_array_element    : 92 107 108 113
if_statement         : 35
in                   : 121 123
including            : 8
increment            : 101
input                : 41
instruction          : 32 33
instructions         : 18 19 33 44 45 54 57 58 59
loop                 : 34
math_operation       : 95
number               : 90 99 100 100
operation            : 37
operator             : 98 99 100
out                  : 115 117 119 122
print                : 40
program              : 1
program_component    : 4 5
program_components   : 2 5
returning            : 18
start_symbol         : 0
string_value         : 93
type                 : 18 23 109 111 112 113
type_function_definition : 16
using_namespace_std  : 9
value                : 62 62 63 105 107 111 124
var_declaration      : 10 27 39
var_declaration_no_semicolon : 20 21
void_function_definition : 17
while_loop           : 55

Parsing method: LALR

state 0

    (0) S' -> . start_symbol
    (1) start_symbol -> . program
    (2) program -> . program_components
    (3) program -> . empty
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (126) empty -> .
    (6) program_component -> . function_definition
    (7) program_component -> . class_definition
    (8) program_component -> . including
    (9) program_component -> . using_namespace_std
    (10) program_component -> . var_declaration
    (11) program_component -> . array_declaration
    (12) program_component -> . comment
    (13) program_component -> . empty
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (26) class_definition -> . CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (113) array_declaration -> . type get_array_element SEMICOLON
    (125) comment -> . COMMENT
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 126 (empty -> .)
    CLASS           shift and go to state 15
    HASH            shift and go to state 16
    USING           shift and go to state 17
    COMMENT         shift and go to state 19
    VOID            shift and go to state 20
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

  ! CLASS           [ reduce using rule 126 (empty -> .) ]
  ! HASH            [ reduce using rule 126 (empty -> .) ]
  ! USING           [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! VOID            [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]

    start_symbol                   shift and go to state 1
    program                        shift and go to state 2
    program_components             shift and go to state 3
    empty                          shift and go to state 4
    program_component              shift and go to state 5
    function_definition            shift and go to state 6
    class_definition               shift and go to state 7
    including                      shift and go to state 8
    using_namespace_std            shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    comment                        shift and go to state 12
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 18

state 1

    (0) S' -> start_symbol .



state 2

    (1) start_symbol -> program .

    $end            reduce using rule 1 (start_symbol -> program .)


state 3

    (2) program -> program_components .

    $end            reduce using rule 2 (program -> program_components .)


state 4

    (3) program -> empty .
    (13) program_component -> empty .

  ! reduce/reduce conflict for $end resolved using rule 3 (program -> empty .)
    $end            reduce using rule 3 (program -> empty .)
    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    COMMENT         reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)
    DOUBLE          reduce using rule 13 (program_component -> empty .)

  ! $end            [ reduce using rule 13 (program_component -> empty .) ]


state 5

    (4) program_components -> program_component .
    (5) program_components -> program_component . program_components
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_component -> . function_definition
    (7) program_component -> . class_definition
    (8) program_component -> . including
    (9) program_component -> . using_namespace_std
    (10) program_component -> . var_declaration
    (11) program_component -> . array_declaration
    (12) program_component -> . comment
    (13) program_component -> . empty
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (26) class_definition -> . CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (113) array_declaration -> . type get_array_element SEMICOLON
    (125) comment -> . COMMENT
    (126) empty -> .
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (program_components -> program_component .)
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 4 (program_components -> program_component .)
    CLASS           shift and go to state 15
    HASH            shift and go to state 16
    USING           shift and go to state 17
    COMMENT         shift and go to state 19
    VOID            shift and go to state 20
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

  ! CLASS           [ reduce using rule 126 (empty -> .) ]
  ! HASH            [ reduce using rule 126 (empty -> .) ]
  ! USING           [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! VOID            [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]
  ! $end            [ reduce using rule 126 (empty -> .) ]

    program_component              shift and go to state 5
    program_components             shift and go to state 29
    function_definition            shift and go to state 6
    class_definition               shift and go to state 7
    including                      shift and go to state 8
    using_namespace_std            shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 30
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 18

state 6

    (6) program_component -> function_definition .

    CLASS           reduce using rule 6 (program_component -> function_definition .)
    HASH            reduce using rule 6 (program_component -> function_definition .)
    USING           reduce using rule 6 (program_component -> function_definition .)
    COMMENT         reduce using rule 6 (program_component -> function_definition .)
    VOID            reduce using rule 6 (program_component -> function_definition .)
    INT             reduce using rule 6 (program_component -> function_definition .)
    CHAR            reduce using rule 6 (program_component -> function_definition .)
    STRING          reduce using rule 6 (program_component -> function_definition .)
    BOOL            reduce using rule 6 (program_component -> function_definition .)
    FLOAT           reduce using rule 6 (program_component -> function_definition .)
    LONG            reduce using rule 6 (program_component -> function_definition .)
    SHORT           reduce using rule 6 (program_component -> function_definition .)
    DOUBLE          reduce using rule 6 (program_component -> function_definition .)
    $end            reduce using rule 6 (program_component -> function_definition .)


state 7

    (7) program_component -> class_definition .

    CLASS           reduce using rule 7 (program_component -> class_definition .)
    HASH            reduce using rule 7 (program_component -> class_definition .)
    USING           reduce using rule 7 (program_component -> class_definition .)
    COMMENT         reduce using rule 7 (program_component -> class_definition .)
    VOID            reduce using rule 7 (program_component -> class_definition .)
    INT             reduce using rule 7 (program_component -> class_definition .)
    CHAR            reduce using rule 7 (program_component -> class_definition .)
    STRING          reduce using rule 7 (program_component -> class_definition .)
    BOOL            reduce using rule 7 (program_component -> class_definition .)
    FLOAT           reduce using rule 7 (program_component -> class_definition .)
    LONG            reduce using rule 7 (program_component -> class_definition .)
    SHORT           reduce using rule 7 (program_component -> class_definition .)
    DOUBLE          reduce using rule 7 (program_component -> class_definition .)
    $end            reduce using rule 7 (program_component -> class_definition .)


state 8

    (8) program_component -> including .

    CLASS           reduce using rule 8 (program_component -> including .)
    HASH            reduce using rule 8 (program_component -> including .)
    USING           reduce using rule 8 (program_component -> including .)
    COMMENT         reduce using rule 8 (program_component -> including .)
    VOID            reduce using rule 8 (program_component -> including .)
    INT             reduce using rule 8 (program_component -> including .)
    CHAR            reduce using rule 8 (program_component -> including .)
    STRING          reduce using rule 8 (program_component -> including .)
    BOOL            reduce using rule 8 (program_component -> including .)
    FLOAT           reduce using rule 8 (program_component -> including .)
    LONG            reduce using rule 8 (program_component -> including .)
    SHORT           reduce using rule 8 (program_component -> including .)
    DOUBLE          reduce using rule 8 (program_component -> including .)
    $end            reduce using rule 8 (program_component -> including .)


state 9

    (9) program_component -> using_namespace_std .

    CLASS           reduce using rule 9 (program_component -> using_namespace_std .)
    HASH            reduce using rule 9 (program_component -> using_namespace_std .)
    USING           reduce using rule 9 (program_component -> using_namespace_std .)
    COMMENT         reduce using rule 9 (program_component -> using_namespace_std .)
    VOID            reduce using rule 9 (program_component -> using_namespace_std .)
    INT             reduce using rule 9 (program_component -> using_namespace_std .)
    CHAR            reduce using rule 9 (program_component -> using_namespace_std .)
    STRING          reduce using rule 9 (program_component -> using_namespace_std .)
    BOOL            reduce using rule 9 (program_component -> using_namespace_std .)
    FLOAT           reduce using rule 9 (program_component -> using_namespace_std .)
    LONG            reduce using rule 9 (program_component -> using_namespace_std .)
    SHORT           reduce using rule 9 (program_component -> using_namespace_std .)
    DOUBLE          reduce using rule 9 (program_component -> using_namespace_std .)
    $end            reduce using rule 9 (program_component -> using_namespace_std .)


state 10

    (10) program_component -> var_declaration .

    CLASS           reduce using rule 10 (program_component -> var_declaration .)
    HASH            reduce using rule 10 (program_component -> var_declaration .)
    USING           reduce using rule 10 (program_component -> var_declaration .)
    COMMENT         reduce using rule 10 (program_component -> var_declaration .)
    VOID            reduce using rule 10 (program_component -> var_declaration .)
    INT             reduce using rule 10 (program_component -> var_declaration .)
    CHAR            reduce using rule 10 (program_component -> var_declaration .)
    STRING          reduce using rule 10 (program_component -> var_declaration .)
    BOOL            reduce using rule 10 (program_component -> var_declaration .)
    FLOAT           reduce using rule 10 (program_component -> var_declaration .)
    LONG            reduce using rule 10 (program_component -> var_declaration .)
    SHORT           reduce using rule 10 (program_component -> var_declaration .)
    DOUBLE          reduce using rule 10 (program_component -> var_declaration .)
    $end            reduce using rule 10 (program_component -> var_declaration .)


state 11

    (11) program_component -> array_declaration .
    (110) var_declaration -> array_declaration .

  ! reduce/reduce conflict for CLASS resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for HASH resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for USING resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for COMMENT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for VOID resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for INT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for CHAR resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for BOOL resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for LONG resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for SHORT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for $end resolved using rule 11 (program_component -> array_declaration .)
    CLASS           reduce using rule 11 (program_component -> array_declaration .)
    HASH            reduce using rule 11 (program_component -> array_declaration .)
    USING           reduce using rule 11 (program_component -> array_declaration .)
    COMMENT         reduce using rule 11 (program_component -> array_declaration .)
    VOID            reduce using rule 11 (program_component -> array_declaration .)
    INT             reduce using rule 11 (program_component -> array_declaration .)
    CHAR            reduce using rule 11 (program_component -> array_declaration .)
    STRING          reduce using rule 11 (program_component -> array_declaration .)
    BOOL            reduce using rule 11 (program_component -> array_declaration .)
    FLOAT           reduce using rule 11 (program_component -> array_declaration .)
    LONG            reduce using rule 11 (program_component -> array_declaration .)
    SHORT           reduce using rule 11 (program_component -> array_declaration .)
    DOUBLE          reduce using rule 11 (program_component -> array_declaration .)
    $end            reduce using rule 11 (program_component -> array_declaration .)

  ! CLASS           [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! HASH            [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! USING           [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! COMMENT         [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! VOID            [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! INT             [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! CHAR            [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! STRING          [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! BOOL            [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! FLOAT           [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! LONG            [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! SHORT           [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! DOUBLE          [ reduce using rule 110 (var_declaration -> array_declaration .) ]
  ! $end            [ reduce using rule 110 (var_declaration -> array_declaration .) ]


state 12

    (12) program_component -> comment .

    CLASS           reduce using rule 12 (program_component -> comment .)
    HASH            reduce using rule 12 (program_component -> comment .)
    USING           reduce using rule 12 (program_component -> comment .)
    COMMENT         reduce using rule 12 (program_component -> comment .)
    VOID            reduce using rule 12 (program_component -> comment .)
    INT             reduce using rule 12 (program_component -> comment .)
    CHAR            reduce using rule 12 (program_component -> comment .)
    STRING          reduce using rule 12 (program_component -> comment .)
    BOOL            reduce using rule 12 (program_component -> comment .)
    FLOAT           reduce using rule 12 (program_component -> comment .)
    LONG            reduce using rule 12 (program_component -> comment .)
    SHORT           reduce using rule 12 (program_component -> comment .)
    DOUBLE          reduce using rule 12 (program_component -> comment .)
    $end            reduce using rule 12 (program_component -> comment .)


state 13

    (16) function_definition -> type_function_definition .

    CLASS           reduce using rule 16 (function_definition -> type_function_definition .)
    HASH            reduce using rule 16 (function_definition -> type_function_definition .)
    USING           reduce using rule 16 (function_definition -> type_function_definition .)
    COMMENT         reduce using rule 16 (function_definition -> type_function_definition .)
    VOID            reduce using rule 16 (function_definition -> type_function_definition .)
    INT             reduce using rule 16 (function_definition -> type_function_definition .)
    CHAR            reduce using rule 16 (function_definition -> type_function_definition .)
    STRING          reduce using rule 16 (function_definition -> type_function_definition .)
    BOOL            reduce using rule 16 (function_definition -> type_function_definition .)
    FLOAT           reduce using rule 16 (function_definition -> type_function_definition .)
    LONG            reduce using rule 16 (function_definition -> type_function_definition .)
    SHORT           reduce using rule 16 (function_definition -> type_function_definition .)
    DOUBLE          reduce using rule 16 (function_definition -> type_function_definition .)
    $end            reduce using rule 16 (function_definition -> type_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 16 (function_definition -> type_function_definition .)


state 14

    (17) function_definition -> void_function_definition .

    CLASS           reduce using rule 17 (function_definition -> void_function_definition .)
    HASH            reduce using rule 17 (function_definition -> void_function_definition .)
    USING           reduce using rule 17 (function_definition -> void_function_definition .)
    COMMENT         reduce using rule 17 (function_definition -> void_function_definition .)
    VOID            reduce using rule 17 (function_definition -> void_function_definition .)
    INT             reduce using rule 17 (function_definition -> void_function_definition .)
    CHAR            reduce using rule 17 (function_definition -> void_function_definition .)
    STRING          reduce using rule 17 (function_definition -> void_function_definition .)
    BOOL            reduce using rule 17 (function_definition -> void_function_definition .)
    FLOAT           reduce using rule 17 (function_definition -> void_function_definition .)
    LONG            reduce using rule 17 (function_definition -> void_function_definition .)
    SHORT           reduce using rule 17 (function_definition -> void_function_definition .)
    DOUBLE          reduce using rule 17 (function_definition -> void_function_definition .)
    $end            reduce using rule 17 (function_definition -> void_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 17 (function_definition -> void_function_definition .)


state 15

    (26) class_definition -> CLASS . VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON

    VAR             shift and go to state 31


state 16

    (15) including -> HASH . INCLUDE LIBRARY

    INCLUDE         shift and go to state 32


state 17

    (14) using_namespace_std -> USING . NAMESPACE STD SEMICOLON

    NAMESPACE       shift and go to state 33


state 18

    (109) var_declaration -> type . VAR SEMICOLON
    (111) var_declaration -> type . VAR EQUAL value SEMICOLON
    (112) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (113) array_declaration -> type . get_array_element SEMICOLON
    (18) type_function_definition -> type . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED

    VAR             shift and go to state 34

    get_array_element              shift and go to state 35

state 19

    (125) comment -> COMMENT .

    CLASS           reduce using rule 125 (comment -> COMMENT .)
    HASH            reduce using rule 125 (comment -> COMMENT .)
    USING           reduce using rule 125 (comment -> COMMENT .)
    COMMENT         reduce using rule 125 (comment -> COMMENT .)
    VOID            reduce using rule 125 (comment -> COMMENT .)
    INT             reduce using rule 125 (comment -> COMMENT .)
    CHAR            reduce using rule 125 (comment -> COMMENT .)
    STRING          reduce using rule 125 (comment -> COMMENT .)
    BOOL            reduce using rule 125 (comment -> COMMENT .)
    FLOAT           reduce using rule 125 (comment -> COMMENT .)
    LONG            reduce using rule 125 (comment -> COMMENT .)
    SHORT           reduce using rule 125 (comment -> COMMENT .)
    DOUBLE          reduce using rule 125 (comment -> COMMENT .)
    $end            reduce using rule 125 (comment -> COMMENT .)
    IF              reduce using rule 125 (comment -> COMMENT .)
    VAR             reduce using rule 125 (comment -> COMMENT .)
    COUT            reduce using rule 125 (comment -> COMMENT .)
    CIN             reduce using rule 125 (comment -> COMMENT .)
    WHILE           reduce using rule 125 (comment -> COMMENT .)
    FOR             reduce using rule 125 (comment -> COMMENT .)
    RETURN          reduce using rule 125 (comment -> COMMENT .)
    RIGHT_BR_CURLY  reduce using rule 125 (comment -> COMMENT .)


state 20

    (19) void_function_definition -> VOID . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    VAR             shift and go to state 36


state 21

    (74) type -> INT .

    VAR             reduce using rule 74 (type -> INT .)


state 22

    (75) type -> CHAR .

    VAR             reduce using rule 75 (type -> CHAR .)


state 23

    (76) type -> STRING .

    VAR             reduce using rule 76 (type -> STRING .)


state 24

    (77) type -> BOOL .

    VAR             reduce using rule 77 (type -> BOOL .)


state 25

    (78) type -> FLOAT .

    VAR             reduce using rule 78 (type -> FLOAT .)


state 26

    (79) type -> LONG .

    VAR             reduce using rule 79 (type -> LONG .)


state 27

    (80) type -> SHORT .

    VAR             reduce using rule 80 (type -> SHORT .)


state 28

    (81) type -> DOUBLE .

    VAR             reduce using rule 81 (type -> DOUBLE .)


state 29

    (5) program_components -> program_component program_components .

    $end            reduce using rule 5 (program_components -> program_component program_components .)


state 30

    (13) program_component -> empty .

    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    COMMENT         reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)
    DOUBLE          reduce using rule 13 (program_component -> empty .)
    $end            reduce using rule 13 (program_component -> empty .)


state 31

    (26) class_definition -> CLASS VAR . LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON

    LEFT_BR_CURLY   shift and go to state 37


state 32

    (15) including -> HASH INCLUDE . LIBRARY

    LIBRARY         shift and go to state 38


state 33

    (14) using_namespace_std -> USING NAMESPACE . STD SEMICOLON

    STD             shift and go to state 39


state 34

    (109) var_declaration -> type VAR . SEMICOLON
    (111) var_declaration -> type VAR . EQUAL value SEMICOLON
    (112) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (18) type_function_definition -> type VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (103) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 40
    EQUAL           shift and go to state 41
    LEFT_BR         shift and go to state 42
    LEFT_BR_SQUARED shift and go to state 43


state 35

    (113) array_declaration -> type get_array_element . SEMICOLON

    SEMICOLON       shift and go to state 44


state 36

    (19) void_function_definition -> VOID VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 45


state 37

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY . change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON
    (127) change_tab_number -> .

    INT             reduce using rule 127 (change_tab_number -> .)
    CHAR            reduce using rule 127 (change_tab_number -> .)
    STRING          reduce using rule 127 (change_tab_number -> .)
    BOOL            reduce using rule 127 (change_tab_number -> .)
    FLOAT           reduce using rule 127 (change_tab_number -> .)
    LONG            reduce using rule 127 (change_tab_number -> .)
    SHORT           reduce using rule 127 (change_tab_number -> .)
    DOUBLE          reduce using rule 127 (change_tab_number -> .)
    VOID            reduce using rule 127 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 127 (change_tab_number -> .)

    change_tab_number              shift and go to state 46

state 38

    (15) including -> HASH INCLUDE LIBRARY .

    CLASS           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    HASH            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    USING           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    COMMENT         reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    VOID            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    INT             reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    CHAR            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    STRING          reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    BOOL            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    FLOAT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    LONG            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    SHORT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    DOUBLE          reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    $end            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)


state 39

    (14) using_namespace_std -> USING NAMESPACE STD . SEMICOLON

    SEMICOLON       shift and go to state 47


state 40

    (109) var_declaration -> type VAR SEMICOLON .

    CLASS           reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    HASH            reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    USING           reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    COMMENT         reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    VOID            reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    INT             reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    CHAR            reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    STRING          reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    BOOL            reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    FLOAT           reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    LONG            reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    SHORT           reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    DOUBLE          reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    $end            reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    IF              reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    VAR             reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    COUT            reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    CIN             reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    WHILE           reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    FOR             reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)
    RETURN          reduce using rule 109 (var_declaration -> type VAR SEMICOLON .)


state 41

    (111) var_declaration -> type VAR EQUAL . value SEMICOLON
    (112) var_declaration -> type VAR EQUAL . VAR SEMICOLON
    (90) value -> . number
    (91) value -> . VAR
    (92) value -> . get_array_element
    (93) value -> . string_value
    (94) value -> . bool_value
    (95) value -> . math_operation
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (84) string_value -> . TEXT
    (85) string_value -> . SIGN
    (88) bool_value -> . TRUE
    (89) bool_value -> . FALSE
    (98) math_operation -> . VAR operator VAR
    (99) math_operation -> . VAR operator number
    (100) math_operation -> . number operator number

    VAR             shift and go to state 48
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    value                          shift and go to state 49
    number                         shift and go to state 50
    get_array_element              shift and go to state 51
    string_value                   shift and go to state 52
    bool_value                     shift and go to state 53
    math_operation                 shift and go to state 54

state 42

    (18) type_function_definition -> type VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (20) function_var_declaration -> . var_declaration_no_semicolon
    (21) function_var_declaration -> . var_declaration_no_semicolon COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (23) var_declaration_no_semicolon -> . type VAR
    (126) empty -> .
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE

    RIGHT_BR        reduce using rule 126 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

    type                           shift and go to state 61
    function_var_declaration       shift and go to state 62
    var_declaration_no_semicolon   shift and go to state 63
    empty                          shift and go to state 64

state 43

    (103) get_array_element -> VAR LEFT_BR_SQUARED . INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> VAR LEFT_BR_SQUARED . VAR RIGHT_BR_SQUARED

    INT_NUMBER      shift and go to state 66
    VAR             shift and go to state 65


state 44

    (113) array_declaration -> type get_array_element SEMICOLON .

    CLASS           reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    HASH            reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    USING           reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    COMMENT         reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    VOID            reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    INT             reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    CHAR            reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    STRING          reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    BOOL            reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT           reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    LONG            reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    SHORT           reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    DOUBLE          reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    $end            reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    IF              reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    VAR             reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    COUT            reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    CIN             reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    WHILE           reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    FOR             reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)
    RETURN          reduce using rule 113 (array_declaration -> type get_array_element SEMICOLON .)


state 45

    (19) void_function_definition -> VOID VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (20) function_var_declaration -> . var_declaration_no_semicolon
    (21) function_var_declaration -> . var_declaration_no_semicolon COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (23) var_declaration_no_semicolon -> . type VAR
    (126) empty -> .
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE

    RIGHT_BR        reduce using rule 126 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

    function_var_declaration       shift and go to state 67
    var_declaration_no_semicolon   shift and go to state 63
    empty                          shift and go to state 64
    type                           shift and go to state 61

state 46

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number . class_declarations RIGHT_BR_CURLY SEMICOLON
    (29) class_declarations -> . class_declaration
    (30) class_declarations -> . class_declaration class_declarations
    (31) class_declarations -> . empty
    (27) class_declaration -> . var_declaration
    (28) class_declaration -> . function_definition
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    RIGHT_BR_CURLY  reduce using rule 126 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 20

    class_declarations             shift and go to state 68
    class_declaration              shift and go to state 69
    empty                          shift and go to state 70
    var_declaration                shift and go to state 71
    function_definition            shift and go to state 72
    type                           shift and go to state 18
    array_declaration              shift and go to state 73
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 47

    (14) using_namespace_std -> USING NAMESPACE STD SEMICOLON .

    CLASS           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    HASH            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    USING           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    COMMENT         reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    VOID            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    INT             reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    CHAR            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    STRING          reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    BOOL            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    FLOAT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    LONG            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    SHORT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    DOUBLE          reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    $end            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)


state 48

    (112) var_declaration -> type VAR EQUAL VAR . SEMICOLON
    (91) value -> VAR .
    (103) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) math_operation -> VAR . operator VAR
    (99) math_operation -> VAR . operator number
    (70) operator -> . PLUS
    (71) operator -> . MINUS
    (72) operator -> . MULTIPLY
    (73) operator -> . DIVIDE

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 74
    LEFT_BR_SQUARED shift and go to state 43
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MULTIPLY        shift and go to state 78
    DIVIDE          shift and go to state 79

  ! SEMICOLON       [ reduce using rule 91 (value -> VAR .) ]

    operator                       shift and go to state 75

state 49

    (111) var_declaration -> type VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 80


state 50

    (90) value -> number .
    (100) math_operation -> number . operator number
    (70) operator -> . PLUS
    (71) operator -> . MINUS
    (72) operator -> . MULTIPLY
    (73) operator -> . DIVIDE

    SEMICOLON       reduce using rule 90 (value -> number .)
    EQUAL_EQUAL     reduce using rule 90 (value -> number .)
    LESS            reduce using rule 90 (value -> number .)
    LESS_EQUAL      reduce using rule 90 (value -> number .)
    GREATER         reduce using rule 90 (value -> number .)
    GREATER_EQUAL   reduce using rule 90 (value -> number .)
    NOT_EQUAL       reduce using rule 90 (value -> number .)
    AND             reduce using rule 90 (value -> number .)
    OR              reduce using rule 90 (value -> number .)
    RIGHT_BR        reduce using rule 90 (value -> number .)
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MULTIPLY        shift and go to state 78
    DIVIDE          shift and go to state 79

    operator                       shift and go to state 81

state 51

    (92) value -> get_array_element .

    SEMICOLON       reduce using rule 92 (value -> get_array_element .)
    EQUAL_EQUAL     reduce using rule 92 (value -> get_array_element .)
    LESS            reduce using rule 92 (value -> get_array_element .)
    LESS_EQUAL      reduce using rule 92 (value -> get_array_element .)
    GREATER         reduce using rule 92 (value -> get_array_element .)
    GREATER_EQUAL   reduce using rule 92 (value -> get_array_element .)
    NOT_EQUAL       reduce using rule 92 (value -> get_array_element .)
    AND             reduce using rule 92 (value -> get_array_element .)
    OR              reduce using rule 92 (value -> get_array_element .)
    RIGHT_BR        reduce using rule 92 (value -> get_array_element .)


state 52

    (93) value -> string_value .

    SEMICOLON       reduce using rule 93 (value -> string_value .)
    EQUAL_EQUAL     reduce using rule 93 (value -> string_value .)
    LESS            reduce using rule 93 (value -> string_value .)
    LESS_EQUAL      reduce using rule 93 (value -> string_value .)
    GREATER         reduce using rule 93 (value -> string_value .)
    GREATER_EQUAL   reduce using rule 93 (value -> string_value .)
    NOT_EQUAL       reduce using rule 93 (value -> string_value .)
    AND             reduce using rule 93 (value -> string_value .)
    OR              reduce using rule 93 (value -> string_value .)
    RIGHT_BR        reduce using rule 93 (value -> string_value .)


state 53

    (94) value -> bool_value .

    SEMICOLON       reduce using rule 94 (value -> bool_value .)
    EQUAL_EQUAL     reduce using rule 94 (value -> bool_value .)
    LESS            reduce using rule 94 (value -> bool_value .)
    LESS_EQUAL      reduce using rule 94 (value -> bool_value .)
    GREATER         reduce using rule 94 (value -> bool_value .)
    GREATER_EQUAL   reduce using rule 94 (value -> bool_value .)
    NOT_EQUAL       reduce using rule 94 (value -> bool_value .)
    AND             reduce using rule 94 (value -> bool_value .)
    OR              reduce using rule 94 (value -> bool_value .)
    RIGHT_BR        reduce using rule 94 (value -> bool_value .)


state 54

    (95) value -> math_operation .

    SEMICOLON       reduce using rule 95 (value -> math_operation .)
    EQUAL_EQUAL     reduce using rule 95 (value -> math_operation .)
    LESS            reduce using rule 95 (value -> math_operation .)
    LESS_EQUAL      reduce using rule 95 (value -> math_operation .)
    GREATER         reduce using rule 95 (value -> math_operation .)
    GREATER_EQUAL   reduce using rule 95 (value -> math_operation .)
    NOT_EQUAL       reduce using rule 95 (value -> math_operation .)
    AND             reduce using rule 95 (value -> math_operation .)
    OR              reduce using rule 95 (value -> math_operation .)
    RIGHT_BR        reduce using rule 95 (value -> math_operation .)


state 55

    (86) number -> INT_NUMBER .

    PLUS            reduce using rule 86 (number -> INT_NUMBER .)
    MINUS           reduce using rule 86 (number -> INT_NUMBER .)
    MULTIPLY        reduce using rule 86 (number -> INT_NUMBER .)
    DIVIDE          reduce using rule 86 (number -> INT_NUMBER .)
    SEMICOLON       reduce using rule 86 (number -> INT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 86 (number -> INT_NUMBER .)
    LESS            reduce using rule 86 (number -> INT_NUMBER .)
    LESS_EQUAL      reduce using rule 86 (number -> INT_NUMBER .)
    GREATER         reduce using rule 86 (number -> INT_NUMBER .)
    GREATER_EQUAL   reduce using rule 86 (number -> INT_NUMBER .)
    NOT_EQUAL       reduce using rule 86 (number -> INT_NUMBER .)
    AND             reduce using rule 86 (number -> INT_NUMBER .)
    OR              reduce using rule 86 (number -> INT_NUMBER .)
    RIGHT_BR        reduce using rule 86 (number -> INT_NUMBER .)


state 56

    (87) number -> FLOAT_NUMBER .

    PLUS            reduce using rule 87 (number -> FLOAT_NUMBER .)
    MINUS           reduce using rule 87 (number -> FLOAT_NUMBER .)
    MULTIPLY        reduce using rule 87 (number -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 87 (number -> FLOAT_NUMBER .)
    SEMICOLON       reduce using rule 87 (number -> FLOAT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 87 (number -> FLOAT_NUMBER .)
    LESS            reduce using rule 87 (number -> FLOAT_NUMBER .)
    LESS_EQUAL      reduce using rule 87 (number -> FLOAT_NUMBER .)
    GREATER         reduce using rule 87 (number -> FLOAT_NUMBER .)
    GREATER_EQUAL   reduce using rule 87 (number -> FLOAT_NUMBER .)
    NOT_EQUAL       reduce using rule 87 (number -> FLOAT_NUMBER .)
    AND             reduce using rule 87 (number -> FLOAT_NUMBER .)
    OR              reduce using rule 87 (number -> FLOAT_NUMBER .)
    RIGHT_BR        reduce using rule 87 (number -> FLOAT_NUMBER .)


state 57

    (84) string_value -> TEXT .

    SEMICOLON       reduce using rule 84 (string_value -> TEXT .)
    EQUAL_EQUAL     reduce using rule 84 (string_value -> TEXT .)
    LESS            reduce using rule 84 (string_value -> TEXT .)
    LESS_EQUAL      reduce using rule 84 (string_value -> TEXT .)
    GREATER         reduce using rule 84 (string_value -> TEXT .)
    GREATER_EQUAL   reduce using rule 84 (string_value -> TEXT .)
    NOT_EQUAL       reduce using rule 84 (string_value -> TEXT .)
    AND             reduce using rule 84 (string_value -> TEXT .)
    OR              reduce using rule 84 (string_value -> TEXT .)
    RIGHT_BR        reduce using rule 84 (string_value -> TEXT .)


state 58

    (85) string_value -> SIGN .

    SEMICOLON       reduce using rule 85 (string_value -> SIGN .)
    EQUAL_EQUAL     reduce using rule 85 (string_value -> SIGN .)
    LESS            reduce using rule 85 (string_value -> SIGN .)
    LESS_EQUAL      reduce using rule 85 (string_value -> SIGN .)
    GREATER         reduce using rule 85 (string_value -> SIGN .)
    GREATER_EQUAL   reduce using rule 85 (string_value -> SIGN .)
    NOT_EQUAL       reduce using rule 85 (string_value -> SIGN .)
    AND             reduce using rule 85 (string_value -> SIGN .)
    OR              reduce using rule 85 (string_value -> SIGN .)
    RIGHT_BR        reduce using rule 85 (string_value -> SIGN .)


state 59

    (88) bool_value -> TRUE .

    SEMICOLON       reduce using rule 88 (bool_value -> TRUE .)
    EQUAL_EQUAL     reduce using rule 88 (bool_value -> TRUE .)
    LESS            reduce using rule 88 (bool_value -> TRUE .)
    LESS_EQUAL      reduce using rule 88 (bool_value -> TRUE .)
    GREATER         reduce using rule 88 (bool_value -> TRUE .)
    GREATER_EQUAL   reduce using rule 88 (bool_value -> TRUE .)
    NOT_EQUAL       reduce using rule 88 (bool_value -> TRUE .)
    RIGHT_BR        reduce using rule 88 (bool_value -> TRUE .)
    AND             reduce using rule 88 (bool_value -> TRUE .)
    OR              reduce using rule 88 (bool_value -> TRUE .)


state 60

    (89) bool_value -> FALSE .

    SEMICOLON       reduce using rule 89 (bool_value -> FALSE .)
    EQUAL_EQUAL     reduce using rule 89 (bool_value -> FALSE .)
    LESS            reduce using rule 89 (bool_value -> FALSE .)
    LESS_EQUAL      reduce using rule 89 (bool_value -> FALSE .)
    GREATER         reduce using rule 89 (bool_value -> FALSE .)
    GREATER_EQUAL   reduce using rule 89 (bool_value -> FALSE .)
    NOT_EQUAL       reduce using rule 89 (bool_value -> FALSE .)
    RIGHT_BR        reduce using rule 89 (bool_value -> FALSE .)
    AND             reduce using rule 89 (bool_value -> FALSE .)
    OR              reduce using rule 89 (bool_value -> FALSE .)


state 61

    (23) var_declaration_no_semicolon -> type . VAR

    VAR             shift and go to state 82


state 62

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 83


state 63

    (20) function_var_declaration -> var_declaration_no_semicolon .
    (21) function_var_declaration -> var_declaration_no_semicolon . COMMA function_var_declaration

    RIGHT_BR        reduce using rule 20 (function_var_declaration -> var_declaration_no_semicolon .)
    COMMA           shift and go to state 84


state 64

    (22) function_var_declaration -> empty .

    RIGHT_BR        reduce using rule 22 (function_var_declaration -> empty .)


state 65

    (104) get_array_element -> VAR LEFT_BR_SQUARED VAR . RIGHT_BR_SQUARED

    RIGHT_BR_SQUARED shift and go to state 85


state 66

    (103) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER . RIGHT_BR_SQUARED

    RIGHT_BR_SQUARED shift and go to state 86


state 67

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 87


state 68

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations . RIGHT_BR_CURLY SEMICOLON

    RIGHT_BR_CURLY  shift and go to state 88


state 69

    (29) class_declarations -> class_declaration .
    (30) class_declarations -> class_declaration . class_declarations
    (29) class_declarations -> . class_declaration
    (30) class_declarations -> . class_declaration class_declarations
    (31) class_declarations -> . empty
    (27) class_declaration -> . var_declaration
    (28) class_declaration -> . function_definition
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 29 (class_declarations -> class_declaration .)
    RIGHT_BR_CURLY  reduce using rule 29 (class_declarations -> class_declaration .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 20

  ! RIGHT_BR_CURLY  [ reduce using rule 126 (empty -> .) ]

    class_declaration              shift and go to state 69
    class_declarations             shift and go to state 89
    empty                          shift and go to state 70
    var_declaration                shift and go to state 71
    function_definition            shift and go to state 72
    type                           shift and go to state 18
    array_declaration              shift and go to state 73
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 70

    (31) class_declarations -> empty .

    RIGHT_BR_CURLY  reduce using rule 31 (class_declarations -> empty .)


state 71

    (27) class_declaration -> var_declaration .

    INT             reduce using rule 27 (class_declaration -> var_declaration .)
    CHAR            reduce using rule 27 (class_declaration -> var_declaration .)
    STRING          reduce using rule 27 (class_declaration -> var_declaration .)
    BOOL            reduce using rule 27 (class_declaration -> var_declaration .)
    FLOAT           reduce using rule 27 (class_declaration -> var_declaration .)
    LONG            reduce using rule 27 (class_declaration -> var_declaration .)
    SHORT           reduce using rule 27 (class_declaration -> var_declaration .)
    DOUBLE          reduce using rule 27 (class_declaration -> var_declaration .)
    VOID            reduce using rule 27 (class_declaration -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 27 (class_declaration -> var_declaration .)


state 72

    (28) class_declaration -> function_definition .

    INT             reduce using rule 28 (class_declaration -> function_definition .)
    CHAR            reduce using rule 28 (class_declaration -> function_definition .)
    STRING          reduce using rule 28 (class_declaration -> function_definition .)
    BOOL            reduce using rule 28 (class_declaration -> function_definition .)
    FLOAT           reduce using rule 28 (class_declaration -> function_definition .)
    LONG            reduce using rule 28 (class_declaration -> function_definition .)
    SHORT           reduce using rule 28 (class_declaration -> function_definition .)
    DOUBLE          reduce using rule 28 (class_declaration -> function_definition .)
    VOID            reduce using rule 28 (class_declaration -> function_definition .)
    RIGHT_BR_CURLY  reduce using rule 28 (class_declaration -> function_definition .)


state 73

    (110) var_declaration -> array_declaration .

    INT             reduce using rule 110 (var_declaration -> array_declaration .)
    CHAR            reduce using rule 110 (var_declaration -> array_declaration .)
    STRING          reduce using rule 110 (var_declaration -> array_declaration .)
    BOOL            reduce using rule 110 (var_declaration -> array_declaration .)
    FLOAT           reduce using rule 110 (var_declaration -> array_declaration .)
    LONG            reduce using rule 110 (var_declaration -> array_declaration .)
    SHORT           reduce using rule 110 (var_declaration -> array_declaration .)
    DOUBLE          reduce using rule 110 (var_declaration -> array_declaration .)
    VOID            reduce using rule 110 (var_declaration -> array_declaration .)
    RIGHT_BR_CURLY  reduce using rule 110 (var_declaration -> array_declaration .)
    IF              reduce using rule 110 (var_declaration -> array_declaration .)
    VAR             reduce using rule 110 (var_declaration -> array_declaration .)
    COUT            reduce using rule 110 (var_declaration -> array_declaration .)
    CIN             reduce using rule 110 (var_declaration -> array_declaration .)
    COMMENT         reduce using rule 110 (var_declaration -> array_declaration .)
    WHILE           reduce using rule 110 (var_declaration -> array_declaration .)
    FOR             reduce using rule 110 (var_declaration -> array_declaration .)
    RETURN          reduce using rule 110 (var_declaration -> array_declaration .)


state 74

    (112) var_declaration -> type VAR EQUAL VAR SEMICOLON .

    CLASS           reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    HASH            reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    USING           reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    COMMENT         reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VOID            reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    $end            reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    IF              reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 112 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)


state 75

    (98) math_operation -> VAR operator . VAR
    (99) math_operation -> VAR operator . number
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER

    VAR             shift and go to state 90
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56

    number                         shift and go to state 91

state 76

    (70) operator -> PLUS .

    VAR             reduce using rule 70 (operator -> PLUS .)
    INT_NUMBER      reduce using rule 70 (operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 70 (operator -> PLUS .)


state 77

    (71) operator -> MINUS .

    VAR             reduce using rule 71 (operator -> MINUS .)
    INT_NUMBER      reduce using rule 71 (operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 71 (operator -> MINUS .)


state 78

    (72) operator -> MULTIPLY .

    VAR             reduce using rule 72 (operator -> MULTIPLY .)
    INT_NUMBER      reduce using rule 72 (operator -> MULTIPLY .)
    FLOAT_NUMBER    reduce using rule 72 (operator -> MULTIPLY .)


state 79

    (73) operator -> DIVIDE .

    VAR             reduce using rule 73 (operator -> DIVIDE .)
    INT_NUMBER      reduce using rule 73 (operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 73 (operator -> DIVIDE .)


state 80

    (111) var_declaration -> type VAR EQUAL value SEMICOLON .

    CLASS           reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    HASH            reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    USING           reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    COMMENT         reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VOID            reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    $end            reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    IF              reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    COUT            reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CIN             reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 111 (var_declaration -> type VAR EQUAL value SEMICOLON .)


state 81

    (100) math_operation -> number operator . number
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER

    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56

    number                         shift and go to state 92

state 82

    (23) var_declaration_no_semicolon -> type VAR .

    COMMA           reduce using rule 23 (var_declaration_no_semicolon -> type VAR .)
    RIGHT_BR        reduce using rule 23 (var_declaration_no_semicolon -> type VAR .)


state 83

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 93


state 84

    (21) function_var_declaration -> var_declaration_no_semicolon COMMA . function_var_declaration
    (20) function_var_declaration -> . var_declaration_no_semicolon
    (21) function_var_declaration -> . var_declaration_no_semicolon COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (23) var_declaration_no_semicolon -> . type VAR
    (126) empty -> .
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE

    RIGHT_BR        reduce using rule 126 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

    var_declaration_no_semicolon   shift and go to state 63
    function_var_declaration       shift and go to state 94
    empty                          shift and go to state 64
    type                           shift and go to state 61

state 85

    (104) get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .

    SEMICOLON       reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    EQUAL           reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    EQUAL_EQUAL     reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    LESS            reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    LESS_EQUAL      reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    GREATER         reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    GREATER_EQUAL   reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    NOT_EQUAL       reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    AND             reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    OR              reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    RIGHT_BR        reduce using rule 104 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)


state 86

    (103) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .

    SEMICOLON       reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL           reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL_EQUAL     reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS            reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS_EQUAL      reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER         reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER_EQUAL   reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    NOT_EQUAL       reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    AND             reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    OR              reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    RIGHT_BR        reduce using rule 103 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)


state 87

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 95


state 88

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY . SEMICOLON

    SEMICOLON       shift and go to state 96


state 89

    (30) class_declarations -> class_declaration class_declarations .

    RIGHT_BR_CURLY  reduce using rule 30 (class_declarations -> class_declaration class_declarations .)


state 90

    (98) math_operation -> VAR operator VAR .

    SEMICOLON       reduce using rule 98 (math_operation -> VAR operator VAR .)
    EQUAL_EQUAL     reduce using rule 98 (math_operation -> VAR operator VAR .)
    LESS            reduce using rule 98 (math_operation -> VAR operator VAR .)
    LESS_EQUAL      reduce using rule 98 (math_operation -> VAR operator VAR .)
    GREATER         reduce using rule 98 (math_operation -> VAR operator VAR .)
    GREATER_EQUAL   reduce using rule 98 (math_operation -> VAR operator VAR .)
    NOT_EQUAL       reduce using rule 98 (math_operation -> VAR operator VAR .)
    AND             reduce using rule 98 (math_operation -> VAR operator VAR .)
    OR              reduce using rule 98 (math_operation -> VAR operator VAR .)
    RIGHT_BR        reduce using rule 98 (math_operation -> VAR operator VAR .)


state 91

    (99) math_operation -> VAR operator number .

    SEMICOLON       reduce using rule 99 (math_operation -> VAR operator number .)
    EQUAL_EQUAL     reduce using rule 99 (math_operation -> VAR operator number .)
    LESS            reduce using rule 99 (math_operation -> VAR operator number .)
    LESS_EQUAL      reduce using rule 99 (math_operation -> VAR operator number .)
    GREATER         reduce using rule 99 (math_operation -> VAR operator number .)
    GREATER_EQUAL   reduce using rule 99 (math_operation -> VAR operator number .)
    NOT_EQUAL       reduce using rule 99 (math_operation -> VAR operator number .)
    AND             reduce using rule 99 (math_operation -> VAR operator number .)
    OR              reduce using rule 99 (math_operation -> VAR operator number .)
    RIGHT_BR        reduce using rule 99 (math_operation -> VAR operator number .)


state 92

    (100) math_operation -> number operator number .

    SEMICOLON       reduce using rule 100 (math_operation -> number operator number .)
    EQUAL_EQUAL     reduce using rule 100 (math_operation -> number operator number .)
    LESS            reduce using rule 100 (math_operation -> number operator number .)
    LESS_EQUAL      reduce using rule 100 (math_operation -> number operator number .)
    GREATER         reduce using rule 100 (math_operation -> number operator number .)
    GREATER_EQUAL   reduce using rule 100 (math_operation -> number operator number .)
    NOT_EQUAL       reduce using rule 100 (math_operation -> number operator number .)
    AND             reduce using rule 100 (math_operation -> number operator number .)
    OR              reduce using rule 100 (math_operation -> number operator number .)
    RIGHT_BR        reduce using rule 100 (math_operation -> number operator number .)


state 93

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions returning RIGHT_BR_CURLY
    (127) change_tab_number -> .

    IF              reduce using rule 127 (change_tab_number -> .)
    VAR             reduce using rule 127 (change_tab_number -> .)
    COUT            reduce using rule 127 (change_tab_number -> .)
    CIN             reduce using rule 127 (change_tab_number -> .)
    COMMENT         reduce using rule 127 (change_tab_number -> .)
    WHILE           reduce using rule 127 (change_tab_number -> .)
    INT             reduce using rule 127 (change_tab_number -> .)
    CHAR            reduce using rule 127 (change_tab_number -> .)
    STRING          reduce using rule 127 (change_tab_number -> .)
    BOOL            reduce using rule 127 (change_tab_number -> .)
    FLOAT           reduce using rule 127 (change_tab_number -> .)
    LONG            reduce using rule 127 (change_tab_number -> .)
    SHORT           reduce using rule 127 (change_tab_number -> .)
    DOUBLE          reduce using rule 127 (change_tab_number -> .)
    FOR             reduce using rule 127 (change_tab_number -> .)
    RETURN          reduce using rule 127 (change_tab_number -> .)

    change_tab_number              shift and go to state 97

state 94

    (21) function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration .

    RIGHT_BR        reduce using rule 21 (function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration .)


state 95

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (127) change_tab_number -> .

    IF              reduce using rule 127 (change_tab_number -> .)
    VAR             reduce using rule 127 (change_tab_number -> .)
    COUT            reduce using rule 127 (change_tab_number -> .)
    CIN             reduce using rule 127 (change_tab_number -> .)
    COMMENT         reduce using rule 127 (change_tab_number -> .)
    WHILE           reduce using rule 127 (change_tab_number -> .)
    INT             reduce using rule 127 (change_tab_number -> .)
    CHAR            reduce using rule 127 (change_tab_number -> .)
    STRING          reduce using rule 127 (change_tab_number -> .)
    BOOL            reduce using rule 127 (change_tab_number -> .)
    FLOAT           reduce using rule 127 (change_tab_number -> .)
    LONG            reduce using rule 127 (change_tab_number -> .)
    SHORT           reduce using rule 127 (change_tab_number -> .)
    DOUBLE          reduce using rule 127 (change_tab_number -> .)
    FOR             reduce using rule 127 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 127 (change_tab_number -> .)

    change_tab_number              shift and go to state 98

state 96

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .

    CLASS           reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    HASH            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    USING           reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    COMMENT         reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    VOID            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    INT             reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    CHAR            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    STRING          reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    BOOL            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    FLOAT           reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    LONG            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    SHORT           reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    DOUBLE          reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)
    $end            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON .)


state 97

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions returning RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (40) instruction -> . print
    (41) instruction -> . input
    (42) instruction -> . comment
    (43) instruction -> . function_call
    (55) loop -> . while_loop
    (56) loop -> . for_loop
    (58) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (105) assignment -> . VAR EQUAL value SEMICOLON
    (106) assignment -> . VAR EQUAL VAR SEMICOLON
    (107) assignment -> . get_array_element EQUAL value SEMICOLON
    (108) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (101) operation -> . increment
    (102) operation -> . decrement
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (122) print -> . COUT out SEMICOLON
    (123) input -> . CIN in SEMICOLON
    (125) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR VAR RIGHT_BR SEMICOLON
    (44) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (54) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (96) increment -> . VAR PLUS_PLUS SEMICOLON
    (97) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 115
    VAR             shift and go to state 100
    RETURN          reduce using rule 126 (empty -> .)
    COUT            shift and go to state 119
    CIN             shift and go to state 120
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 121
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 123

  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! COUT            [ reduce using rule 126 (empty -> .) ]
  ! CIN             [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]

    type                           shift and go to state 99
    instructions                   shift and go to state 101
    instruction                    shift and go to state 102
    loop                           shift and go to state 103
    if_statement                   shift and go to state 104
    assignment                     shift and go to state 105
    operation                      shift and go to state 106
    empty                          shift and go to state 107
    var_declaration                shift and go to state 108
    print                          shift and go to state 109
    input                          shift and go to state 110
    comment                        shift and go to state 111
    function_call                  shift and go to state 112
    while_loop                     shift and go to state 113
    for_loop                       shift and go to state 114
    get_array_element              shift and go to state 116
    increment                      shift and go to state 117
    decrement                      shift and go to state 118
    array_declaration              shift and go to state 73
    for_loop_statement             shift and go to state 122

state 98

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (40) instruction -> . print
    (41) instruction -> . input
    (42) instruction -> . comment
    (43) instruction -> . function_call
    (55) loop -> . while_loop
    (56) loop -> . for_loop
    (58) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (105) assignment -> . VAR EQUAL value SEMICOLON
    (106) assignment -> . VAR EQUAL VAR SEMICOLON
    (107) assignment -> . get_array_element EQUAL value SEMICOLON
    (108) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (101) operation -> . increment
    (102) operation -> . decrement
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (122) print -> . COUT out SEMICOLON
    (123) input -> . CIN in SEMICOLON
    (125) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR VAR RIGHT_BR SEMICOLON
    (44) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (54) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (96) increment -> . VAR PLUS_PLUS SEMICOLON
    (97) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 115
    VAR             shift and go to state 100
    RIGHT_BR_CURLY  reduce using rule 126 (empty -> .)
    COUT            shift and go to state 119
    CIN             shift and go to state 120
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 121
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 123

  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! COUT            [ reduce using rule 126 (empty -> .) ]
  ! CIN             [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]

    instructions                   shift and go to state 124
    instruction                    shift and go to state 102
    loop                           shift and go to state 103
    if_statement                   shift and go to state 104
    assignment                     shift and go to state 105
    operation                      shift and go to state 106
    empty                          shift and go to state 107
    var_declaration                shift and go to state 108
    print                          shift and go to state 109
    input                          shift and go to state 110
    comment                        shift and go to state 111
    function_call                  shift and go to state 112
    while_loop                     shift and go to state 113
    for_loop                       shift and go to state 114
    get_array_element              shift and go to state 116
    increment                      shift and go to state 117
    decrement                      shift and go to state 118
    type                           shift and go to state 99
    array_declaration              shift and go to state 73
    for_loop_statement             shift and go to state 122

state 99

    (109) var_declaration -> type . VAR SEMICOLON
    (111) var_declaration -> type . VAR EQUAL value SEMICOLON
    (112) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (113) array_declaration -> type . get_array_element SEMICOLON
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED

    VAR             shift and go to state 125

    get_array_element              shift and go to state 35

state 100

    (105) assignment -> VAR . EQUAL value SEMICOLON
    (106) assignment -> VAR . EQUAL VAR SEMICOLON
    (24) function_call -> VAR . LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> VAR . LEFT_BR VAR RIGHT_BR SEMICOLON
    (103) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (96) increment -> VAR . PLUS_PLUS SEMICOLON
    (97) decrement -> VAR . MINUS_MINUS SEMICOLON

    EQUAL           shift and go to state 126
    LEFT_BR         shift and go to state 127
    LEFT_BR_SQUARED shift and go to state 43
    PLUS_PLUS       shift and go to state 128
    MINUS_MINUS     shift and go to state 129


state 101

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . returning RIGHT_BR_CURLY
    (124) returning -> . RETURN value SEMICOLON

    RETURN          shift and go to state 131

    returning                      shift and go to state 130

state 102

    (32) instructions -> instruction .
    (33) instructions -> instruction . instructions
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (40) instruction -> . print
    (41) instruction -> . input
    (42) instruction -> . comment
    (43) instruction -> . function_call
    (55) loop -> . while_loop
    (56) loop -> . for_loop
    (58) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (105) assignment -> . VAR EQUAL value SEMICOLON
    (106) assignment -> . VAR EQUAL VAR SEMICOLON
    (107) assignment -> . get_array_element EQUAL value SEMICOLON
    (108) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (101) operation -> . increment
    (102) operation -> . decrement
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (122) print -> . COUT out SEMICOLON
    (123) input -> . CIN in SEMICOLON
    (125) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR VAR RIGHT_BR SEMICOLON
    (44) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (54) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (96) increment -> . VAR PLUS_PLUS SEMICOLON
    (97) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 32 (instructions -> instruction .)
  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 32 (instructions -> instruction .)
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          reduce using rule 32 (instructions -> instruction .)
    RIGHT_BR_CURLY  reduce using rule 32 (instructions -> instruction .)
    IF              shift and go to state 115
    VAR             shift and go to state 100
    COUT            shift and go to state 119
    CIN             shift and go to state 120
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 121
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 123

  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! COUT            [ reduce using rule 126 (empty -> .) ]
  ! CIN             [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]
  ! RETURN          [ reduce using rule 126 (empty -> .) ]
  ! RIGHT_BR_CURLY  [ reduce using rule 126 (empty -> .) ]

    instruction                    shift and go to state 102
    instructions                   shift and go to state 132
    loop                           shift and go to state 103
    if_statement                   shift and go to state 104
    assignment                     shift and go to state 105
    operation                      shift and go to state 106
    empty                          shift and go to state 107
    var_declaration                shift and go to state 108
    print                          shift and go to state 109
    input                          shift and go to state 110
    comment                        shift and go to state 111
    function_call                  shift and go to state 112
    while_loop                     shift and go to state 113
    for_loop                       shift and go to state 114
    get_array_element              shift and go to state 116
    increment                      shift and go to state 117
    decrement                      shift and go to state 118
    type                           shift and go to state 99
    array_declaration              shift and go to state 73
    for_loop_statement             shift and go to state 122

state 103

    (34) instruction -> loop .

    IF              reduce using rule 34 (instruction -> loop .)
    VAR             reduce using rule 34 (instruction -> loop .)
    COUT            reduce using rule 34 (instruction -> loop .)
    CIN             reduce using rule 34 (instruction -> loop .)
    COMMENT         reduce using rule 34 (instruction -> loop .)
    WHILE           reduce using rule 34 (instruction -> loop .)
    INT             reduce using rule 34 (instruction -> loop .)
    CHAR            reduce using rule 34 (instruction -> loop .)
    STRING          reduce using rule 34 (instruction -> loop .)
    BOOL            reduce using rule 34 (instruction -> loop .)
    FLOAT           reduce using rule 34 (instruction -> loop .)
    LONG            reduce using rule 34 (instruction -> loop .)
    SHORT           reduce using rule 34 (instruction -> loop .)
    DOUBLE          reduce using rule 34 (instruction -> loop .)
    FOR             reduce using rule 34 (instruction -> loop .)
    RETURN          reduce using rule 34 (instruction -> loop .)
    RIGHT_BR_CURLY  reduce using rule 34 (instruction -> loop .)


state 104

    (35) instruction -> if_statement .

    IF              reduce using rule 35 (instruction -> if_statement .)
    VAR             reduce using rule 35 (instruction -> if_statement .)
    COUT            reduce using rule 35 (instruction -> if_statement .)
    CIN             reduce using rule 35 (instruction -> if_statement .)
    COMMENT         reduce using rule 35 (instruction -> if_statement .)
    WHILE           reduce using rule 35 (instruction -> if_statement .)
    INT             reduce using rule 35 (instruction -> if_statement .)
    CHAR            reduce using rule 35 (instruction -> if_statement .)
    STRING          reduce using rule 35 (instruction -> if_statement .)
    BOOL            reduce using rule 35 (instruction -> if_statement .)
    FLOAT           reduce using rule 35 (instruction -> if_statement .)
    LONG            reduce using rule 35 (instruction -> if_statement .)
    SHORT           reduce using rule 35 (instruction -> if_statement .)
    DOUBLE          reduce using rule 35 (instruction -> if_statement .)
    FOR             reduce using rule 35 (instruction -> if_statement .)
    RETURN          reduce using rule 35 (instruction -> if_statement .)
    RIGHT_BR_CURLY  reduce using rule 35 (instruction -> if_statement .)


state 105

    (36) instruction -> assignment .

    IF              reduce using rule 36 (instruction -> assignment .)
    VAR             reduce using rule 36 (instruction -> assignment .)
    COUT            reduce using rule 36 (instruction -> assignment .)
    CIN             reduce using rule 36 (instruction -> assignment .)
    COMMENT         reduce using rule 36 (instruction -> assignment .)
    WHILE           reduce using rule 36 (instruction -> assignment .)
    INT             reduce using rule 36 (instruction -> assignment .)
    CHAR            reduce using rule 36 (instruction -> assignment .)
    STRING          reduce using rule 36 (instruction -> assignment .)
    BOOL            reduce using rule 36 (instruction -> assignment .)
    FLOAT           reduce using rule 36 (instruction -> assignment .)
    LONG            reduce using rule 36 (instruction -> assignment .)
    SHORT           reduce using rule 36 (instruction -> assignment .)
    DOUBLE          reduce using rule 36 (instruction -> assignment .)
    FOR             reduce using rule 36 (instruction -> assignment .)
    RETURN          reduce using rule 36 (instruction -> assignment .)
    RIGHT_BR_CURLY  reduce using rule 36 (instruction -> assignment .)


state 106

    (37) instruction -> operation .

    IF              reduce using rule 37 (instruction -> operation .)
    VAR             reduce using rule 37 (instruction -> operation .)
    COUT            reduce using rule 37 (instruction -> operation .)
    CIN             reduce using rule 37 (instruction -> operation .)
    COMMENT         reduce using rule 37 (instruction -> operation .)
    WHILE           reduce using rule 37 (instruction -> operation .)
    INT             reduce using rule 37 (instruction -> operation .)
    CHAR            reduce using rule 37 (instruction -> operation .)
    STRING          reduce using rule 37 (instruction -> operation .)
    BOOL            reduce using rule 37 (instruction -> operation .)
    FLOAT           reduce using rule 37 (instruction -> operation .)
    LONG            reduce using rule 37 (instruction -> operation .)
    SHORT           reduce using rule 37 (instruction -> operation .)
    DOUBLE          reduce using rule 37 (instruction -> operation .)
    FOR             reduce using rule 37 (instruction -> operation .)
    RETURN          reduce using rule 37 (instruction -> operation .)
    RIGHT_BR_CURLY  reduce using rule 37 (instruction -> operation .)


state 107

    (38) instruction -> empty .

    IF              reduce using rule 38 (instruction -> empty .)
    VAR             reduce using rule 38 (instruction -> empty .)
    COUT            reduce using rule 38 (instruction -> empty .)
    CIN             reduce using rule 38 (instruction -> empty .)
    COMMENT         reduce using rule 38 (instruction -> empty .)
    WHILE           reduce using rule 38 (instruction -> empty .)
    INT             reduce using rule 38 (instruction -> empty .)
    CHAR            reduce using rule 38 (instruction -> empty .)
    STRING          reduce using rule 38 (instruction -> empty .)
    BOOL            reduce using rule 38 (instruction -> empty .)
    FLOAT           reduce using rule 38 (instruction -> empty .)
    LONG            reduce using rule 38 (instruction -> empty .)
    SHORT           reduce using rule 38 (instruction -> empty .)
    DOUBLE          reduce using rule 38 (instruction -> empty .)
    FOR             reduce using rule 38 (instruction -> empty .)
    RETURN          reduce using rule 38 (instruction -> empty .)
    RIGHT_BR_CURLY  reduce using rule 38 (instruction -> empty .)


state 108

    (39) instruction -> var_declaration .

    IF              reduce using rule 39 (instruction -> var_declaration .)
    VAR             reduce using rule 39 (instruction -> var_declaration .)
    COUT            reduce using rule 39 (instruction -> var_declaration .)
    CIN             reduce using rule 39 (instruction -> var_declaration .)
    COMMENT         reduce using rule 39 (instruction -> var_declaration .)
    WHILE           reduce using rule 39 (instruction -> var_declaration .)
    INT             reduce using rule 39 (instruction -> var_declaration .)
    CHAR            reduce using rule 39 (instruction -> var_declaration .)
    STRING          reduce using rule 39 (instruction -> var_declaration .)
    BOOL            reduce using rule 39 (instruction -> var_declaration .)
    FLOAT           reduce using rule 39 (instruction -> var_declaration .)
    LONG            reduce using rule 39 (instruction -> var_declaration .)
    SHORT           reduce using rule 39 (instruction -> var_declaration .)
    DOUBLE          reduce using rule 39 (instruction -> var_declaration .)
    FOR             reduce using rule 39 (instruction -> var_declaration .)
    RETURN          reduce using rule 39 (instruction -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 39 (instruction -> var_declaration .)


state 109

    (40) instruction -> print .

    IF              reduce using rule 40 (instruction -> print .)
    VAR             reduce using rule 40 (instruction -> print .)
    COUT            reduce using rule 40 (instruction -> print .)
    CIN             reduce using rule 40 (instruction -> print .)
    COMMENT         reduce using rule 40 (instruction -> print .)
    WHILE           reduce using rule 40 (instruction -> print .)
    INT             reduce using rule 40 (instruction -> print .)
    CHAR            reduce using rule 40 (instruction -> print .)
    STRING          reduce using rule 40 (instruction -> print .)
    BOOL            reduce using rule 40 (instruction -> print .)
    FLOAT           reduce using rule 40 (instruction -> print .)
    LONG            reduce using rule 40 (instruction -> print .)
    SHORT           reduce using rule 40 (instruction -> print .)
    DOUBLE          reduce using rule 40 (instruction -> print .)
    FOR             reduce using rule 40 (instruction -> print .)
    RETURN          reduce using rule 40 (instruction -> print .)
    RIGHT_BR_CURLY  reduce using rule 40 (instruction -> print .)


state 110

    (41) instruction -> input .

    IF              reduce using rule 41 (instruction -> input .)
    VAR             reduce using rule 41 (instruction -> input .)
    COUT            reduce using rule 41 (instruction -> input .)
    CIN             reduce using rule 41 (instruction -> input .)
    COMMENT         reduce using rule 41 (instruction -> input .)
    WHILE           reduce using rule 41 (instruction -> input .)
    INT             reduce using rule 41 (instruction -> input .)
    CHAR            reduce using rule 41 (instruction -> input .)
    STRING          reduce using rule 41 (instruction -> input .)
    BOOL            reduce using rule 41 (instruction -> input .)
    FLOAT           reduce using rule 41 (instruction -> input .)
    LONG            reduce using rule 41 (instruction -> input .)
    SHORT           reduce using rule 41 (instruction -> input .)
    DOUBLE          reduce using rule 41 (instruction -> input .)
    FOR             reduce using rule 41 (instruction -> input .)
    RETURN          reduce using rule 41 (instruction -> input .)
    RIGHT_BR_CURLY  reduce using rule 41 (instruction -> input .)


state 111

    (42) instruction -> comment .

    IF              reduce using rule 42 (instruction -> comment .)
    VAR             reduce using rule 42 (instruction -> comment .)
    COUT            reduce using rule 42 (instruction -> comment .)
    CIN             reduce using rule 42 (instruction -> comment .)
    COMMENT         reduce using rule 42 (instruction -> comment .)
    WHILE           reduce using rule 42 (instruction -> comment .)
    INT             reduce using rule 42 (instruction -> comment .)
    CHAR            reduce using rule 42 (instruction -> comment .)
    STRING          reduce using rule 42 (instruction -> comment .)
    BOOL            reduce using rule 42 (instruction -> comment .)
    FLOAT           reduce using rule 42 (instruction -> comment .)
    LONG            reduce using rule 42 (instruction -> comment .)
    SHORT           reduce using rule 42 (instruction -> comment .)
    DOUBLE          reduce using rule 42 (instruction -> comment .)
    FOR             reduce using rule 42 (instruction -> comment .)
    RETURN          reduce using rule 42 (instruction -> comment .)
    RIGHT_BR_CURLY  reduce using rule 42 (instruction -> comment .)


state 112

    (43) instruction -> function_call .

    IF              reduce using rule 43 (instruction -> function_call .)
    VAR             reduce using rule 43 (instruction -> function_call .)
    COUT            reduce using rule 43 (instruction -> function_call .)
    CIN             reduce using rule 43 (instruction -> function_call .)
    COMMENT         reduce using rule 43 (instruction -> function_call .)
    WHILE           reduce using rule 43 (instruction -> function_call .)
    INT             reduce using rule 43 (instruction -> function_call .)
    CHAR            reduce using rule 43 (instruction -> function_call .)
    STRING          reduce using rule 43 (instruction -> function_call .)
    BOOL            reduce using rule 43 (instruction -> function_call .)
    FLOAT           reduce using rule 43 (instruction -> function_call .)
    LONG            reduce using rule 43 (instruction -> function_call .)
    SHORT           reduce using rule 43 (instruction -> function_call .)
    DOUBLE          reduce using rule 43 (instruction -> function_call .)
    FOR             reduce using rule 43 (instruction -> function_call .)
    RETURN          reduce using rule 43 (instruction -> function_call .)
    RIGHT_BR_CURLY  reduce using rule 43 (instruction -> function_call .)


state 113

    (55) loop -> while_loop .

    IF              reduce using rule 55 (loop -> while_loop .)
    VAR             reduce using rule 55 (loop -> while_loop .)
    COUT            reduce using rule 55 (loop -> while_loop .)
    CIN             reduce using rule 55 (loop -> while_loop .)
    COMMENT         reduce using rule 55 (loop -> while_loop .)
    WHILE           reduce using rule 55 (loop -> while_loop .)
    INT             reduce using rule 55 (loop -> while_loop .)
    CHAR            reduce using rule 55 (loop -> while_loop .)
    STRING          reduce using rule 55 (loop -> while_loop .)
    BOOL            reduce using rule 55 (loop -> while_loop .)
    FLOAT           reduce using rule 55 (loop -> while_loop .)
    LONG            reduce using rule 55 (loop -> while_loop .)
    SHORT           reduce using rule 55 (loop -> while_loop .)
    DOUBLE          reduce using rule 55 (loop -> while_loop .)
    FOR             reduce using rule 55 (loop -> while_loop .)
    RETURN          reduce using rule 55 (loop -> while_loop .)
    RIGHT_BR_CURLY  reduce using rule 55 (loop -> while_loop .)


state 114

    (56) loop -> for_loop .

    IF              reduce using rule 56 (loop -> for_loop .)
    VAR             reduce using rule 56 (loop -> for_loop .)
    COUT            reduce using rule 56 (loop -> for_loop .)
    CIN             reduce using rule 56 (loop -> for_loop .)
    COMMENT         reduce using rule 56 (loop -> for_loop .)
    WHILE           reduce using rule 56 (loop -> for_loop .)
    INT             reduce using rule 56 (loop -> for_loop .)
    CHAR            reduce using rule 56 (loop -> for_loop .)
    STRING          reduce using rule 56 (loop -> for_loop .)
    BOOL            reduce using rule 56 (loop -> for_loop .)
    FLOAT           reduce using rule 56 (loop -> for_loop .)
    LONG            reduce using rule 56 (loop -> for_loop .)
    SHORT           reduce using rule 56 (loop -> for_loop .)
    DOUBLE          reduce using rule 56 (loop -> for_loop .)
    FOR             reduce using rule 56 (loop -> for_loop .)
    RETURN          reduce using rule 56 (loop -> for_loop .)
    RIGHT_BR_CURLY  reduce using rule 56 (loop -> for_loop .)


state 115

    (58) if_statement -> IF . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> IF . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement

    LEFT_BR         shift and go to state 133


state 116

    (107) assignment -> get_array_element . EQUAL value SEMICOLON
    (108) assignment -> get_array_element . EQUAL VAR SEMICOLON

    EQUAL           shift and go to state 134


state 117

    (101) operation -> increment .

    IF              reduce using rule 101 (operation -> increment .)
    VAR             reduce using rule 101 (operation -> increment .)
    COUT            reduce using rule 101 (operation -> increment .)
    CIN             reduce using rule 101 (operation -> increment .)
    COMMENT         reduce using rule 101 (operation -> increment .)
    WHILE           reduce using rule 101 (operation -> increment .)
    INT             reduce using rule 101 (operation -> increment .)
    CHAR            reduce using rule 101 (operation -> increment .)
    STRING          reduce using rule 101 (operation -> increment .)
    BOOL            reduce using rule 101 (operation -> increment .)
    FLOAT           reduce using rule 101 (operation -> increment .)
    LONG            reduce using rule 101 (operation -> increment .)
    SHORT           reduce using rule 101 (operation -> increment .)
    DOUBLE          reduce using rule 101 (operation -> increment .)
    FOR             reduce using rule 101 (operation -> increment .)
    RETURN          reduce using rule 101 (operation -> increment .)
    RIGHT_BR_CURLY  reduce using rule 101 (operation -> increment .)


state 118

    (102) operation -> decrement .

    IF              reduce using rule 102 (operation -> decrement .)
    VAR             reduce using rule 102 (operation -> decrement .)
    COUT            reduce using rule 102 (operation -> decrement .)
    CIN             reduce using rule 102 (operation -> decrement .)
    COMMENT         reduce using rule 102 (operation -> decrement .)
    WHILE           reduce using rule 102 (operation -> decrement .)
    INT             reduce using rule 102 (operation -> decrement .)
    CHAR            reduce using rule 102 (operation -> decrement .)
    STRING          reduce using rule 102 (operation -> decrement .)
    BOOL            reduce using rule 102 (operation -> decrement .)
    FLOAT           reduce using rule 102 (operation -> decrement .)
    LONG            reduce using rule 102 (operation -> decrement .)
    SHORT           reduce using rule 102 (operation -> decrement .)
    DOUBLE          reduce using rule 102 (operation -> decrement .)
    FOR             reduce using rule 102 (operation -> decrement .)
    RETURN          reduce using rule 102 (operation -> decrement .)
    RIGHT_BR_CURLY  reduce using rule 102 (operation -> decrement .)


state 119

    (122) print -> COUT . out SEMICOLON
    (114) out -> . OUT VAR
    (115) out -> . OUT VAR out
    (116) out -> . OUT TEXT
    (117) out -> . OUT TEXT out
    (118) out -> . OUT ENDL
    (119) out -> . OUT ENDL out

    OUT             shift and go to state 136

    out                            shift and go to state 135

state 120

    (123) input -> CIN . in SEMICOLON
    (120) in -> . IN VAR
    (121) in -> . IN VAR in

    IN              shift and go to state 138

    in                             shift and go to state 137

state 121

    (44) while_loop -> WHILE . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> WHILE . LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 139


state 122

    (54) for_loop -> for_loop_statement . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 140


state 123

    (46) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LEFT_BR         shift and go to state 141


state 124

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 142


state 125

    (109) var_declaration -> type VAR . SEMICOLON
    (111) var_declaration -> type VAR . EQUAL value SEMICOLON
    (112) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (103) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 40
    EQUAL           shift and go to state 41
    LEFT_BR_SQUARED shift and go to state 43


state 126

    (105) assignment -> VAR EQUAL . value SEMICOLON
    (106) assignment -> VAR EQUAL . VAR SEMICOLON
    (90) value -> . number
    (91) value -> . VAR
    (92) value -> . get_array_element
    (93) value -> . string_value
    (94) value -> . bool_value
    (95) value -> . math_operation
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (84) string_value -> . TEXT
    (85) string_value -> . SIGN
    (88) bool_value -> . TRUE
    (89) bool_value -> . FALSE
    (98) math_operation -> . VAR operator VAR
    (99) math_operation -> . VAR operator number
    (100) math_operation -> . number operator number

    VAR             shift and go to state 143
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    value                          shift and go to state 144
    number                         shift and go to state 50
    get_array_element              shift and go to state 51
    string_value                   shift and go to state 52
    bool_value                     shift and go to state 53
    math_operation                 shift and go to state 54

state 127

    (24) function_call -> VAR LEFT_BR . RIGHT_BR SEMICOLON
    (25) function_call -> VAR LEFT_BR . VAR RIGHT_BR SEMICOLON

    RIGHT_BR        shift and go to state 146
    VAR             shift and go to state 145


state 128

    (96) increment -> VAR PLUS_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 147


state 129

    (97) decrement -> VAR MINUS_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 148


state 130

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 149


state 131

    (124) returning -> RETURN . value SEMICOLON
    (90) value -> . number
    (91) value -> . VAR
    (92) value -> . get_array_element
    (93) value -> . string_value
    (94) value -> . bool_value
    (95) value -> . math_operation
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (84) string_value -> . TEXT
    (85) string_value -> . SIGN
    (88) bool_value -> . TRUE
    (89) bool_value -> . FALSE
    (98) math_operation -> . VAR operator VAR
    (99) math_operation -> . VAR operator number
    (100) math_operation -> . number operator number

    VAR             shift and go to state 151
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    value                          shift and go to state 150
    number                         shift and go to state 50
    get_array_element              shift and go to state 51
    string_value                   shift and go to state 52
    bool_value                     shift and go to state 53
    math_operation                 shift and go to state 54

state 132

    (33) instructions -> instruction instructions .

    RETURN          reduce using rule 33 (instructions -> instruction instructions .)
    RIGHT_BR_CURLY  reduce using rule 33 (instructions -> instruction instructions .)


state 133

    (58) if_statement -> IF LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> IF LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (60) comparisons -> . comparison
    (61) comparisons -> . comparison conjunction comparisons
    (62) comparison -> . value comparator value
    (63) comparison -> . value EQUAL_EQUAL EMPTY_TEXT
    (90) value -> . number
    (91) value -> . VAR
    (92) value -> . get_array_element
    (93) value -> . string_value
    (94) value -> . bool_value
    (95) value -> . math_operation
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (84) string_value -> . TEXT
    (85) string_value -> . SIGN
    (88) bool_value -> . TRUE
    (89) bool_value -> . FALSE
    (98) math_operation -> . VAR operator VAR
    (99) math_operation -> . VAR operator number
    (100) math_operation -> . number operator number

    VAR             shift and go to state 151
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    comparisons                    shift and go to state 152
    comparison                     shift and go to state 153
    value                          shift and go to state 154
    number                         shift and go to state 50
    get_array_element              shift and go to state 51
    string_value                   shift and go to state 52
    bool_value                     shift and go to state 53
    math_operation                 shift and go to state 54

state 134

    (107) assignment -> get_array_element EQUAL . value SEMICOLON
    (108) assignment -> get_array_element EQUAL . VAR SEMICOLON
    (90) value -> . number
    (91) value -> . VAR
    (92) value -> . get_array_element
    (93) value -> . string_value
    (94) value -> . bool_value
    (95) value -> . math_operation
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (84) string_value -> . TEXT
    (85) string_value -> . SIGN
    (88) bool_value -> . TRUE
    (89) bool_value -> . FALSE
    (98) math_operation -> . VAR operator VAR
    (99) math_operation -> . VAR operator number
    (100) math_operation -> . number operator number

    VAR             shift and go to state 156
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    get_array_element              shift and go to state 51
    value                          shift and go to state 155
    number                         shift and go to state 50
    string_value                   shift and go to state 52
    bool_value                     shift and go to state 53
    math_operation                 shift and go to state 54

state 135

    (122) print -> COUT out . SEMICOLON

    SEMICOLON       shift and go to state 157


state 136

    (114) out -> OUT . VAR
    (115) out -> OUT . VAR out
    (116) out -> OUT . TEXT
    (117) out -> OUT . TEXT out
    (118) out -> OUT . ENDL
    (119) out -> OUT . ENDL out

    VAR             shift and go to state 158
    TEXT            shift and go to state 159
    ENDL            shift and go to state 160


state 137

    (123) input -> CIN in . SEMICOLON

    SEMICOLON       shift and go to state 161


state 138

    (120) in -> IN . VAR
    (121) in -> IN . VAR in

    VAR             shift and go to state 162


state 139

    (44) while_loop -> WHILE LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> WHILE LEFT_BR . bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (60) comparisons -> . comparison
    (61) comparisons -> . comparison conjunction comparisons
    (88) bool_value -> . TRUE
    (89) bool_value -> . FALSE
    (62) comparison -> . value comparator value
    (63) comparison -> . value EQUAL_EQUAL EMPTY_TEXT
    (90) value -> . number
    (91) value -> . VAR
    (92) value -> . get_array_element
    (93) value -> . string_value
    (94) value -> . bool_value
    (95) value -> . math_operation
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (84) string_value -> . TEXT
    (85) string_value -> . SIGN
    (98) math_operation -> . VAR operator VAR
    (99) math_operation -> . VAR operator number
    (100) math_operation -> . number operator number

    TRUE            shift and go to state 59
    FALSE           shift and go to state 60
    VAR             shift and go to state 151
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    comparisons                    shift and go to state 163
    bool_value                     shift and go to state 164
    comparison                     shift and go to state 153
    value                          shift and go to state 154
    number                         shift and go to state 50
    get_array_element              shift and go to state 51
    string_value                   shift and go to state 52
    math_operation                 shift and go to state 54

state 140

    (54) for_loop -> for_loop_statement LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (127) change_tab_number -> .

    IF              reduce using rule 127 (change_tab_number -> .)
    VAR             reduce using rule 127 (change_tab_number -> .)
    COUT            reduce using rule 127 (change_tab_number -> .)
    CIN             reduce using rule 127 (change_tab_number -> .)
    COMMENT         reduce using rule 127 (change_tab_number -> .)
    WHILE           reduce using rule 127 (change_tab_number -> .)
    INT             reduce using rule 127 (change_tab_number -> .)
    CHAR            reduce using rule 127 (change_tab_number -> .)
    STRING          reduce using rule 127 (change_tab_number -> .)
    BOOL            reduce using rule 127 (change_tab_number -> .)
    FLOAT           reduce using rule 127 (change_tab_number -> .)
    LONG            reduce using rule 127 (change_tab_number -> .)
    SHORT           reduce using rule 127 (change_tab_number -> .)
    DOUBLE          reduce using rule 127 (change_tab_number -> .)
    FOR             reduce using rule 127 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 127 (change_tab_number -> .)

    change_tab_number              shift and go to state 165

state 141

    (46) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT             shift and go to state 166


state 142

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    CLASS           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    HASH            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    USING           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VOID            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    $end            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 143

    (106) assignment -> VAR EQUAL VAR . SEMICOLON
    (91) value -> VAR .
    (103) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) math_operation -> VAR . operator VAR
    (99) math_operation -> VAR . operator number
    (70) operator -> . PLUS
    (71) operator -> . MINUS
    (72) operator -> . MULTIPLY
    (73) operator -> . DIVIDE

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 167
    LEFT_BR_SQUARED shift and go to state 43
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MULTIPLY        shift and go to state 78
    DIVIDE          shift and go to state 79

  ! SEMICOLON       [ reduce using rule 91 (value -> VAR .) ]

    operator                       shift and go to state 75

state 144

    (105) assignment -> VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 168


state 145

    (25) function_call -> VAR LEFT_BR VAR . RIGHT_BR SEMICOLON

    RIGHT_BR        shift and go to state 169


state 146

    (24) function_call -> VAR LEFT_BR RIGHT_BR . SEMICOLON

    SEMICOLON       shift and go to state 170


state 147

    (96) increment -> VAR PLUS_PLUS SEMICOLON .

    IF              reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    VAR             reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    COUT            reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CIN             reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    COMMENT         reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    WHILE           reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT             reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CHAR            reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    STRING          reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    BOOL            reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT           reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    LONG            reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    SHORT           reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    DOUBLE          reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FOR             reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RETURN          reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 96 (increment -> VAR PLUS_PLUS SEMICOLON .)


state 148

    (97) decrement -> VAR MINUS_MINUS SEMICOLON .

    IF              reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    VAR             reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    COUT            reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CIN             reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    COMMENT         reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    WHILE           reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT             reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CHAR            reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    STRING          reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    BOOL            reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT           reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    LONG            reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    SHORT           reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    DOUBLE          reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FOR             reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RETURN          reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 97 (decrement -> VAR MINUS_MINUS SEMICOLON .)


state 149

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .

    CLASS           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    HASH            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    USING           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    VOID            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    INT             reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    CHAR            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    STRING          reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    BOOL            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    LONG            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    SHORT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    $end            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)


state 150

    (124) returning -> RETURN value . SEMICOLON

    SEMICOLON       shift and go to state 171


state 151

    (91) value -> VAR .
    (103) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) math_operation -> VAR . operator VAR
    (99) math_operation -> VAR . operator number
    (70) operator -> . PLUS
    (71) operator -> . MINUS
    (72) operator -> . MULTIPLY
    (73) operator -> . DIVIDE

    SEMICOLON       reduce using rule 91 (value -> VAR .)
    EQUAL_EQUAL     reduce using rule 91 (value -> VAR .)
    LESS            reduce using rule 91 (value -> VAR .)
    LESS_EQUAL      reduce using rule 91 (value -> VAR .)
    GREATER         reduce using rule 91 (value -> VAR .)
    GREATER_EQUAL   reduce using rule 91 (value -> VAR .)
    NOT_EQUAL       reduce using rule 91 (value -> VAR .)
    AND             reduce using rule 91 (value -> VAR .)
    OR              reduce using rule 91 (value -> VAR .)
    RIGHT_BR        reduce using rule 91 (value -> VAR .)
    LEFT_BR_SQUARED shift and go to state 43
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MULTIPLY        shift and go to state 78
    DIVIDE          shift and go to state 79

    operator                       shift and go to state 75

state 152

    (58) if_statement -> IF LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> IF LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement

    RIGHT_BR        shift and go to state 172


state 153

    (60) comparisons -> comparison .
    (61) comparisons -> comparison . conjunction comparisons
    (82) conjunction -> . AND
    (83) conjunction -> . OR

    RIGHT_BR        reduce using rule 60 (comparisons -> comparison .)
    AND             shift and go to state 174
    OR              shift and go to state 175

    conjunction                    shift and go to state 173

state 154

    (62) comparison -> value . comparator value
    (63) comparison -> value . EQUAL_EQUAL EMPTY_TEXT
    (64) comparator -> . LESS
    (65) comparator -> . LESS_EQUAL
    (66) comparator -> . GREATER
    (67) comparator -> . GREATER_EQUAL
    (68) comparator -> . EQUAL_EQUAL
    (69) comparator -> . NOT_EQUAL

    EQUAL_EQUAL     shift and go to state 177
    LESS            shift and go to state 178
    LESS_EQUAL      shift and go to state 179
    GREATER         shift and go to state 180
    GREATER_EQUAL   shift and go to state 181
    NOT_EQUAL       shift and go to state 182

    comparator                     shift and go to state 176

state 155

    (107) assignment -> get_array_element EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 183


state 156

    (108) assignment -> get_array_element EQUAL VAR . SEMICOLON
    (91) value -> VAR .
    (103) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) math_operation -> VAR . operator VAR
    (99) math_operation -> VAR . operator number
    (70) operator -> . PLUS
    (71) operator -> . MINUS
    (72) operator -> . MULTIPLY
    (73) operator -> . DIVIDE

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 184
    LEFT_BR_SQUARED shift and go to state 43
    PLUS            shift and go to state 76
    MINUS           shift and go to state 77
    MULTIPLY        shift and go to state 78
    DIVIDE          shift and go to state 79

  ! SEMICOLON       [ reduce using rule 91 (value -> VAR .) ]

    operator                       shift and go to state 75

state 157

    (122) print -> COUT out SEMICOLON .

    IF              reduce using rule 122 (print -> COUT out SEMICOLON .)
    VAR             reduce using rule 122 (print -> COUT out SEMICOLON .)
    COUT            reduce using rule 122 (print -> COUT out SEMICOLON .)
    CIN             reduce using rule 122 (print -> COUT out SEMICOLON .)
    COMMENT         reduce using rule 122 (print -> COUT out SEMICOLON .)
    WHILE           reduce using rule 122 (print -> COUT out SEMICOLON .)
    INT             reduce using rule 122 (print -> COUT out SEMICOLON .)
    CHAR            reduce using rule 122 (print -> COUT out SEMICOLON .)
    STRING          reduce using rule 122 (print -> COUT out SEMICOLON .)
    BOOL            reduce using rule 122 (print -> COUT out SEMICOLON .)
    FLOAT           reduce using rule 122 (print -> COUT out SEMICOLON .)
    LONG            reduce using rule 122 (print -> COUT out SEMICOLON .)
    SHORT           reduce using rule 122 (print -> COUT out SEMICOLON .)
    DOUBLE          reduce using rule 122 (print -> COUT out SEMICOLON .)
    FOR             reduce using rule 122 (print -> COUT out SEMICOLON .)
    RETURN          reduce using rule 122 (print -> COUT out SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 122 (print -> COUT out SEMICOLON .)


state 158

    (114) out -> OUT VAR .
    (115) out -> OUT VAR . out
    (114) out -> . OUT VAR
    (115) out -> . OUT VAR out
    (116) out -> . OUT TEXT
    (117) out -> . OUT TEXT out
    (118) out -> . OUT ENDL
    (119) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 114 (out -> OUT VAR .)
    OUT             shift and go to state 136

    out                            shift and go to state 185

state 159

    (116) out -> OUT TEXT .
    (117) out -> OUT TEXT . out
    (114) out -> . OUT VAR
    (115) out -> . OUT VAR out
    (116) out -> . OUT TEXT
    (117) out -> . OUT TEXT out
    (118) out -> . OUT ENDL
    (119) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 116 (out -> OUT TEXT .)
    OUT             shift and go to state 136

    out                            shift and go to state 186

state 160

    (118) out -> OUT ENDL .
    (119) out -> OUT ENDL . out
    (114) out -> . OUT VAR
    (115) out -> . OUT VAR out
    (116) out -> . OUT TEXT
    (117) out -> . OUT TEXT out
    (118) out -> . OUT ENDL
    (119) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 118 (out -> OUT ENDL .)
    OUT             shift and go to state 136

    out                            shift and go to state 187

state 161

    (123) input -> CIN in SEMICOLON .

    IF              reduce using rule 123 (input -> CIN in SEMICOLON .)
    VAR             reduce using rule 123 (input -> CIN in SEMICOLON .)
    COUT            reduce using rule 123 (input -> CIN in SEMICOLON .)
    CIN             reduce using rule 123 (input -> CIN in SEMICOLON .)
    COMMENT         reduce using rule 123 (input -> CIN in SEMICOLON .)
    WHILE           reduce using rule 123 (input -> CIN in SEMICOLON .)
    INT             reduce using rule 123 (input -> CIN in SEMICOLON .)
    CHAR            reduce using rule 123 (input -> CIN in SEMICOLON .)
    STRING          reduce using rule 123 (input -> CIN in SEMICOLON .)
    BOOL            reduce using rule 123 (input -> CIN in SEMICOLON .)
    FLOAT           reduce using rule 123 (input -> CIN in SEMICOLON .)
    LONG            reduce using rule 123 (input -> CIN in SEMICOLON .)
    SHORT           reduce using rule 123 (input -> CIN in SEMICOLON .)
    DOUBLE          reduce using rule 123 (input -> CIN in SEMICOLON .)
    FOR             reduce using rule 123 (input -> CIN in SEMICOLON .)
    RETURN          reduce using rule 123 (input -> CIN in SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 123 (input -> CIN in SEMICOLON .)


state 162

    (120) in -> IN VAR .
    (121) in -> IN VAR . in
    (120) in -> . IN VAR
    (121) in -> . IN VAR in

    SEMICOLON       reduce using rule 120 (in -> IN VAR .)
    IN              shift and go to state 138

    in                             shift and go to state 188

state 163

    (44) while_loop -> WHILE LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 189


state 164

    (45) while_loop -> WHILE LEFT_BR bool_value . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (94) value -> bool_value .

    RIGHT_BR        shift and go to state 190
    EQUAL_EQUAL     reduce using rule 94 (value -> bool_value .)
    LESS            reduce using rule 94 (value -> bool_value .)
    LESS_EQUAL      reduce using rule 94 (value -> bool_value .)
    GREATER         reduce using rule 94 (value -> bool_value .)
    GREATER_EQUAL   reduce using rule 94 (value -> bool_value .)
    NOT_EQUAL       reduce using rule 94 (value -> bool_value .)


state 165

    (54) for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (40) instruction -> . print
    (41) instruction -> . input
    (42) instruction -> . comment
    (43) instruction -> . function_call
    (55) loop -> . while_loop
    (56) loop -> . for_loop
    (58) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (105) assignment -> . VAR EQUAL value SEMICOLON
    (106) assignment -> . VAR EQUAL VAR SEMICOLON
    (107) assignment -> . get_array_element EQUAL value SEMICOLON
    (108) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (101) operation -> . increment
    (102) operation -> . decrement
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (122) print -> . COUT out SEMICOLON
    (123) input -> . CIN in SEMICOLON
    (125) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR VAR RIGHT_BR SEMICOLON
    (44) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (54) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (96) increment -> . VAR PLUS_PLUS SEMICOLON
    (97) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 115
    VAR             shift and go to state 100
    RIGHT_BR_CURLY  reduce using rule 126 (empty -> .)
    COUT            shift and go to state 119
    CIN             shift and go to state 120
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 121
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 123

  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! COUT            [ reduce using rule 126 (empty -> .) ]
  ! CIN             [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]

    for_loop_statement             shift and go to state 122
    instructions                   shift and go to state 191
    instruction                    shift and go to state 102
    loop                           shift and go to state 103
    if_statement                   shift and go to state 104
    assignment                     shift and go to state 105
    operation                      shift and go to state 106
    empty                          shift and go to state 107
    var_declaration                shift and go to state 108
    print                          shift and go to state 109
    input                          shift and go to state 110
    comment                        shift and go to state 111
    function_call                  shift and go to state 112
    while_loop                     shift and go to state 113
    for_loop                       shift and go to state 114
    get_array_element              shift and go to state 116
    increment                      shift and go to state 117
    decrement                      shift and go to state 118
    type                           shift and go to state 99
    array_declaration              shift and go to state 73

state 166

    (46) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 192


state 167

    (106) assignment -> VAR EQUAL VAR SEMICOLON .

    IF              reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    COMMENT         reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 106 (assignment -> VAR EQUAL VAR SEMICOLON .)


state 168

    (105) assignment -> VAR EQUAL value SEMICOLON .

    IF              reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    COUT            reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    CIN             reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    COMMENT         reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 105 (assignment -> VAR EQUAL value SEMICOLON .)


state 169

    (25) function_call -> VAR LEFT_BR VAR RIGHT_BR . SEMICOLON

    SEMICOLON       shift and go to state 193


state 170

    (24) function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .

    IF              reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    VAR             reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    COUT            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    CIN             reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    COMMENT         reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    WHILE           reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    INT             reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    CHAR            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    STRING          reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    BOOL            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    FLOAT           reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    LONG            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    SHORT           reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    DOUBLE          reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    FOR             reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    RETURN          reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)


state 171

    (124) returning -> RETURN value SEMICOLON .

    RIGHT_BR_CURLY  reduce using rule 124 (returning -> RETURN value SEMICOLON .)


state 172

    (58) if_statement -> IF LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> IF LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement

    LEFT_BR_CURLY   shift and go to state 194


state 173

    (61) comparisons -> comparison conjunction . comparisons
    (60) comparisons -> . comparison
    (61) comparisons -> . comparison conjunction comparisons
    (62) comparison -> . value comparator value
    (63) comparison -> . value EQUAL_EQUAL EMPTY_TEXT
    (90) value -> . number
    (91) value -> . VAR
    (92) value -> . get_array_element
    (93) value -> . string_value
    (94) value -> . bool_value
    (95) value -> . math_operation
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (84) string_value -> . TEXT
    (85) string_value -> . SIGN
    (88) bool_value -> . TRUE
    (89) bool_value -> . FALSE
    (98) math_operation -> . VAR operator VAR
    (99) math_operation -> . VAR operator number
    (100) math_operation -> . number operator number

    VAR             shift and go to state 151
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    comparison                     shift and go to state 153
    comparisons                    shift and go to state 195
    value                          shift and go to state 154
    number                         shift and go to state 50
    get_array_element              shift and go to state 51
    string_value                   shift and go to state 52
    bool_value                     shift and go to state 53
    math_operation                 shift and go to state 54

state 174

    (82) conjunction -> AND .

    VAR             reduce using rule 82 (conjunction -> AND .)
    INT_NUMBER      reduce using rule 82 (conjunction -> AND .)
    FLOAT_NUMBER    reduce using rule 82 (conjunction -> AND .)
    TEXT            reduce using rule 82 (conjunction -> AND .)
    SIGN            reduce using rule 82 (conjunction -> AND .)
    TRUE            reduce using rule 82 (conjunction -> AND .)
    FALSE           reduce using rule 82 (conjunction -> AND .)


state 175

    (83) conjunction -> OR .

    VAR             reduce using rule 83 (conjunction -> OR .)
    INT_NUMBER      reduce using rule 83 (conjunction -> OR .)
    FLOAT_NUMBER    reduce using rule 83 (conjunction -> OR .)
    TEXT            reduce using rule 83 (conjunction -> OR .)
    SIGN            reduce using rule 83 (conjunction -> OR .)
    TRUE            reduce using rule 83 (conjunction -> OR .)
    FALSE           reduce using rule 83 (conjunction -> OR .)


state 176

    (62) comparison -> value comparator . value
    (90) value -> . number
    (91) value -> . VAR
    (92) value -> . get_array_element
    (93) value -> . string_value
    (94) value -> . bool_value
    (95) value -> . math_operation
    (86) number -> . INT_NUMBER
    (87) number -> . FLOAT_NUMBER
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (84) string_value -> . TEXT
    (85) string_value -> . SIGN
    (88) bool_value -> . TRUE
    (89) bool_value -> . FALSE
    (98) math_operation -> . VAR operator VAR
    (99) math_operation -> . VAR operator number
    (100) math_operation -> . number operator number

    VAR             shift and go to state 151
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58
    TRUE            shift and go to state 59
    FALSE           shift and go to state 60

    value                          shift and go to state 196
    number                         shift and go to state 50
    get_array_element              shift and go to state 51
    string_value                   shift and go to state 52
    bool_value                     shift and go to state 53
    math_operation                 shift and go to state 54

state 177

    (63) comparison -> value EQUAL_EQUAL . EMPTY_TEXT
    (68) comparator -> EQUAL_EQUAL .

    EMPTY_TEXT      shift and go to state 197
    VAR             reduce using rule 68 (comparator -> EQUAL_EQUAL .)
    INT_NUMBER      reduce using rule 68 (comparator -> EQUAL_EQUAL .)
    FLOAT_NUMBER    reduce using rule 68 (comparator -> EQUAL_EQUAL .)
    TEXT            reduce using rule 68 (comparator -> EQUAL_EQUAL .)
    SIGN            reduce using rule 68 (comparator -> EQUAL_EQUAL .)
    TRUE            reduce using rule 68 (comparator -> EQUAL_EQUAL .)
    FALSE           reduce using rule 68 (comparator -> EQUAL_EQUAL .)


state 178

    (64) comparator -> LESS .

    VAR             reduce using rule 64 (comparator -> LESS .)
    INT_NUMBER      reduce using rule 64 (comparator -> LESS .)
    FLOAT_NUMBER    reduce using rule 64 (comparator -> LESS .)
    TEXT            reduce using rule 64 (comparator -> LESS .)
    SIGN            reduce using rule 64 (comparator -> LESS .)
    TRUE            reduce using rule 64 (comparator -> LESS .)
    FALSE           reduce using rule 64 (comparator -> LESS .)


state 179

    (65) comparator -> LESS_EQUAL .

    VAR             reduce using rule 65 (comparator -> LESS_EQUAL .)
    INT_NUMBER      reduce using rule 65 (comparator -> LESS_EQUAL .)
    FLOAT_NUMBER    reduce using rule 65 (comparator -> LESS_EQUAL .)
    TEXT            reduce using rule 65 (comparator -> LESS_EQUAL .)
    SIGN            reduce using rule 65 (comparator -> LESS_EQUAL .)
    TRUE            reduce using rule 65 (comparator -> LESS_EQUAL .)
    FALSE           reduce using rule 65 (comparator -> LESS_EQUAL .)


state 180

    (66) comparator -> GREATER .

    VAR             reduce using rule 66 (comparator -> GREATER .)
    INT_NUMBER      reduce using rule 66 (comparator -> GREATER .)
    FLOAT_NUMBER    reduce using rule 66 (comparator -> GREATER .)
    TEXT            reduce using rule 66 (comparator -> GREATER .)
    SIGN            reduce using rule 66 (comparator -> GREATER .)
    TRUE            reduce using rule 66 (comparator -> GREATER .)
    FALSE           reduce using rule 66 (comparator -> GREATER .)


state 181

    (67) comparator -> GREATER_EQUAL .

    VAR             reduce using rule 67 (comparator -> GREATER_EQUAL .)
    INT_NUMBER      reduce using rule 67 (comparator -> GREATER_EQUAL .)
    FLOAT_NUMBER    reduce using rule 67 (comparator -> GREATER_EQUAL .)
    TEXT            reduce using rule 67 (comparator -> GREATER_EQUAL .)
    SIGN            reduce using rule 67 (comparator -> GREATER_EQUAL .)
    TRUE            reduce using rule 67 (comparator -> GREATER_EQUAL .)
    FALSE           reduce using rule 67 (comparator -> GREATER_EQUAL .)


state 182

    (69) comparator -> NOT_EQUAL .

    VAR             reduce using rule 69 (comparator -> NOT_EQUAL .)
    INT_NUMBER      reduce using rule 69 (comparator -> NOT_EQUAL .)
    FLOAT_NUMBER    reduce using rule 69 (comparator -> NOT_EQUAL .)
    TEXT            reduce using rule 69 (comparator -> NOT_EQUAL .)
    SIGN            reduce using rule 69 (comparator -> NOT_EQUAL .)
    TRUE            reduce using rule 69 (comparator -> NOT_EQUAL .)
    FALSE           reduce using rule 69 (comparator -> NOT_EQUAL .)


state 183

    (107) assignment -> get_array_element EQUAL value SEMICOLON .

    IF              reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    VAR             reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    COUT            reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    CIN             reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    COMMENT         reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    WHILE           reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    INT             reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    CHAR            reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    STRING          reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    BOOL            reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    LONG            reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    SHORT           reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FOR             reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RETURN          reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 107 (assignment -> get_array_element EQUAL value SEMICOLON .)


state 184

    (108) assignment -> get_array_element EQUAL VAR SEMICOLON .

    IF              reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    COMMENT         reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    INT             reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 108 (assignment -> get_array_element EQUAL VAR SEMICOLON .)


state 185

    (115) out -> OUT VAR out .

    SEMICOLON       reduce using rule 115 (out -> OUT VAR out .)


state 186

    (117) out -> OUT TEXT out .

    SEMICOLON       reduce using rule 117 (out -> OUT TEXT out .)


state 187

    (119) out -> OUT ENDL out .

    SEMICOLON       reduce using rule 119 (out -> OUT ENDL out .)


state 188

    (121) in -> IN VAR in .

    SEMICOLON       reduce using rule 121 (in -> IN VAR in .)


state 189

    (44) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 198


state 190

    (45) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 199


state 191

    (54) for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 200


state 192

    (46) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    EQUAL           shift and go to state 201


state 193

    (25) function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .

    IF              reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    VAR             reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    COUT            reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    CIN             reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    COMMENT         reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    WHILE           reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    INT             reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    CHAR            reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    STRING          reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    BOOL            reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    FLOAT           reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    LONG            reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    SHORT           reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    DOUBLE          reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    FOR             reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    RETURN          reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 25 (function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON .)


state 194

    (58) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY else_statement
    (127) change_tab_number -> .

    IF              reduce using rule 127 (change_tab_number -> .)
    VAR             reduce using rule 127 (change_tab_number -> .)
    COUT            reduce using rule 127 (change_tab_number -> .)
    CIN             reduce using rule 127 (change_tab_number -> .)
    COMMENT         reduce using rule 127 (change_tab_number -> .)
    WHILE           reduce using rule 127 (change_tab_number -> .)
    INT             reduce using rule 127 (change_tab_number -> .)
    CHAR            reduce using rule 127 (change_tab_number -> .)
    STRING          reduce using rule 127 (change_tab_number -> .)
    BOOL            reduce using rule 127 (change_tab_number -> .)
    FLOAT           reduce using rule 127 (change_tab_number -> .)
    LONG            reduce using rule 127 (change_tab_number -> .)
    SHORT           reduce using rule 127 (change_tab_number -> .)
    DOUBLE          reduce using rule 127 (change_tab_number -> .)
    FOR             reduce using rule 127 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 127 (change_tab_number -> .)

    change_tab_number              shift and go to state 202

state 195

    (61) comparisons -> comparison conjunction comparisons .

    RIGHT_BR        reduce using rule 61 (comparisons -> comparison conjunction comparisons .)


state 196

    (62) comparison -> value comparator value .

    AND             reduce using rule 62 (comparison -> value comparator value .)
    OR              reduce using rule 62 (comparison -> value comparator value .)
    RIGHT_BR        reduce using rule 62 (comparison -> value comparator value .)


state 197

    (63) comparison -> value EQUAL_EQUAL EMPTY_TEXT .

    AND             reduce using rule 63 (comparison -> value EQUAL_EQUAL EMPTY_TEXT .)
    OR              reduce using rule 63 (comparison -> value EQUAL_EQUAL EMPTY_TEXT .)
    RIGHT_BR        reduce using rule 63 (comparison -> value EQUAL_EQUAL EMPTY_TEXT .)


state 198

    (44) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (127) change_tab_number -> .

    IF              reduce using rule 127 (change_tab_number -> .)
    VAR             reduce using rule 127 (change_tab_number -> .)
    COUT            reduce using rule 127 (change_tab_number -> .)
    CIN             reduce using rule 127 (change_tab_number -> .)
    COMMENT         reduce using rule 127 (change_tab_number -> .)
    WHILE           reduce using rule 127 (change_tab_number -> .)
    INT             reduce using rule 127 (change_tab_number -> .)
    CHAR            reduce using rule 127 (change_tab_number -> .)
    STRING          reduce using rule 127 (change_tab_number -> .)
    BOOL            reduce using rule 127 (change_tab_number -> .)
    FLOAT           reduce using rule 127 (change_tab_number -> .)
    LONG            reduce using rule 127 (change_tab_number -> .)
    SHORT           reduce using rule 127 (change_tab_number -> .)
    DOUBLE          reduce using rule 127 (change_tab_number -> .)
    FOR             reduce using rule 127 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 127 (change_tab_number -> .)

    change_tab_number              shift and go to state 203

state 199

    (45) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (127) change_tab_number -> .

    IF              reduce using rule 127 (change_tab_number -> .)
    VAR             reduce using rule 127 (change_tab_number -> .)
    COUT            reduce using rule 127 (change_tab_number -> .)
    CIN             reduce using rule 127 (change_tab_number -> .)
    COMMENT         reduce using rule 127 (change_tab_number -> .)
    WHILE           reduce using rule 127 (change_tab_number -> .)
    INT             reduce using rule 127 (change_tab_number -> .)
    CHAR            reduce using rule 127 (change_tab_number -> .)
    STRING          reduce using rule 127 (change_tab_number -> .)
    BOOL            reduce using rule 127 (change_tab_number -> .)
    FLOAT           reduce using rule 127 (change_tab_number -> .)
    LONG            reduce using rule 127 (change_tab_number -> .)
    SHORT           reduce using rule 127 (change_tab_number -> .)
    DOUBLE          reduce using rule 127 (change_tab_number -> .)
    FOR             reduce using rule 127 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 127 (change_tab_number -> .)

    change_tab_number              shift and go to state 204

state 200

    (54) for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    IF              reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 54 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 201

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 205


state 202

    (58) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (59) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY else_statement
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (40) instruction -> . print
    (41) instruction -> . input
    (42) instruction -> . comment
    (43) instruction -> . function_call
    (55) loop -> . while_loop
    (56) loop -> . for_loop
    (58) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (105) assignment -> . VAR EQUAL value SEMICOLON
    (106) assignment -> . VAR EQUAL VAR SEMICOLON
    (107) assignment -> . get_array_element EQUAL value SEMICOLON
    (108) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (101) operation -> . increment
    (102) operation -> . decrement
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (122) print -> . COUT out SEMICOLON
    (123) input -> . CIN in SEMICOLON
    (125) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR VAR RIGHT_BR SEMICOLON
    (44) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (54) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (96) increment -> . VAR PLUS_PLUS SEMICOLON
    (97) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 115
    VAR             shift and go to state 100
    RIGHT_BR_CURLY  reduce using rule 126 (empty -> .)
    COUT            shift and go to state 119
    CIN             shift and go to state 120
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 121
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 123

  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! COUT            [ reduce using rule 126 (empty -> .) ]
  ! CIN             [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]

    instructions                   shift and go to state 206
    instruction                    shift and go to state 102
    loop                           shift and go to state 103
    if_statement                   shift and go to state 104
    assignment                     shift and go to state 105
    operation                      shift and go to state 106
    empty                          shift and go to state 107
    var_declaration                shift and go to state 108
    print                          shift and go to state 109
    input                          shift and go to state 110
    comment                        shift and go to state 111
    function_call                  shift and go to state 112
    while_loop                     shift and go to state 113
    for_loop                       shift and go to state 114
    get_array_element              shift and go to state 116
    increment                      shift and go to state 117
    decrement                      shift and go to state 118
    type                           shift and go to state 99
    array_declaration              shift and go to state 73
    for_loop_statement             shift and go to state 122

state 203

    (44) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (40) instruction -> . print
    (41) instruction -> . input
    (42) instruction -> . comment
    (43) instruction -> . function_call
    (55) loop -> . while_loop
    (56) loop -> . for_loop
    (58) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (105) assignment -> . VAR EQUAL value SEMICOLON
    (106) assignment -> . VAR EQUAL VAR SEMICOLON
    (107) assignment -> . get_array_element EQUAL value SEMICOLON
    (108) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (101) operation -> . increment
    (102) operation -> . decrement
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (122) print -> . COUT out SEMICOLON
    (123) input -> . CIN in SEMICOLON
    (125) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR VAR RIGHT_BR SEMICOLON
    (44) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (54) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (96) increment -> . VAR PLUS_PLUS SEMICOLON
    (97) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 115
    VAR             shift and go to state 100
    RIGHT_BR_CURLY  reduce using rule 126 (empty -> .)
    COUT            shift and go to state 119
    CIN             shift and go to state 120
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 121
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 123

  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! COUT            [ reduce using rule 126 (empty -> .) ]
  ! CIN             [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]

    instructions                   shift and go to state 207
    instruction                    shift and go to state 102
    loop                           shift and go to state 103
    if_statement                   shift and go to state 104
    assignment                     shift and go to state 105
    operation                      shift and go to state 106
    empty                          shift and go to state 107
    var_declaration                shift and go to state 108
    print                          shift and go to state 109
    input                          shift and go to state 110
    comment                        shift and go to state 111
    function_call                  shift and go to state 112
    while_loop                     shift and go to state 113
    for_loop                       shift and go to state 114
    get_array_element              shift and go to state 116
    increment                      shift and go to state 117
    decrement                      shift and go to state 118
    type                           shift and go to state 99
    array_declaration              shift and go to state 73
    for_loop_statement             shift and go to state 122

state 204

    (45) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (40) instruction -> . print
    (41) instruction -> . input
    (42) instruction -> . comment
    (43) instruction -> . function_call
    (55) loop -> . while_loop
    (56) loop -> . for_loop
    (58) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (105) assignment -> . VAR EQUAL value SEMICOLON
    (106) assignment -> . VAR EQUAL VAR SEMICOLON
    (107) assignment -> . get_array_element EQUAL value SEMICOLON
    (108) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (101) operation -> . increment
    (102) operation -> . decrement
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (122) print -> . COUT out SEMICOLON
    (123) input -> . CIN in SEMICOLON
    (125) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR VAR RIGHT_BR SEMICOLON
    (44) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (54) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (96) increment -> . VAR PLUS_PLUS SEMICOLON
    (97) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 115
    VAR             shift and go to state 100
    RIGHT_BR_CURLY  reduce using rule 126 (empty -> .)
    COUT            shift and go to state 119
    CIN             shift and go to state 120
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 121
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 123

  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! COUT            [ reduce using rule 126 (empty -> .) ]
  ! CIN             [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]

    instructions                   shift and go to state 208
    instruction                    shift and go to state 102
    loop                           shift and go to state 103
    if_statement                   shift and go to state 104
    assignment                     shift and go to state 105
    operation                      shift and go to state 106
    empty                          shift and go to state 107
    var_declaration                shift and go to state 108
    print                          shift and go to state 109
    input                          shift and go to state 110
    comment                        shift and go to state 111
    function_call                  shift and go to state 112
    while_loop                     shift and go to state 113
    for_loop                       shift and go to state 114
    get_array_element              shift and go to state 116
    increment                      shift and go to state 117
    decrement                      shift and go to state 118
    type                           shift and go to state 99
    array_declaration              shift and go to state 73
    for_loop_statement             shift and go to state 122

state 205

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 209


state 206

    (58) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY
    (59) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY else_statement

    RIGHT_BR_CURLY  shift and go to state 210


state 207

    (44) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 211


state 208

    (45) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 212


state 209

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 213


state 210

    (58) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .
    (59) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY . else_statement
    (57) else_statement -> . ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    IF              reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 58 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    ELSE            shift and go to state 215

    else_statement                 shift and go to state 214

state 211

    (44) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    IF              reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 44 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 212

    (45) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    IF              reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 45 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 213

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LESS            shift and go to state 216
    LESS_EQUAL      shift and go to state 217
    GREATER         shift and go to state 218
    GREATER_EQUAL   shift and go to state 219


state 214

    (59) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .

    IF              reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    VAR             reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    COUT            reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    CIN             reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    COMMENT         reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    WHILE           reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    INT             reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    CHAR            reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    STRING          reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    BOOL            reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    FLOAT           reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    LONG            reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    SHORT           reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    DOUBLE          reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    FOR             reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    RETURN          reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    RIGHT_BR_CURLY  reduce using rule 59 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)


state 215

    (57) else_statement -> ELSE . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 220


state 216

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS . VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 222
    VAR             shift and go to state 221


state 217

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL . VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 224
    VAR             shift and go to state 223


state 218

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER . VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 226
    VAR             shift and go to state 225


state 219

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL . VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 228
    VAR             shift and go to state 227


state 220

    (57) else_statement -> ELSE LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (40) instruction -> . print
    (41) instruction -> . input
    (42) instruction -> . comment
    (43) instruction -> . function_call
    (55) loop -> . while_loop
    (56) loop -> . for_loop
    (58) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (59) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (105) assignment -> . VAR EQUAL value SEMICOLON
    (106) assignment -> . VAR EQUAL VAR SEMICOLON
    (107) assignment -> . get_array_element EQUAL value SEMICOLON
    (108) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (101) operation -> . increment
    (102) operation -> . decrement
    (126) empty -> .
    (109) var_declaration -> . type VAR SEMICOLON
    (110) var_declaration -> . array_declaration
    (111) var_declaration -> . type VAR EQUAL value SEMICOLON
    (112) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (122) print -> . COUT out SEMICOLON
    (123) input -> . CIN in SEMICOLON
    (125) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR VAR RIGHT_BR SEMICOLON
    (44) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (45) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (54) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (103) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (104) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (96) increment -> . VAR PLUS_PLUS SEMICOLON
    (97) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) type -> . INT
    (75) type -> . CHAR
    (76) type -> . STRING
    (77) type -> . BOOL
    (78) type -> . FLOAT
    (79) type -> . LONG
    (80) type -> . SHORT
    (81) type -> . DOUBLE
    (113) array_declaration -> . type get_array_element SEMICOLON
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 115
    VAR             shift and go to state 100
    RIGHT_BR_CURLY  reduce using rule 126 (empty -> .)
    COUT            shift and go to state 119
    CIN             shift and go to state 120
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 121
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 123

  ! IF              [ reduce using rule 126 (empty -> .) ]
  ! VAR             [ reduce using rule 126 (empty -> .) ]
  ! COUT            [ reduce using rule 126 (empty -> .) ]
  ! CIN             [ reduce using rule 126 (empty -> .) ]
  ! COMMENT         [ reduce using rule 126 (empty -> .) ]
  ! WHILE           [ reduce using rule 126 (empty -> .) ]
  ! INT             [ reduce using rule 126 (empty -> .) ]
  ! CHAR            [ reduce using rule 126 (empty -> .) ]
  ! STRING          [ reduce using rule 126 (empty -> .) ]
  ! BOOL            [ reduce using rule 126 (empty -> .) ]
  ! FLOAT           [ reduce using rule 126 (empty -> .) ]
  ! LONG            [ reduce using rule 126 (empty -> .) ]
  ! SHORT           [ reduce using rule 126 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 126 (empty -> .) ]
  ! FOR             [ reduce using rule 126 (empty -> .) ]

    instructions                   shift and go to state 229
    instruction                    shift and go to state 102
    loop                           shift and go to state 103
    if_statement                   shift and go to state 104
    assignment                     shift and go to state 105
    operation                      shift and go to state 106
    empty                          shift and go to state 107
    var_declaration                shift and go to state 108
    print                          shift and go to state 109
    input                          shift and go to state 110
    comment                        shift and go to state 111
    function_call                  shift and go to state 112
    while_loop                     shift and go to state 113
    for_loop                       shift and go to state 114
    get_array_element              shift and go to state 116
    increment                      shift and go to state 117
    decrement                      shift and go to state 118
    type                           shift and go to state 99
    array_declaration              shift and go to state 73
    for_loop_statement             shift and go to state 122

state 221

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 230


state 222

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 231


state 223

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 232


state 224

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 233


state 225

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 234


state 226

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 235


state 227

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 236


state 228

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 237


state 229

    (57) else_statement -> ELSE LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 238


state 230

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 239


state 231

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 240


state 232

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 241


state 233

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 242


state 234

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 243


state 235

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 244


state 236

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 245


state 237

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 246


state 238

    (57) else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 57 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 239

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 247


state 240

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 248


state 241

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 249


state 242

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 250


state 243

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 251


state 244

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 252


state 245

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 253


state 246

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 254


state 247

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 255


state 248

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 256


state 249

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 257


state 250

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 258


state 251

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 259


state 252

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 260


state 253

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 261


state 254

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 262


state 255

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 47 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 256

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 46 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 257

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 49 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 258

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 48 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 259

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 51 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR .)


state 260

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 50 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)


state 261

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 53 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR .)


state 262

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 52 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for HASH in state 0 resolved as shift
WARNING: shift/reduce conflict for USING in state 0 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for LONG in state 0 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 5 resolved as shift
WARNING: shift/reduce conflict for HASH in state 5 resolved as shift
WARNING: shift/reduce conflict for USING in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 5 resolved as shift
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for LONG in state 5 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 5 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 5 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 97 resolved as shift
WARNING: shift/reduce conflict for VAR in state 97 resolved as shift
WARNING: shift/reduce conflict for COUT in state 97 resolved as shift
WARNING: shift/reduce conflict for CIN in state 97 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 97 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 97 resolved as shift
WARNING: shift/reduce conflict for INT in state 97 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 97 resolved as shift
WARNING: shift/reduce conflict for STRING in state 97 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 97 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 97 resolved as shift
WARNING: shift/reduce conflict for LONG in state 97 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 97 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 97 resolved as shift
WARNING: shift/reduce conflict for FOR in state 97 resolved as shift
WARNING: shift/reduce conflict for IF in state 98 resolved as shift
WARNING: shift/reduce conflict for VAR in state 98 resolved as shift
WARNING: shift/reduce conflict for COUT in state 98 resolved as shift
WARNING: shift/reduce conflict for CIN in state 98 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 98 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 98 resolved as shift
WARNING: shift/reduce conflict for INT in state 98 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 98 resolved as shift
WARNING: shift/reduce conflict for STRING in state 98 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 98 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 98 resolved as shift
WARNING: shift/reduce conflict for LONG in state 98 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 98 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 98 resolved as shift
WARNING: shift/reduce conflict for FOR in state 98 resolved as shift
WARNING: shift/reduce conflict for IF in state 102 resolved as shift
WARNING: shift/reduce conflict for VAR in state 102 resolved as shift
WARNING: shift/reduce conflict for COUT in state 102 resolved as shift
WARNING: shift/reduce conflict for CIN in state 102 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 102 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 102 resolved as shift
WARNING: shift/reduce conflict for INT in state 102 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 102 resolved as shift
WARNING: shift/reduce conflict for STRING in state 102 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 102 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 102 resolved as shift
WARNING: shift/reduce conflict for LONG in state 102 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 102 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 102 resolved as shift
WARNING: shift/reduce conflict for FOR in state 102 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 143 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 165 resolved as shift
WARNING: shift/reduce conflict for VAR in state 165 resolved as shift
WARNING: shift/reduce conflict for COUT in state 165 resolved as shift
WARNING: shift/reduce conflict for CIN in state 165 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 165 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 165 resolved as shift
WARNING: shift/reduce conflict for INT in state 165 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 165 resolved as shift
WARNING: shift/reduce conflict for STRING in state 165 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 165 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 165 resolved as shift
WARNING: shift/reduce conflict for LONG in state 165 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 165 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 165 resolved as shift
WARNING: shift/reduce conflict for FOR in state 165 resolved as shift
WARNING: shift/reduce conflict for IF in state 202 resolved as shift
WARNING: shift/reduce conflict for VAR in state 202 resolved as shift
WARNING: shift/reduce conflict for COUT in state 202 resolved as shift
WARNING: shift/reduce conflict for CIN in state 202 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 202 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 202 resolved as shift
WARNING: shift/reduce conflict for INT in state 202 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 202 resolved as shift
WARNING: shift/reduce conflict for STRING in state 202 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 202 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 202 resolved as shift
WARNING: shift/reduce conflict for LONG in state 202 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 202 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 202 resolved as shift
WARNING: shift/reduce conflict for FOR in state 202 resolved as shift
WARNING: shift/reduce conflict for IF in state 203 resolved as shift
WARNING: shift/reduce conflict for VAR in state 203 resolved as shift
WARNING: shift/reduce conflict for COUT in state 203 resolved as shift
WARNING: shift/reduce conflict for CIN in state 203 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 203 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 203 resolved as shift
WARNING: shift/reduce conflict for INT in state 203 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 203 resolved as shift
WARNING: shift/reduce conflict for STRING in state 203 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 203 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 203 resolved as shift
WARNING: shift/reduce conflict for LONG in state 203 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 203 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 203 resolved as shift
WARNING: shift/reduce conflict for FOR in state 203 resolved as shift
WARNING: shift/reduce conflict for IF in state 204 resolved as shift
WARNING: shift/reduce conflict for VAR in state 204 resolved as shift
WARNING: shift/reduce conflict for COUT in state 204 resolved as shift
WARNING: shift/reduce conflict for CIN in state 204 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 204 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 204 resolved as shift
WARNING: shift/reduce conflict for INT in state 204 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 204 resolved as shift
WARNING: shift/reduce conflict for STRING in state 204 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 204 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 204 resolved as shift
WARNING: shift/reduce conflict for LONG in state 204 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 204 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 204 resolved as shift
WARNING: shift/reduce conflict for FOR in state 204 resolved as shift
WARNING: shift/reduce conflict for IF in state 220 resolved as shift
WARNING: shift/reduce conflict for VAR in state 220 resolved as shift
WARNING: shift/reduce conflict for COUT in state 220 resolved as shift
WARNING: shift/reduce conflict for CIN in state 220 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 220 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 220 resolved as shift
WARNING: shift/reduce conflict for INT in state 220 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 220 resolved as shift
WARNING: shift/reduce conflict for STRING in state 220 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 220 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 220 resolved as shift
WARNING: shift/reduce conflict for LONG in state 220 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 220 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 220 resolved as shift
WARNING: shift/reduce conflict for FOR in state 220 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> empty)
WARNING: rejected rule (program_component -> empty) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (program_components -> program_component)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 11 resolved using rule (program_component -> array_declaration)
WARNING: rejected rule (var_declaration -> array_declaration) in state 11
WARNING: reduce/reduce conflict in state 69 resolved using rule (class_declarations -> class_declaration)
WARNING: rejected rule (empty -> <empty>) in state 69
WARNING: reduce/reduce conflict in state 102 resolved using rule (instructions -> instruction)
WARNING: rejected rule (empty -> <empty>) in state 102
