Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CIN
    COMMENT
    COUT
    DOUBLE
    ELSE
    ENDL
    FALSE
    ID
    IN
    OUT
    TRUE

Grammar

Rule 0     S' -> start_symbol
Rule 1     start_symbol -> program
Rule 2     program -> program_components
Rule 3     program -> empty
Rule 4     program_components -> program_component
Rule 5     program_components -> program_component program_components
Rule 6     program_components -> using_namespace_std program_components
Rule 7     program_components -> empty
Rule 8     program_component -> function_definition
Rule 9     program_component -> class_definition
Rule 10    program_component -> including
Rule 11    program_component -> var_declaration
Rule 12    program_component -> array_declaration
Rule 13    program_component -> empty
Rule 14    using_namespace_std -> USING NAMESPACE STD SEMICOLON
Rule 15    including -> HASH INCLUDE LIBRARY
Rule 16    function_definition -> type_function_definition
Rule 17    function_definition -> void_function_definition
Rule 18    type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
Rule 19    void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 20    function_var_declaration -> type VAR
Rule 21    function_var_declaration -> type VAR COMMA function_var_declaration
Rule 22    function_var_declaration -> empty
Rule 23    class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
Rule 24    protection_level -> PUBLIC COLON
Rule 25    protection_level -> PRIVATE COLON
Rule 26    protection_level -> PROTECTED COLON
Rule 27    protection_level -> empty
Rule 28    class_declaration -> var_declaration
Rule 29    class_declaration -> function_definition
Rule 30    class_declarations -> class_declaration
Rule 31    class_declarations -> class_declaration class_declarations
Rule 32    instructions -> instruction
Rule 33    instructions -> instruction instructions
Rule 34    instruction -> loop
Rule 35    instruction -> if_statement
Rule 36    instruction -> assignment
Rule 37    instruction -> operation
Rule 38    instruction -> empty
Rule 39    instruction -> var_declaration
Rule 40    while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 41    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 42    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 43    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 44    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 45    for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 46    loop -> while_loop
Rule 47    loop -> for_loop
Rule 48    if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 49    comparisons -> comparison
Rule 50    comparisons -> comparison conjunction comparisons
Rule 51    comparator -> LESS
Rule 52    comparator -> LESS_EQUAL
Rule 53    comparator -> GREATER
Rule 54    comparator -> GREATER_EQUAL
Rule 55    comparator -> EQUAL_EQUAL
Rule 56    comparator -> NOT_EQUAL
Rule 57    operator -> PLUS
Rule 58    operator -> MINUS
Rule 59    operator -> MULTIPLY
Rule 60    operator -> DIVIDE
Rule 61    type -> INT
Rule 62    type -> CHAR
Rule 63    type -> STRING
Rule 64    type -> BOOL
Rule 65    type -> FLOAT
Rule 66    type -> LONG
Rule 67    type -> SHORT
Rule 68    conjunction -> AND
Rule 69    conjunction -> OR
Rule 70    string_value -> TEXT
Rule 71    string_value -> SIGN
Rule 72    number -> INT_NUMBER
Rule 73    number -> FLOAT_NUMBER
Rule 74    value -> number
Rule 75    value -> VAR
Rule 76    value -> get_array_element
Rule 77    value -> string_value
Rule 78    increment -> VAR PLUS_PLUS SEMICOLON
Rule 79    decrement -> VAR MINUS_MINUS SEMICOLON
Rule 80    get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
Rule 81    operation -> increment
Rule 82    operation -> decrement
Rule 83    operation -> value operator value SEMICOLON
Rule 84    assignment -> VAR EQUAL value SEMICOLON
Rule 85    assignment -> VAR EQUAL VAR SEMICOLON
Rule 86    assignment -> get_array_element EQUAL value SEMICOLON
Rule 87    assignment -> get_array_element EQUAL VAR SEMICOLON
Rule 88    var_declaration -> type VAR SEMICOLON
Rule 89    var_declaration -> array_declaration
Rule 90    var_declaration -> type VAR EQUAL value SEMICOLON
Rule 91    var_declaration -> type VAR EQUAL VAR SEMICOLON
Rule 92    array_declaration -> type get_array_element SEMICOLON
Rule 93    comparison -> value comparator value
Rule 94    returning -> RETURN value SEMICOLON
Rule 95    empty -> <empty>

Terminals, with rules where they appear

AND                  : 68
BOOL                 : 64
BREAK                : 
CHAR                 : 62
CIN                  : 
CLASS                : 23
COLON                : 24 25 26
COMMA                : 21
COMMENT              : 
COUT                 : 
DIVIDE               : 60
DOUBLE               : 
ELSE                 : 
ENDL                 : 
EQUAL                : 41 42 43 44 84 85 86 87 90 91
EQUAL_EQUAL          : 55
FALSE                : 
FLOAT                : 65
FLOAT_NUMBER         : 73
FOR                  : 41 42 43 44
GREATER              : 43 53
GREATER_EQUAL        : 44 54
HASH                 : 15
ID                   : 
IF                   : 48
IN                   : 
INCLUDE              : 15
INT                  : 41 42 43 44 61
INT_NUMBER           : 41 41 42 42 43 43 44 44 72 80
LEFT_BR              : 18 19 40 41 42 43 44 48
LEFT_BR_CURLY        : 18 19 23 40 45 48
LEFT_BR_SQUARED      : 80
LESS                 : 41 51
LESS_EQUAL           : 42 52
LIBRARY              : 15
LONG                 : 66
MINUS                : 58
MINUS_MINUS          : 43 44 79
MULTIPLY             : 59
NAMESPACE            : 14
NOT_EQUAL            : 56
OR                   : 69
OUT                  : 
PLUS                 : 57
PLUS_PLUS            : 41 42 78
PRIVATE              : 25
PROTECTED            : 26
PUBLIC               : 24
RETURN               : 94
RIGHT_BR             : 18 19 40 41 42 43 44 48
RIGHT_BR_CURLY       : 18 19 23 40 45 48
RIGHT_BR_SQUARED     : 80
SEMICOLON            : 14 23 41 41 42 42 43 43 44 44 78 79 83 84 85 86 87 88 90 91 92 94
SHORT                : 67
SIGN                 : 71
STD                  : 14
STRING               : 23 63
TEXT                 : 70
TRUE                 : 
USING                : 14
VAR                  : 18 19 20 21 41 41 41 42 42 42 43 43 43 44 44 44 75 78 79 80 84 85 85 87 88 90 91 91
VOID                 : 19
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

array_declaration    : 12 89
assignment           : 36
class_declaration    : 30 31
class_declarations   : 23 31
class_definition     : 9
comparator           : 93
comparison           : 49 50
comparisons          : 40 48 50
conjunction          : 50
decrement            : 82
empty                : 3 7 13 22 27 38
for_loop             : 47
for_loop_statement   : 45
function_definition  : 8 29
function_var_declaration : 18 19 21
get_array_element    : 76 86 87 92
if_statement         : 35
including            : 10
increment            : 81
instruction          : 32 33
instructions         : 18 19 33 40 45 48
loop                 : 34
number               : 74
operation            : 37
operator             : 83
program              : 1
program_component    : 4 5
program_components   : 2 5 6
protection_level     : 23
returning            : 18
start_symbol         : 0
string_value         : 77
type                 : 18 20 21 88 90 91 92
type_function_definition : 16
using_namespace_std  : 6
value                : 83 83 84 86 90 93 93 94
var_declaration      : 11 28 39
void_function_definition : 17
while_loop           : 46

Parsing method: LALR

state 0

    (0) S' -> . start_symbol
    (1) start_symbol -> . program
    (2) program -> . program_components
    (3) program -> . empty
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_components -> . using_namespace_std program_components
    (7) program_components -> . empty
    (95) empty -> .
    (8) program_component -> . function_definition
    (9) program_component -> . class_definition
    (10) program_component -> . including
    (11) program_component -> . var_declaration
    (12) program_component -> . array_declaration
    (13) program_component -> . empty
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (23) class_definition -> . CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (92) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT

  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
    $end            reduce using rule 95 (empty -> .)
    USING           shift and go to state 12
    CLASS           shift and go to state 15
    HASH            shift and go to state 17
    VOID            shift and go to state 19
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25

  ! USING           [ reduce using rule 95 (empty -> .) ]
  ! CLASS           [ reduce using rule 95 (empty -> .) ]
  ! HASH            [ reduce using rule 95 (empty -> .) ]
  ! VOID            [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! STRING          [ reduce using rule 95 (empty -> .) ]
  ! BOOL            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]

    start_symbol                   shift and go to state 1
    program                        shift and go to state 2
    program_components             shift and go to state 3
    empty                          shift and go to state 4
    program_component              shift and go to state 5
    using_namespace_std            shift and go to state 6
    function_definition            shift and go to state 7
    class_definition               shift and go to state 8
    including                      shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 18

state 1

    (0) S' -> start_symbol .



state 2

    (1) start_symbol -> program .

    $end            reduce using rule 1 (start_symbol -> program .)


state 3

    (2) program -> program_components .

    $end            reduce using rule 2 (program -> program_components .)


state 4

    (3) program -> empty .
    (7) program_components -> empty .
    (13) program_component -> empty .

  ! reduce/reduce conflict for $end resolved using rule 3 (program -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 3 (program -> empty .)
    $end            reduce using rule 3 (program -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)

  ! $end            [ reduce using rule 7 (program_components -> empty .) ]
  ! $end            [ reduce using rule 13 (program_component -> empty .) ]


state 5

    (4) program_components -> program_component .
    (5) program_components -> program_component . program_components
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_components -> . using_namespace_std program_components
    (7) program_components -> . empty
    (8) program_component -> . function_definition
    (9) program_component -> . class_definition
    (10) program_component -> . including
    (11) program_component -> . var_declaration
    (12) program_component -> . array_declaration
    (13) program_component -> . empty
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (95) empty -> .
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (23) class_definition -> . CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (92) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT

  ! reduce/reduce conflict for $end resolved using rule 4 (program_components -> program_component .)
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
    $end            reduce using rule 4 (program_components -> program_component .)
    USING           shift and go to state 12
    CLASS           shift and go to state 15
    HASH            shift and go to state 17
    VOID            shift and go to state 19
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25

  ! $end            [ reduce using rule 95 (empty -> .) ]
  ! USING           [ reduce using rule 95 (empty -> .) ]
  ! CLASS           [ reduce using rule 95 (empty -> .) ]
  ! HASH            [ reduce using rule 95 (empty -> .) ]
  ! VOID            [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! STRING          [ reduce using rule 95 (empty -> .) ]
  ! BOOL            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]

    program_component              shift and go to state 5
    program_components             shift and go to state 26
    using_namespace_std            shift and go to state 6
    empty                          shift and go to state 27
    function_definition            shift and go to state 7
    class_definition               shift and go to state 8
    including                      shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 18

state 6

    (6) program_components -> using_namespace_std . program_components
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_components -> . using_namespace_std program_components
    (7) program_components -> . empty
    (8) program_component -> . function_definition
    (9) program_component -> . class_definition
    (10) program_component -> . including
    (11) program_component -> . var_declaration
    (12) program_component -> . array_declaration
    (13) program_component -> . empty
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (95) empty -> .
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (23) class_definition -> . CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (92) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT

  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
    USING           shift and go to state 12
    $end            reduce using rule 95 (empty -> .)
    CLASS           shift and go to state 15
    HASH            shift and go to state 17
    VOID            shift and go to state 19
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25

  ! USING           [ reduce using rule 95 (empty -> .) ]
  ! CLASS           [ reduce using rule 95 (empty -> .) ]
  ! HASH            [ reduce using rule 95 (empty -> .) ]
  ! VOID            [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! STRING          [ reduce using rule 95 (empty -> .) ]
  ! BOOL            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]

    using_namespace_std            shift and go to state 6
    program_components             shift and go to state 28
    program_component              shift and go to state 5
    empty                          shift and go to state 27
    function_definition            shift and go to state 7
    class_definition               shift and go to state 8
    including                      shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 18

state 7

    (8) program_component -> function_definition .

    USING           reduce using rule 8 (program_component -> function_definition .)
    CLASS           reduce using rule 8 (program_component -> function_definition .)
    HASH            reduce using rule 8 (program_component -> function_definition .)
    VOID            reduce using rule 8 (program_component -> function_definition .)
    INT             reduce using rule 8 (program_component -> function_definition .)
    CHAR            reduce using rule 8 (program_component -> function_definition .)
    STRING          reduce using rule 8 (program_component -> function_definition .)
    BOOL            reduce using rule 8 (program_component -> function_definition .)
    FLOAT           reduce using rule 8 (program_component -> function_definition .)
    LONG            reduce using rule 8 (program_component -> function_definition .)
    SHORT           reduce using rule 8 (program_component -> function_definition .)
    $end            reduce using rule 8 (program_component -> function_definition .)


state 8

    (9) program_component -> class_definition .

    USING           reduce using rule 9 (program_component -> class_definition .)
    CLASS           reduce using rule 9 (program_component -> class_definition .)
    HASH            reduce using rule 9 (program_component -> class_definition .)
    VOID            reduce using rule 9 (program_component -> class_definition .)
    INT             reduce using rule 9 (program_component -> class_definition .)
    CHAR            reduce using rule 9 (program_component -> class_definition .)
    STRING          reduce using rule 9 (program_component -> class_definition .)
    BOOL            reduce using rule 9 (program_component -> class_definition .)
    FLOAT           reduce using rule 9 (program_component -> class_definition .)
    LONG            reduce using rule 9 (program_component -> class_definition .)
    SHORT           reduce using rule 9 (program_component -> class_definition .)
    $end            reduce using rule 9 (program_component -> class_definition .)


state 9

    (10) program_component -> including .

    USING           reduce using rule 10 (program_component -> including .)
    CLASS           reduce using rule 10 (program_component -> including .)
    HASH            reduce using rule 10 (program_component -> including .)
    VOID            reduce using rule 10 (program_component -> including .)
    INT             reduce using rule 10 (program_component -> including .)
    CHAR            reduce using rule 10 (program_component -> including .)
    STRING          reduce using rule 10 (program_component -> including .)
    BOOL            reduce using rule 10 (program_component -> including .)
    FLOAT           reduce using rule 10 (program_component -> including .)
    LONG            reduce using rule 10 (program_component -> including .)
    SHORT           reduce using rule 10 (program_component -> including .)
    $end            reduce using rule 10 (program_component -> including .)


state 10

    (11) program_component -> var_declaration .

    USING           reduce using rule 11 (program_component -> var_declaration .)
    CLASS           reduce using rule 11 (program_component -> var_declaration .)
    HASH            reduce using rule 11 (program_component -> var_declaration .)
    VOID            reduce using rule 11 (program_component -> var_declaration .)
    INT             reduce using rule 11 (program_component -> var_declaration .)
    CHAR            reduce using rule 11 (program_component -> var_declaration .)
    STRING          reduce using rule 11 (program_component -> var_declaration .)
    BOOL            reduce using rule 11 (program_component -> var_declaration .)
    FLOAT           reduce using rule 11 (program_component -> var_declaration .)
    LONG            reduce using rule 11 (program_component -> var_declaration .)
    SHORT           reduce using rule 11 (program_component -> var_declaration .)
    $end            reduce using rule 11 (program_component -> var_declaration .)


state 11

    (12) program_component -> array_declaration .
    (89) var_declaration -> array_declaration .

  ! reduce/reduce conflict for USING resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for CLASS resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for HASH resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for VOID resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for INT resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for CHAR resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for STRING resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for BOOL resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for FLOAT resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for LONG resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for SHORT resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for $end resolved using rule 12 (program_component -> array_declaration .)
    USING           reduce using rule 12 (program_component -> array_declaration .)
    CLASS           reduce using rule 12 (program_component -> array_declaration .)
    HASH            reduce using rule 12 (program_component -> array_declaration .)
    VOID            reduce using rule 12 (program_component -> array_declaration .)
    INT             reduce using rule 12 (program_component -> array_declaration .)
    CHAR            reduce using rule 12 (program_component -> array_declaration .)
    STRING          reduce using rule 12 (program_component -> array_declaration .)
    BOOL            reduce using rule 12 (program_component -> array_declaration .)
    FLOAT           reduce using rule 12 (program_component -> array_declaration .)
    LONG            reduce using rule 12 (program_component -> array_declaration .)
    SHORT           reduce using rule 12 (program_component -> array_declaration .)
    $end            reduce using rule 12 (program_component -> array_declaration .)

  ! USING           [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! CLASS           [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! HASH            [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! VOID            [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! INT             [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! CHAR            [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! STRING          [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! BOOL            [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! FLOAT           [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! LONG            [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! SHORT           [ reduce using rule 89 (var_declaration -> array_declaration .) ]
  ! $end            [ reduce using rule 89 (var_declaration -> array_declaration .) ]


state 12

    (14) using_namespace_std -> USING . NAMESPACE STD SEMICOLON

    NAMESPACE       shift and go to state 29


state 13

    (16) function_definition -> type_function_definition .

    USING           reduce using rule 16 (function_definition -> type_function_definition .)
    CLASS           reduce using rule 16 (function_definition -> type_function_definition .)
    HASH            reduce using rule 16 (function_definition -> type_function_definition .)
    VOID            reduce using rule 16 (function_definition -> type_function_definition .)
    INT             reduce using rule 16 (function_definition -> type_function_definition .)
    CHAR            reduce using rule 16 (function_definition -> type_function_definition .)
    STRING          reduce using rule 16 (function_definition -> type_function_definition .)
    BOOL            reduce using rule 16 (function_definition -> type_function_definition .)
    FLOAT           reduce using rule 16 (function_definition -> type_function_definition .)
    LONG            reduce using rule 16 (function_definition -> type_function_definition .)
    SHORT           reduce using rule 16 (function_definition -> type_function_definition .)
    $end            reduce using rule 16 (function_definition -> type_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 16 (function_definition -> type_function_definition .)


state 14

    (17) function_definition -> void_function_definition .

    USING           reduce using rule 17 (function_definition -> void_function_definition .)
    CLASS           reduce using rule 17 (function_definition -> void_function_definition .)
    HASH            reduce using rule 17 (function_definition -> void_function_definition .)
    VOID            reduce using rule 17 (function_definition -> void_function_definition .)
    INT             reduce using rule 17 (function_definition -> void_function_definition .)
    CHAR            reduce using rule 17 (function_definition -> void_function_definition .)
    STRING          reduce using rule 17 (function_definition -> void_function_definition .)
    BOOL            reduce using rule 17 (function_definition -> void_function_definition .)
    FLOAT           reduce using rule 17 (function_definition -> void_function_definition .)
    LONG            reduce using rule 17 (function_definition -> void_function_definition .)
    SHORT           reduce using rule 17 (function_definition -> void_function_definition .)
    $end            reduce using rule 17 (function_definition -> void_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 17 (function_definition -> void_function_definition .)


state 15

    (23) class_definition -> CLASS . STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON

    STRING          shift and go to state 30


state 16

    (63) type -> STRING .

    VAR             reduce using rule 63 (type -> STRING .)


state 17

    (15) including -> HASH . INCLUDE LIBRARY

    INCLUDE         shift and go to state 31


state 18

    (88) var_declaration -> type . VAR SEMICOLON
    (90) var_declaration -> type . VAR EQUAL value SEMICOLON
    (91) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (92) array_declaration -> type . get_array_element SEMICOLON
    (18) type_function_definition -> type . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    VAR             shift and go to state 32

    get_array_element              shift and go to state 33

state 19

    (19) void_function_definition -> VOID . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    VAR             shift and go to state 34


state 20

    (61) type -> INT .

    VAR             reduce using rule 61 (type -> INT .)


state 21

    (62) type -> CHAR .

    VAR             reduce using rule 62 (type -> CHAR .)


state 22

    (64) type -> BOOL .

    VAR             reduce using rule 64 (type -> BOOL .)


state 23

    (65) type -> FLOAT .

    VAR             reduce using rule 65 (type -> FLOAT .)


state 24

    (66) type -> LONG .

    VAR             reduce using rule 66 (type -> LONG .)


state 25

    (67) type -> SHORT .

    VAR             reduce using rule 67 (type -> SHORT .)


state 26

    (5) program_components -> program_component program_components .

    $end            reduce using rule 5 (program_components -> program_component program_components .)


state 27

    (7) program_components -> empty .
    (13) program_component -> empty .

  ! reduce/reduce conflict for $end resolved using rule 7 (program_components -> empty .)
    $end            reduce using rule 7 (program_components -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)

  ! $end            [ reduce using rule 13 (program_component -> empty .) ]


state 28

    (6) program_components -> using_namespace_std program_components .

    $end            reduce using rule 6 (program_components -> using_namespace_std program_components .)


state 29

    (14) using_namespace_std -> USING NAMESPACE . STD SEMICOLON

    STD             shift and go to state 35


state 30

    (23) class_definition -> CLASS STRING . LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON

    LEFT_BR_CURLY   shift and go to state 36


state 31

    (15) including -> HASH INCLUDE . LIBRARY

    LIBRARY         shift and go to state 37


state 32

    (88) var_declaration -> type VAR . SEMICOLON
    (90) var_declaration -> type VAR . EQUAL value SEMICOLON
    (91) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (18) type_function_definition -> type VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (80) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 38
    EQUAL           shift and go to state 39
    LEFT_BR         shift and go to state 40
    LEFT_BR_SQUARED shift and go to state 41


state 33

    (92) array_declaration -> type get_array_element . SEMICOLON

    SEMICOLON       shift and go to state 42


state 34

    (19) void_function_definition -> VOID VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 43


state 35

    (14) using_namespace_std -> USING NAMESPACE STD . SEMICOLON

    SEMICOLON       shift and go to state 44


state 36

    (23) class_definition -> CLASS STRING LEFT_BR_CURLY . protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
    (24) protection_level -> . PUBLIC COLON
    (25) protection_level -> . PRIVATE COLON
    (26) protection_level -> . PROTECTED COLON
    (27) protection_level -> . empty
    (95) empty -> .

    PUBLIC          shift and go to state 46
    PRIVATE         shift and go to state 47
    PROTECTED       shift and go to state 48
    INT             reduce using rule 95 (empty -> .)
    CHAR            reduce using rule 95 (empty -> .)
    STRING          reduce using rule 95 (empty -> .)
    BOOL            reduce using rule 95 (empty -> .)
    FLOAT           reduce using rule 95 (empty -> .)
    LONG            reduce using rule 95 (empty -> .)
    SHORT           reduce using rule 95 (empty -> .)
    VOID            reduce using rule 95 (empty -> .)

    protection_level               shift and go to state 45
    empty                          shift and go to state 49

state 37

    (15) including -> HASH INCLUDE LIBRARY .

    USING           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    CLASS           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    HASH            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    VOID            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    INT             reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    CHAR            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    STRING          reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    BOOL            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    FLOAT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    LONG            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    SHORT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    $end            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)


state 38

    (88) var_declaration -> type VAR SEMICOLON .

    USING           reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    CLASS           reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    HASH            reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    VOID            reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    INT             reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    CHAR            reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    STRING          reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    BOOL            reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    FLOAT           reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    LONG            reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    SHORT           reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    $end            reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    IF              reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    VAR             reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    WHILE           reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    FOR             reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    TEXT            reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    SIGN            reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)
    RETURN          reduce using rule 88 (var_declaration -> type VAR SEMICOLON .)


state 39

    (90) var_declaration -> type VAR EQUAL . value SEMICOLON
    (91) var_declaration -> type VAR EQUAL . VAR SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

    VAR             shift and go to state 50
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    value                          shift and go to state 51
    number                         shift and go to state 52
    get_array_element              shift and go to state 53
    string_value                   shift and go to state 54

state 40

    (18) type_function_definition -> type VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (20) function_var_declaration -> . type VAR
    (21) function_var_declaration -> . type VAR COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (95) empty -> .

    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    RIGHT_BR        reduce using rule 95 (empty -> .)

    type                           shift and go to state 59
    function_var_declaration       shift and go to state 60
    empty                          shift and go to state 61

state 41

    (80) get_array_element -> VAR LEFT_BR_SQUARED . INT_NUMBER RIGHT_BR_SQUARED

    INT_NUMBER      shift and go to state 62


state 42

    (92) array_declaration -> type get_array_element SEMICOLON .

    USING           reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    CLASS           reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    HASH            reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    VOID            reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    INT             reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    CHAR            reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    STRING          reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    BOOL            reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT           reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    LONG            reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    SHORT           reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    $end            reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    IF              reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    VAR             reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    WHILE           reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    FOR             reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    INT_NUMBER      reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    TEXT            reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    SIGN            reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)
    RETURN          reduce using rule 92 (array_declaration -> type get_array_element SEMICOLON .)


state 43

    (19) void_function_definition -> VOID VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (20) function_var_declaration -> . type VAR
    (21) function_var_declaration -> . type VAR COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (95) empty -> .

    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    RIGHT_BR        reduce using rule 95 (empty -> .)

    function_var_declaration       shift and go to state 63
    type                           shift and go to state 59
    empty                          shift and go to state 61

state 44

    (14) using_namespace_std -> USING NAMESPACE STD SEMICOLON .

    USING           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    CLASS           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    HASH            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    VOID            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    INT             reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    CHAR            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    STRING          reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    BOOL            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    FLOAT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    LONG            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    SHORT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    $end            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)


state 45

    (23) class_definition -> CLASS STRING LEFT_BR_CURLY protection_level . class_declarations RIGHT_BR_CURLY SEMICOLON
    (30) class_declarations -> . class_declaration
    (31) class_declarations -> . class_declaration class_declarations
    (28) class_declaration -> . var_declaration
    (29) class_declaration -> . function_definition
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (92) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    VOID            shift and go to state 19

    class_declarations             shift and go to state 64
    class_declaration              shift and go to state 65
    var_declaration                shift and go to state 66
    function_definition            shift and go to state 67
    type                           shift and go to state 18
    array_declaration              shift and go to state 68
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 46

    (24) protection_level -> PUBLIC . COLON

    COLON           shift and go to state 69


state 47

    (25) protection_level -> PRIVATE . COLON

    COLON           shift and go to state 70


state 48

    (26) protection_level -> PROTECTED . COLON

    COLON           shift and go to state 71


state 49

    (27) protection_level -> empty .

    INT             reduce using rule 27 (protection_level -> empty .)
    CHAR            reduce using rule 27 (protection_level -> empty .)
    STRING          reduce using rule 27 (protection_level -> empty .)
    BOOL            reduce using rule 27 (protection_level -> empty .)
    FLOAT           reduce using rule 27 (protection_level -> empty .)
    LONG            reduce using rule 27 (protection_level -> empty .)
    SHORT           reduce using rule 27 (protection_level -> empty .)
    VOID            reduce using rule 27 (protection_level -> empty .)


state 50

    (91) var_declaration -> type VAR EQUAL VAR . SEMICOLON
    (75) value -> VAR .
    (80) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 72
    LEFT_BR_SQUARED shift and go to state 41

  ! SEMICOLON       [ reduce using rule 75 (value -> VAR .) ]


state 51

    (90) var_declaration -> type VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 73


state 52

    (74) value -> number .

    SEMICOLON       reduce using rule 74 (value -> number .)
    PLUS            reduce using rule 74 (value -> number .)
    MINUS           reduce using rule 74 (value -> number .)
    MULTIPLY        reduce using rule 74 (value -> number .)
    DIVIDE          reduce using rule 74 (value -> number .)
    LESS            reduce using rule 74 (value -> number .)
    LESS_EQUAL      reduce using rule 74 (value -> number .)
    GREATER         reduce using rule 74 (value -> number .)
    GREATER_EQUAL   reduce using rule 74 (value -> number .)
    EQUAL_EQUAL     reduce using rule 74 (value -> number .)
    NOT_EQUAL       reduce using rule 74 (value -> number .)
    AND             reduce using rule 74 (value -> number .)
    OR              reduce using rule 74 (value -> number .)
    RIGHT_BR        reduce using rule 74 (value -> number .)


state 53

    (76) value -> get_array_element .

    SEMICOLON       reduce using rule 76 (value -> get_array_element .)
    LESS            reduce using rule 76 (value -> get_array_element .)
    LESS_EQUAL      reduce using rule 76 (value -> get_array_element .)
    GREATER         reduce using rule 76 (value -> get_array_element .)
    GREATER_EQUAL   reduce using rule 76 (value -> get_array_element .)
    EQUAL_EQUAL     reduce using rule 76 (value -> get_array_element .)
    NOT_EQUAL       reduce using rule 76 (value -> get_array_element .)
    AND             reduce using rule 76 (value -> get_array_element .)
    OR              reduce using rule 76 (value -> get_array_element .)
    RIGHT_BR        reduce using rule 76 (value -> get_array_element .)


state 54

    (77) value -> string_value .

    SEMICOLON       reduce using rule 77 (value -> string_value .)
    PLUS            reduce using rule 77 (value -> string_value .)
    MINUS           reduce using rule 77 (value -> string_value .)
    MULTIPLY        reduce using rule 77 (value -> string_value .)
    DIVIDE          reduce using rule 77 (value -> string_value .)
    LESS            reduce using rule 77 (value -> string_value .)
    LESS_EQUAL      reduce using rule 77 (value -> string_value .)
    GREATER         reduce using rule 77 (value -> string_value .)
    GREATER_EQUAL   reduce using rule 77 (value -> string_value .)
    EQUAL_EQUAL     reduce using rule 77 (value -> string_value .)
    NOT_EQUAL       reduce using rule 77 (value -> string_value .)
    AND             reduce using rule 77 (value -> string_value .)
    OR              reduce using rule 77 (value -> string_value .)
    RIGHT_BR        reduce using rule 77 (value -> string_value .)


state 55

    (72) number -> INT_NUMBER .

    SEMICOLON       reduce using rule 72 (number -> INT_NUMBER .)
    PLUS            reduce using rule 72 (number -> INT_NUMBER .)
    MINUS           reduce using rule 72 (number -> INT_NUMBER .)
    MULTIPLY        reduce using rule 72 (number -> INT_NUMBER .)
    DIVIDE          reduce using rule 72 (number -> INT_NUMBER .)
    LESS            reduce using rule 72 (number -> INT_NUMBER .)
    LESS_EQUAL      reduce using rule 72 (number -> INT_NUMBER .)
    GREATER         reduce using rule 72 (number -> INT_NUMBER .)
    GREATER_EQUAL   reduce using rule 72 (number -> INT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 72 (number -> INT_NUMBER .)
    NOT_EQUAL       reduce using rule 72 (number -> INT_NUMBER .)
    AND             reduce using rule 72 (number -> INT_NUMBER .)
    OR              reduce using rule 72 (number -> INT_NUMBER .)
    RIGHT_BR        reduce using rule 72 (number -> INT_NUMBER .)


state 56

    (73) number -> FLOAT_NUMBER .

    SEMICOLON       reduce using rule 73 (number -> FLOAT_NUMBER .)
    PLUS            reduce using rule 73 (number -> FLOAT_NUMBER .)
    MINUS           reduce using rule 73 (number -> FLOAT_NUMBER .)
    MULTIPLY        reduce using rule 73 (number -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 73 (number -> FLOAT_NUMBER .)
    LESS            reduce using rule 73 (number -> FLOAT_NUMBER .)
    LESS_EQUAL      reduce using rule 73 (number -> FLOAT_NUMBER .)
    GREATER         reduce using rule 73 (number -> FLOAT_NUMBER .)
    GREATER_EQUAL   reduce using rule 73 (number -> FLOAT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 73 (number -> FLOAT_NUMBER .)
    NOT_EQUAL       reduce using rule 73 (number -> FLOAT_NUMBER .)
    AND             reduce using rule 73 (number -> FLOAT_NUMBER .)
    OR              reduce using rule 73 (number -> FLOAT_NUMBER .)
    RIGHT_BR        reduce using rule 73 (number -> FLOAT_NUMBER .)


state 57

    (70) string_value -> TEXT .

    SEMICOLON       reduce using rule 70 (string_value -> TEXT .)
    PLUS            reduce using rule 70 (string_value -> TEXT .)
    MINUS           reduce using rule 70 (string_value -> TEXT .)
    MULTIPLY        reduce using rule 70 (string_value -> TEXT .)
    DIVIDE          reduce using rule 70 (string_value -> TEXT .)
    LESS            reduce using rule 70 (string_value -> TEXT .)
    LESS_EQUAL      reduce using rule 70 (string_value -> TEXT .)
    GREATER         reduce using rule 70 (string_value -> TEXT .)
    GREATER_EQUAL   reduce using rule 70 (string_value -> TEXT .)
    EQUAL_EQUAL     reduce using rule 70 (string_value -> TEXT .)
    NOT_EQUAL       reduce using rule 70 (string_value -> TEXT .)
    AND             reduce using rule 70 (string_value -> TEXT .)
    OR              reduce using rule 70 (string_value -> TEXT .)
    RIGHT_BR        reduce using rule 70 (string_value -> TEXT .)


state 58

    (71) string_value -> SIGN .

    SEMICOLON       reduce using rule 71 (string_value -> SIGN .)
    PLUS            reduce using rule 71 (string_value -> SIGN .)
    MINUS           reduce using rule 71 (string_value -> SIGN .)
    MULTIPLY        reduce using rule 71 (string_value -> SIGN .)
    DIVIDE          reduce using rule 71 (string_value -> SIGN .)
    LESS            reduce using rule 71 (string_value -> SIGN .)
    LESS_EQUAL      reduce using rule 71 (string_value -> SIGN .)
    GREATER         reduce using rule 71 (string_value -> SIGN .)
    GREATER_EQUAL   reduce using rule 71 (string_value -> SIGN .)
    EQUAL_EQUAL     reduce using rule 71 (string_value -> SIGN .)
    NOT_EQUAL       reduce using rule 71 (string_value -> SIGN .)
    AND             reduce using rule 71 (string_value -> SIGN .)
    OR              reduce using rule 71 (string_value -> SIGN .)
    RIGHT_BR        reduce using rule 71 (string_value -> SIGN .)


state 59

    (20) function_var_declaration -> type . VAR
    (21) function_var_declaration -> type . VAR COMMA function_var_declaration

    VAR             shift and go to state 74


state 60

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 75


state 61

    (22) function_var_declaration -> empty .

    RIGHT_BR        reduce using rule 22 (function_var_declaration -> empty .)


state 62

    (80) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER . RIGHT_BR_SQUARED

    RIGHT_BR_SQUARED shift and go to state 76


state 63

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 77


state 64

    (23) class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations . RIGHT_BR_CURLY SEMICOLON

    RIGHT_BR_CURLY  shift and go to state 78


state 65

    (30) class_declarations -> class_declaration .
    (31) class_declarations -> class_declaration . class_declarations
    (30) class_declarations -> . class_declaration
    (31) class_declarations -> . class_declaration class_declarations
    (28) class_declaration -> . var_declaration
    (29) class_declaration -> . function_definition
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (92) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR_CURLY  reduce using rule 30 (class_declarations -> class_declaration .)
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    VOID            shift and go to state 19

    class_declaration              shift and go to state 65
    class_declarations             shift and go to state 79
    var_declaration                shift and go to state 66
    function_definition            shift and go to state 67
    type                           shift and go to state 18
    array_declaration              shift and go to state 68
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 66

    (28) class_declaration -> var_declaration .

    INT             reduce using rule 28 (class_declaration -> var_declaration .)
    CHAR            reduce using rule 28 (class_declaration -> var_declaration .)
    STRING          reduce using rule 28 (class_declaration -> var_declaration .)
    BOOL            reduce using rule 28 (class_declaration -> var_declaration .)
    FLOAT           reduce using rule 28 (class_declaration -> var_declaration .)
    LONG            reduce using rule 28 (class_declaration -> var_declaration .)
    SHORT           reduce using rule 28 (class_declaration -> var_declaration .)
    VOID            reduce using rule 28 (class_declaration -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 28 (class_declaration -> var_declaration .)


state 67

    (29) class_declaration -> function_definition .

    INT             reduce using rule 29 (class_declaration -> function_definition .)
    CHAR            reduce using rule 29 (class_declaration -> function_definition .)
    STRING          reduce using rule 29 (class_declaration -> function_definition .)
    BOOL            reduce using rule 29 (class_declaration -> function_definition .)
    FLOAT           reduce using rule 29 (class_declaration -> function_definition .)
    LONG            reduce using rule 29 (class_declaration -> function_definition .)
    SHORT           reduce using rule 29 (class_declaration -> function_definition .)
    VOID            reduce using rule 29 (class_declaration -> function_definition .)
    RIGHT_BR_CURLY  reduce using rule 29 (class_declaration -> function_definition .)


state 68

    (89) var_declaration -> array_declaration .

    INT             reduce using rule 89 (var_declaration -> array_declaration .)
    CHAR            reduce using rule 89 (var_declaration -> array_declaration .)
    STRING          reduce using rule 89 (var_declaration -> array_declaration .)
    BOOL            reduce using rule 89 (var_declaration -> array_declaration .)
    FLOAT           reduce using rule 89 (var_declaration -> array_declaration .)
    LONG            reduce using rule 89 (var_declaration -> array_declaration .)
    SHORT           reduce using rule 89 (var_declaration -> array_declaration .)
    VOID            reduce using rule 89 (var_declaration -> array_declaration .)
    RIGHT_BR_CURLY  reduce using rule 89 (var_declaration -> array_declaration .)
    IF              reduce using rule 89 (var_declaration -> array_declaration .)
    VAR             reduce using rule 89 (var_declaration -> array_declaration .)
    WHILE           reduce using rule 89 (var_declaration -> array_declaration .)
    FOR             reduce using rule 89 (var_declaration -> array_declaration .)
    INT_NUMBER      reduce using rule 89 (var_declaration -> array_declaration .)
    FLOAT_NUMBER    reduce using rule 89 (var_declaration -> array_declaration .)
    TEXT            reduce using rule 89 (var_declaration -> array_declaration .)
    SIGN            reduce using rule 89 (var_declaration -> array_declaration .)
    RETURN          reduce using rule 89 (var_declaration -> array_declaration .)


state 69

    (24) protection_level -> PUBLIC COLON .

    INT             reduce using rule 24 (protection_level -> PUBLIC COLON .)
    CHAR            reduce using rule 24 (protection_level -> PUBLIC COLON .)
    STRING          reduce using rule 24 (protection_level -> PUBLIC COLON .)
    BOOL            reduce using rule 24 (protection_level -> PUBLIC COLON .)
    FLOAT           reduce using rule 24 (protection_level -> PUBLIC COLON .)
    LONG            reduce using rule 24 (protection_level -> PUBLIC COLON .)
    SHORT           reduce using rule 24 (protection_level -> PUBLIC COLON .)
    VOID            reduce using rule 24 (protection_level -> PUBLIC COLON .)


state 70

    (25) protection_level -> PRIVATE COLON .

    INT             reduce using rule 25 (protection_level -> PRIVATE COLON .)
    CHAR            reduce using rule 25 (protection_level -> PRIVATE COLON .)
    STRING          reduce using rule 25 (protection_level -> PRIVATE COLON .)
    BOOL            reduce using rule 25 (protection_level -> PRIVATE COLON .)
    FLOAT           reduce using rule 25 (protection_level -> PRIVATE COLON .)
    LONG            reduce using rule 25 (protection_level -> PRIVATE COLON .)
    SHORT           reduce using rule 25 (protection_level -> PRIVATE COLON .)
    VOID            reduce using rule 25 (protection_level -> PRIVATE COLON .)


state 71

    (26) protection_level -> PROTECTED COLON .

    INT             reduce using rule 26 (protection_level -> PROTECTED COLON .)
    CHAR            reduce using rule 26 (protection_level -> PROTECTED COLON .)
    STRING          reduce using rule 26 (protection_level -> PROTECTED COLON .)
    BOOL            reduce using rule 26 (protection_level -> PROTECTED COLON .)
    FLOAT           reduce using rule 26 (protection_level -> PROTECTED COLON .)
    LONG            reduce using rule 26 (protection_level -> PROTECTED COLON .)
    SHORT           reduce using rule 26 (protection_level -> PROTECTED COLON .)
    VOID            reduce using rule 26 (protection_level -> PROTECTED COLON .)


state 72

    (91) var_declaration -> type VAR EQUAL VAR SEMICOLON .

    USING           reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CLASS           reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    HASH            reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VOID            reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    $end            reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    IF              reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    TEXT            reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    SIGN            reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 91 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)


state 73

    (90) var_declaration -> type VAR EQUAL value SEMICOLON .

    USING           reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CLASS           reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    HASH            reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VOID            reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    $end            reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    IF              reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    TEXT            reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    SIGN            reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 90 (var_declaration -> type VAR EQUAL value SEMICOLON .)


state 74

    (20) function_var_declaration -> type VAR .
    (21) function_var_declaration -> type VAR . COMMA function_var_declaration

    RIGHT_BR        reduce using rule 20 (function_var_declaration -> type VAR .)
    COMMA           shift and go to state 80


state 75

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 81


state 76

    (80) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .

    SEMICOLON       reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL           reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    PLUS            reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    MINUS           reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    MULTIPLY        reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    DIVIDE          reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS            reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS_EQUAL      reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER         reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER_EQUAL   reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL_EQUAL     reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    NOT_EQUAL       reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    AND             reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    OR              reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    RIGHT_BR        reduce using rule 80 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)


state 77

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 82


state 78

    (23) class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY . SEMICOLON

    SEMICOLON       shift and go to state 83


state 79

    (31) class_declarations -> class_declaration class_declarations .

    RIGHT_BR_CURLY  reduce using rule 31 (class_declarations -> class_declaration class_declarations .)


state 80

    (21) function_var_declaration -> type VAR COMMA . function_var_declaration
    (20) function_var_declaration -> . type VAR
    (21) function_var_declaration -> . type VAR COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (95) empty -> .

    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    RIGHT_BR        reduce using rule 95 (empty -> .)

    type                           shift and go to state 59
    function_var_declaration       shift and go to state 84
    empty                          shift and go to state 61

state 81

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . instructions returning RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (46) loop -> . while_loop
    (47) loop -> . for_loop
    (48) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (84) assignment -> . VAR EQUAL value SEMICOLON
    (85) assignment -> . VAR EQUAL VAR SEMICOLON
    (86) assignment -> . get_array_element EQUAL value SEMICOLON
    (87) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (81) operation -> . increment
    (82) operation -> . decrement
    (83) operation -> . value operator value SEMICOLON
    (95) empty -> .
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (40) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (45) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (78) increment -> . VAR PLUS_PLUS SEMICOLON
    (79) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (92) array_declaration -> . type get_array_element SEMICOLON
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 97
    VAR             shift and go to state 86
    RETURN          reduce using rule 95 (empty -> .)
    WHILE           shift and go to state 102
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    FOR             shift and go to state 104
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

  ! IF              [ reduce using rule 95 (empty -> .) ]
  ! VAR             [ reduce using rule 95 (empty -> .) ]
  ! WHILE           [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! STRING          [ reduce using rule 95 (empty -> .) ]
  ! BOOL            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]
  ! FOR             [ reduce using rule 95 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 95 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 95 (empty -> .) ]
  ! TEXT            [ reduce using rule 95 (empty -> .) ]
  ! SIGN            [ reduce using rule 95 (empty -> .) ]

    type                           shift and go to state 85
    instructions                   shift and go to state 87
    instruction                    shift and go to state 88
    loop                           shift and go to state 89
    if_statement                   shift and go to state 90
    assignment                     shift and go to state 91
    operation                      shift and go to state 92
    empty                          shift and go to state 93
    var_declaration                shift and go to state 94
    while_loop                     shift and go to state 95
    for_loop                       shift and go to state 96
    value                          shift and go to state 98
    get_array_element              shift and go to state 99
    increment                      shift and go to state 100
    decrement                      shift and go to state 101
    array_declaration              shift and go to state 68
    for_loop_statement             shift and go to state 103
    number                         shift and go to state 52
    string_value                   shift and go to state 54

state 82

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (46) loop -> . while_loop
    (47) loop -> . for_loop
    (48) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (84) assignment -> . VAR EQUAL value SEMICOLON
    (85) assignment -> . VAR EQUAL VAR SEMICOLON
    (86) assignment -> . get_array_element EQUAL value SEMICOLON
    (87) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (81) operation -> . increment
    (82) operation -> . decrement
    (83) operation -> . value operator value SEMICOLON
    (95) empty -> .
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (40) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (45) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (78) increment -> . VAR PLUS_PLUS SEMICOLON
    (79) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (92) array_declaration -> . type get_array_element SEMICOLON
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 97
    VAR             shift and go to state 86
    RIGHT_BR_CURLY  reduce using rule 95 (empty -> .)
    WHILE           shift and go to state 102
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    FOR             shift and go to state 104
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

  ! IF              [ reduce using rule 95 (empty -> .) ]
  ! VAR             [ reduce using rule 95 (empty -> .) ]
  ! WHILE           [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! STRING          [ reduce using rule 95 (empty -> .) ]
  ! BOOL            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]
  ! FOR             [ reduce using rule 95 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 95 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 95 (empty -> .) ]
  ! TEXT            [ reduce using rule 95 (empty -> .) ]
  ! SIGN            [ reduce using rule 95 (empty -> .) ]

    instructions                   shift and go to state 105
    instruction                    shift and go to state 88
    loop                           shift and go to state 89
    if_statement                   shift and go to state 90
    assignment                     shift and go to state 91
    operation                      shift and go to state 92
    empty                          shift and go to state 93
    var_declaration                shift and go to state 94
    while_loop                     shift and go to state 95
    for_loop                       shift and go to state 96
    value                          shift and go to state 98
    get_array_element              shift and go to state 99
    increment                      shift and go to state 100
    decrement                      shift and go to state 101
    type                           shift and go to state 85
    array_declaration              shift and go to state 68
    for_loop_statement             shift and go to state 103
    number                         shift and go to state 52
    string_value                   shift and go to state 54

state 83

    (23) class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .

    USING           reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    CLASS           reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    HASH            reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    VOID            reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    INT             reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    CHAR            reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    STRING          reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    BOOL            reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    FLOAT           reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    LONG            reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    SHORT           reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    $end            reduce using rule 23 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)


state 84

    (21) function_var_declaration -> type VAR COMMA function_var_declaration .

    RIGHT_BR        reduce using rule 21 (function_var_declaration -> type VAR COMMA function_var_declaration .)


state 85

    (88) var_declaration -> type . VAR SEMICOLON
    (90) var_declaration -> type . VAR EQUAL value SEMICOLON
    (91) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (92) array_declaration -> type . get_array_element SEMICOLON
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    VAR             shift and go to state 106

    get_array_element              shift and go to state 33

state 86

    (84) assignment -> VAR . EQUAL value SEMICOLON
    (85) assignment -> VAR . EQUAL VAR SEMICOLON
    (80) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (78) increment -> VAR . PLUS_PLUS SEMICOLON
    (79) decrement -> VAR . MINUS_MINUS SEMICOLON
    (75) value -> VAR .

    EQUAL           shift and go to state 107
    LEFT_BR_SQUARED shift and go to state 41
    PLUS_PLUS       shift and go to state 108
    MINUS_MINUS     shift and go to state 109
    PLUS            reduce using rule 75 (value -> VAR .)
    MINUS           reduce using rule 75 (value -> VAR .)
    MULTIPLY        reduce using rule 75 (value -> VAR .)
    DIVIDE          reduce using rule 75 (value -> VAR .)


state 87

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions . returning RIGHT_BR_CURLY
    (94) returning -> . RETURN value SEMICOLON

    RETURN          shift and go to state 111

    returning                      shift and go to state 110

state 88

    (32) instructions -> instruction .
    (33) instructions -> instruction . instructions
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (46) loop -> . while_loop
    (47) loop -> . for_loop
    (48) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (84) assignment -> . VAR EQUAL value SEMICOLON
    (85) assignment -> . VAR EQUAL VAR SEMICOLON
    (86) assignment -> . get_array_element EQUAL value SEMICOLON
    (87) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (81) operation -> . increment
    (82) operation -> . decrement
    (83) operation -> . value operator value SEMICOLON
    (95) empty -> .
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (40) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (45) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (78) increment -> . VAR PLUS_PLUS SEMICOLON
    (79) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (92) array_declaration -> . type get_array_element SEMICOLON
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 32 (instructions -> instruction .)
  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 32 (instructions -> instruction .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    RETURN          reduce using rule 32 (instructions -> instruction .)
    RIGHT_BR_CURLY  reduce using rule 32 (instructions -> instruction .)
    IF              shift and go to state 97
    VAR             shift and go to state 86
    WHILE           shift and go to state 102
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    FOR             shift and go to state 104
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

  ! IF              [ reduce using rule 95 (empty -> .) ]
  ! VAR             [ reduce using rule 95 (empty -> .) ]
  ! WHILE           [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! STRING          [ reduce using rule 95 (empty -> .) ]
  ! BOOL            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]
  ! FOR             [ reduce using rule 95 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 95 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 95 (empty -> .) ]
  ! TEXT            [ reduce using rule 95 (empty -> .) ]
  ! SIGN            [ reduce using rule 95 (empty -> .) ]
  ! RETURN          [ reduce using rule 95 (empty -> .) ]
  ! RIGHT_BR_CURLY  [ reduce using rule 95 (empty -> .) ]

    instruction                    shift and go to state 88
    instructions                   shift and go to state 112
    loop                           shift and go to state 89
    if_statement                   shift and go to state 90
    assignment                     shift and go to state 91
    operation                      shift and go to state 92
    empty                          shift and go to state 93
    var_declaration                shift and go to state 94
    while_loop                     shift and go to state 95
    for_loop                       shift and go to state 96
    value                          shift and go to state 98
    get_array_element              shift and go to state 99
    increment                      shift and go to state 100
    decrement                      shift and go to state 101
    type                           shift and go to state 85
    array_declaration              shift and go to state 68
    for_loop_statement             shift and go to state 103
    number                         shift and go to state 52
    string_value                   shift and go to state 54

state 89

    (34) instruction -> loop .

    IF              reduce using rule 34 (instruction -> loop .)
    VAR             reduce using rule 34 (instruction -> loop .)
    WHILE           reduce using rule 34 (instruction -> loop .)
    INT             reduce using rule 34 (instruction -> loop .)
    CHAR            reduce using rule 34 (instruction -> loop .)
    STRING          reduce using rule 34 (instruction -> loop .)
    BOOL            reduce using rule 34 (instruction -> loop .)
    FLOAT           reduce using rule 34 (instruction -> loop .)
    LONG            reduce using rule 34 (instruction -> loop .)
    SHORT           reduce using rule 34 (instruction -> loop .)
    FOR             reduce using rule 34 (instruction -> loop .)
    INT_NUMBER      reduce using rule 34 (instruction -> loop .)
    FLOAT_NUMBER    reduce using rule 34 (instruction -> loop .)
    TEXT            reduce using rule 34 (instruction -> loop .)
    SIGN            reduce using rule 34 (instruction -> loop .)
    RETURN          reduce using rule 34 (instruction -> loop .)
    RIGHT_BR_CURLY  reduce using rule 34 (instruction -> loop .)


state 90

    (35) instruction -> if_statement .

    IF              reduce using rule 35 (instruction -> if_statement .)
    VAR             reduce using rule 35 (instruction -> if_statement .)
    WHILE           reduce using rule 35 (instruction -> if_statement .)
    INT             reduce using rule 35 (instruction -> if_statement .)
    CHAR            reduce using rule 35 (instruction -> if_statement .)
    STRING          reduce using rule 35 (instruction -> if_statement .)
    BOOL            reduce using rule 35 (instruction -> if_statement .)
    FLOAT           reduce using rule 35 (instruction -> if_statement .)
    LONG            reduce using rule 35 (instruction -> if_statement .)
    SHORT           reduce using rule 35 (instruction -> if_statement .)
    FOR             reduce using rule 35 (instruction -> if_statement .)
    INT_NUMBER      reduce using rule 35 (instruction -> if_statement .)
    FLOAT_NUMBER    reduce using rule 35 (instruction -> if_statement .)
    TEXT            reduce using rule 35 (instruction -> if_statement .)
    SIGN            reduce using rule 35 (instruction -> if_statement .)
    RETURN          reduce using rule 35 (instruction -> if_statement .)
    RIGHT_BR_CURLY  reduce using rule 35 (instruction -> if_statement .)


state 91

    (36) instruction -> assignment .

    IF              reduce using rule 36 (instruction -> assignment .)
    VAR             reduce using rule 36 (instruction -> assignment .)
    WHILE           reduce using rule 36 (instruction -> assignment .)
    INT             reduce using rule 36 (instruction -> assignment .)
    CHAR            reduce using rule 36 (instruction -> assignment .)
    STRING          reduce using rule 36 (instruction -> assignment .)
    BOOL            reduce using rule 36 (instruction -> assignment .)
    FLOAT           reduce using rule 36 (instruction -> assignment .)
    LONG            reduce using rule 36 (instruction -> assignment .)
    SHORT           reduce using rule 36 (instruction -> assignment .)
    FOR             reduce using rule 36 (instruction -> assignment .)
    INT_NUMBER      reduce using rule 36 (instruction -> assignment .)
    FLOAT_NUMBER    reduce using rule 36 (instruction -> assignment .)
    TEXT            reduce using rule 36 (instruction -> assignment .)
    SIGN            reduce using rule 36 (instruction -> assignment .)
    RETURN          reduce using rule 36 (instruction -> assignment .)
    RIGHT_BR_CURLY  reduce using rule 36 (instruction -> assignment .)


state 92

    (37) instruction -> operation .

    IF              reduce using rule 37 (instruction -> operation .)
    VAR             reduce using rule 37 (instruction -> operation .)
    WHILE           reduce using rule 37 (instruction -> operation .)
    INT             reduce using rule 37 (instruction -> operation .)
    CHAR            reduce using rule 37 (instruction -> operation .)
    STRING          reduce using rule 37 (instruction -> operation .)
    BOOL            reduce using rule 37 (instruction -> operation .)
    FLOAT           reduce using rule 37 (instruction -> operation .)
    LONG            reduce using rule 37 (instruction -> operation .)
    SHORT           reduce using rule 37 (instruction -> operation .)
    FOR             reduce using rule 37 (instruction -> operation .)
    INT_NUMBER      reduce using rule 37 (instruction -> operation .)
    FLOAT_NUMBER    reduce using rule 37 (instruction -> operation .)
    TEXT            reduce using rule 37 (instruction -> operation .)
    SIGN            reduce using rule 37 (instruction -> operation .)
    RETURN          reduce using rule 37 (instruction -> operation .)
    RIGHT_BR_CURLY  reduce using rule 37 (instruction -> operation .)


state 93

    (38) instruction -> empty .

    IF              reduce using rule 38 (instruction -> empty .)
    VAR             reduce using rule 38 (instruction -> empty .)
    WHILE           reduce using rule 38 (instruction -> empty .)
    INT             reduce using rule 38 (instruction -> empty .)
    CHAR            reduce using rule 38 (instruction -> empty .)
    STRING          reduce using rule 38 (instruction -> empty .)
    BOOL            reduce using rule 38 (instruction -> empty .)
    FLOAT           reduce using rule 38 (instruction -> empty .)
    LONG            reduce using rule 38 (instruction -> empty .)
    SHORT           reduce using rule 38 (instruction -> empty .)
    FOR             reduce using rule 38 (instruction -> empty .)
    INT_NUMBER      reduce using rule 38 (instruction -> empty .)
    FLOAT_NUMBER    reduce using rule 38 (instruction -> empty .)
    TEXT            reduce using rule 38 (instruction -> empty .)
    SIGN            reduce using rule 38 (instruction -> empty .)
    RETURN          reduce using rule 38 (instruction -> empty .)
    RIGHT_BR_CURLY  reduce using rule 38 (instruction -> empty .)


state 94

    (39) instruction -> var_declaration .

    IF              reduce using rule 39 (instruction -> var_declaration .)
    VAR             reduce using rule 39 (instruction -> var_declaration .)
    WHILE           reduce using rule 39 (instruction -> var_declaration .)
    INT             reduce using rule 39 (instruction -> var_declaration .)
    CHAR            reduce using rule 39 (instruction -> var_declaration .)
    STRING          reduce using rule 39 (instruction -> var_declaration .)
    BOOL            reduce using rule 39 (instruction -> var_declaration .)
    FLOAT           reduce using rule 39 (instruction -> var_declaration .)
    LONG            reduce using rule 39 (instruction -> var_declaration .)
    SHORT           reduce using rule 39 (instruction -> var_declaration .)
    FOR             reduce using rule 39 (instruction -> var_declaration .)
    INT_NUMBER      reduce using rule 39 (instruction -> var_declaration .)
    FLOAT_NUMBER    reduce using rule 39 (instruction -> var_declaration .)
    TEXT            reduce using rule 39 (instruction -> var_declaration .)
    SIGN            reduce using rule 39 (instruction -> var_declaration .)
    RETURN          reduce using rule 39 (instruction -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 39 (instruction -> var_declaration .)


state 95

    (46) loop -> while_loop .

    IF              reduce using rule 46 (loop -> while_loop .)
    VAR             reduce using rule 46 (loop -> while_loop .)
    WHILE           reduce using rule 46 (loop -> while_loop .)
    INT             reduce using rule 46 (loop -> while_loop .)
    CHAR            reduce using rule 46 (loop -> while_loop .)
    STRING          reduce using rule 46 (loop -> while_loop .)
    BOOL            reduce using rule 46 (loop -> while_loop .)
    FLOAT           reduce using rule 46 (loop -> while_loop .)
    LONG            reduce using rule 46 (loop -> while_loop .)
    SHORT           reduce using rule 46 (loop -> while_loop .)
    FOR             reduce using rule 46 (loop -> while_loop .)
    INT_NUMBER      reduce using rule 46 (loop -> while_loop .)
    FLOAT_NUMBER    reduce using rule 46 (loop -> while_loop .)
    TEXT            reduce using rule 46 (loop -> while_loop .)
    SIGN            reduce using rule 46 (loop -> while_loop .)
    RETURN          reduce using rule 46 (loop -> while_loop .)
    RIGHT_BR_CURLY  reduce using rule 46 (loop -> while_loop .)


state 96

    (47) loop -> for_loop .

    IF              reduce using rule 47 (loop -> for_loop .)
    VAR             reduce using rule 47 (loop -> for_loop .)
    WHILE           reduce using rule 47 (loop -> for_loop .)
    INT             reduce using rule 47 (loop -> for_loop .)
    CHAR            reduce using rule 47 (loop -> for_loop .)
    STRING          reduce using rule 47 (loop -> for_loop .)
    BOOL            reduce using rule 47 (loop -> for_loop .)
    FLOAT           reduce using rule 47 (loop -> for_loop .)
    LONG            reduce using rule 47 (loop -> for_loop .)
    SHORT           reduce using rule 47 (loop -> for_loop .)
    FOR             reduce using rule 47 (loop -> for_loop .)
    INT_NUMBER      reduce using rule 47 (loop -> for_loop .)
    FLOAT_NUMBER    reduce using rule 47 (loop -> for_loop .)
    TEXT            reduce using rule 47 (loop -> for_loop .)
    SIGN            reduce using rule 47 (loop -> for_loop .)
    RETURN          reduce using rule 47 (loop -> for_loop .)
    RIGHT_BR_CURLY  reduce using rule 47 (loop -> for_loop .)


state 97

    (48) if_statement -> IF . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 113


state 98

    (83) operation -> value . operator value SEMICOLON
    (57) operator -> . PLUS
    (58) operator -> . MINUS
    (59) operator -> . MULTIPLY
    (60) operator -> . DIVIDE

    PLUS            shift and go to state 115
    MINUS           shift and go to state 116
    MULTIPLY        shift and go to state 117
    DIVIDE          shift and go to state 118

    operator                       shift and go to state 114

state 99

    (86) assignment -> get_array_element . EQUAL value SEMICOLON
    (87) assignment -> get_array_element . EQUAL VAR SEMICOLON
    (76) value -> get_array_element .

    EQUAL           shift and go to state 119
    PLUS            reduce using rule 76 (value -> get_array_element .)
    MINUS           reduce using rule 76 (value -> get_array_element .)
    MULTIPLY        reduce using rule 76 (value -> get_array_element .)
    DIVIDE          reduce using rule 76 (value -> get_array_element .)


state 100

    (81) operation -> increment .

    IF              reduce using rule 81 (operation -> increment .)
    VAR             reduce using rule 81 (operation -> increment .)
    WHILE           reduce using rule 81 (operation -> increment .)
    INT             reduce using rule 81 (operation -> increment .)
    CHAR            reduce using rule 81 (operation -> increment .)
    STRING          reduce using rule 81 (operation -> increment .)
    BOOL            reduce using rule 81 (operation -> increment .)
    FLOAT           reduce using rule 81 (operation -> increment .)
    LONG            reduce using rule 81 (operation -> increment .)
    SHORT           reduce using rule 81 (operation -> increment .)
    FOR             reduce using rule 81 (operation -> increment .)
    INT_NUMBER      reduce using rule 81 (operation -> increment .)
    FLOAT_NUMBER    reduce using rule 81 (operation -> increment .)
    TEXT            reduce using rule 81 (operation -> increment .)
    SIGN            reduce using rule 81 (operation -> increment .)
    RETURN          reduce using rule 81 (operation -> increment .)
    RIGHT_BR_CURLY  reduce using rule 81 (operation -> increment .)


state 101

    (82) operation -> decrement .

    IF              reduce using rule 82 (operation -> decrement .)
    VAR             reduce using rule 82 (operation -> decrement .)
    WHILE           reduce using rule 82 (operation -> decrement .)
    INT             reduce using rule 82 (operation -> decrement .)
    CHAR            reduce using rule 82 (operation -> decrement .)
    STRING          reduce using rule 82 (operation -> decrement .)
    BOOL            reduce using rule 82 (operation -> decrement .)
    FLOAT           reduce using rule 82 (operation -> decrement .)
    LONG            reduce using rule 82 (operation -> decrement .)
    SHORT           reduce using rule 82 (operation -> decrement .)
    FOR             reduce using rule 82 (operation -> decrement .)
    INT_NUMBER      reduce using rule 82 (operation -> decrement .)
    FLOAT_NUMBER    reduce using rule 82 (operation -> decrement .)
    TEXT            reduce using rule 82 (operation -> decrement .)
    SIGN            reduce using rule 82 (operation -> decrement .)
    RETURN          reduce using rule 82 (operation -> decrement .)
    RIGHT_BR_CURLY  reduce using rule 82 (operation -> decrement .)


state 102

    (40) while_loop -> WHILE . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 120


state 103

    (45) for_loop -> for_loop_statement . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 121


state 104

    (41) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LEFT_BR         shift and go to state 122


state 105

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 123


state 106

    (88) var_declaration -> type VAR . SEMICOLON
    (90) var_declaration -> type VAR . EQUAL value SEMICOLON
    (91) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (80) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 38
    EQUAL           shift and go to state 39
    LEFT_BR_SQUARED shift and go to state 41


state 107

    (84) assignment -> VAR EQUAL . value SEMICOLON
    (85) assignment -> VAR EQUAL . VAR SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

    VAR             shift and go to state 124
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    value                          shift and go to state 125
    number                         shift and go to state 52
    get_array_element              shift and go to state 53
    string_value                   shift and go to state 54

state 108

    (78) increment -> VAR PLUS_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 126


state 109

    (79) decrement -> VAR MINUS_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 127


state 110

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 128


state 111

    (94) returning -> RETURN . value SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

    VAR             shift and go to state 130
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    value                          shift and go to state 129
    number                         shift and go to state 52
    get_array_element              shift and go to state 53
    string_value                   shift and go to state 54

state 112

    (33) instructions -> instruction instructions .

    RETURN          reduce using rule 33 (instructions -> instruction instructions .)
    RIGHT_BR_CURLY  reduce using rule 33 (instructions -> instruction instructions .)


state 113

    (48) if_statement -> IF LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (49) comparisons -> . comparison
    (50) comparisons -> . comparison conjunction comparisons
    (93) comparison -> . value comparator value
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

    VAR             shift and go to state 130
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    comparisons                    shift and go to state 131
    comparison                     shift and go to state 132
    value                          shift and go to state 133
    number                         shift and go to state 52
    get_array_element              shift and go to state 53
    string_value                   shift and go to state 54

state 114

    (83) operation -> value operator . value SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

    VAR             shift and go to state 130
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    value                          shift and go to state 134
    number                         shift and go to state 52
    get_array_element              shift and go to state 53
    string_value                   shift and go to state 54

state 115

    (57) operator -> PLUS .

    VAR             reduce using rule 57 (operator -> PLUS .)
    INT_NUMBER      reduce using rule 57 (operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 57 (operator -> PLUS .)
    TEXT            reduce using rule 57 (operator -> PLUS .)
    SIGN            reduce using rule 57 (operator -> PLUS .)


state 116

    (58) operator -> MINUS .

    VAR             reduce using rule 58 (operator -> MINUS .)
    INT_NUMBER      reduce using rule 58 (operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 58 (operator -> MINUS .)
    TEXT            reduce using rule 58 (operator -> MINUS .)
    SIGN            reduce using rule 58 (operator -> MINUS .)


state 117

    (59) operator -> MULTIPLY .

    VAR             reduce using rule 59 (operator -> MULTIPLY .)
    INT_NUMBER      reduce using rule 59 (operator -> MULTIPLY .)
    FLOAT_NUMBER    reduce using rule 59 (operator -> MULTIPLY .)
    TEXT            reduce using rule 59 (operator -> MULTIPLY .)
    SIGN            reduce using rule 59 (operator -> MULTIPLY .)


state 118

    (60) operator -> DIVIDE .

    VAR             reduce using rule 60 (operator -> DIVIDE .)
    INT_NUMBER      reduce using rule 60 (operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 60 (operator -> DIVIDE .)
    TEXT            reduce using rule 60 (operator -> DIVIDE .)
    SIGN            reduce using rule 60 (operator -> DIVIDE .)


state 119

    (86) assignment -> get_array_element EQUAL . value SEMICOLON
    (87) assignment -> get_array_element EQUAL . VAR SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

    VAR             shift and go to state 136
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    get_array_element              shift and go to state 53
    value                          shift and go to state 135
    number                         shift and go to state 52
    string_value                   shift and go to state 54

state 120

    (40) while_loop -> WHILE LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (49) comparisons -> . comparison
    (50) comparisons -> . comparison conjunction comparisons
    (93) comparison -> . value comparator value
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

    VAR             shift and go to state 130
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    comparisons                    shift and go to state 137
    comparison                     shift and go to state 132
    value                          shift and go to state 133
    number                         shift and go to state 52
    get_array_element              shift and go to state 53
    string_value                   shift and go to state 54

state 121

    (45) for_loop -> for_loop_statement LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (46) loop -> . while_loop
    (47) loop -> . for_loop
    (48) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (84) assignment -> . VAR EQUAL value SEMICOLON
    (85) assignment -> . VAR EQUAL VAR SEMICOLON
    (86) assignment -> . get_array_element EQUAL value SEMICOLON
    (87) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (81) operation -> . increment
    (82) operation -> . decrement
    (83) operation -> . value operator value SEMICOLON
    (95) empty -> .
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (40) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (45) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (78) increment -> . VAR PLUS_PLUS SEMICOLON
    (79) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (92) array_declaration -> . type get_array_element SEMICOLON
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 97
    VAR             shift and go to state 86
    RIGHT_BR_CURLY  reduce using rule 95 (empty -> .)
    WHILE           shift and go to state 102
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    FOR             shift and go to state 104
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

  ! IF              [ reduce using rule 95 (empty -> .) ]
  ! VAR             [ reduce using rule 95 (empty -> .) ]
  ! WHILE           [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! STRING          [ reduce using rule 95 (empty -> .) ]
  ! BOOL            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]
  ! FOR             [ reduce using rule 95 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 95 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 95 (empty -> .) ]
  ! TEXT            [ reduce using rule 95 (empty -> .) ]
  ! SIGN            [ reduce using rule 95 (empty -> .) ]

    for_loop_statement             shift and go to state 103
    instructions                   shift and go to state 138
    instruction                    shift and go to state 88
    loop                           shift and go to state 89
    if_statement                   shift and go to state 90
    assignment                     shift and go to state 91
    operation                      shift and go to state 92
    empty                          shift and go to state 93
    var_declaration                shift and go to state 94
    while_loop                     shift and go to state 95
    for_loop                       shift and go to state 96
    value                          shift and go to state 98
    get_array_element              shift and go to state 99
    increment                      shift and go to state 100
    decrement                      shift and go to state 101
    type                           shift and go to state 85
    array_declaration              shift and go to state 68
    number                         shift and go to state 52
    string_value                   shift and go to state 54

state 122

    (41) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT             shift and go to state 139


state 123

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    USING           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CLASS           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    HASH            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VOID            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    $end            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 124

    (85) assignment -> VAR EQUAL VAR . SEMICOLON
    (75) value -> VAR .
    (80) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 140
    LEFT_BR_SQUARED shift and go to state 41

  ! SEMICOLON       [ reduce using rule 75 (value -> VAR .) ]


state 125

    (84) assignment -> VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 141


state 126

    (78) increment -> VAR PLUS_PLUS SEMICOLON .

    IF              reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    VAR             reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    WHILE           reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT             reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CHAR            reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    STRING          reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    BOOL            reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT           reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    LONG            reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    SHORT           reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FOR             reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT_NUMBER      reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    TEXT            reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    SIGN            reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RETURN          reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 78 (increment -> VAR PLUS_PLUS SEMICOLON .)


state 127

    (79) decrement -> VAR MINUS_MINUS SEMICOLON .

    IF              reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    VAR             reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    WHILE           reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT             reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CHAR            reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    STRING          reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    BOOL            reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT           reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    LONG            reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    SHORT           reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FOR             reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT_NUMBER      reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    TEXT            reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    SIGN            reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RETURN          reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 79 (decrement -> VAR MINUS_MINUS SEMICOLON .)


state 128

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .

    USING           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    CLASS           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    HASH            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    VOID            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    INT             reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    CHAR            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    STRING          reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    BOOL            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    LONG            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    SHORT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    $end            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)


state 129

    (94) returning -> RETURN value . SEMICOLON

    SEMICOLON       shift and go to state 142


state 130

    (75) value -> VAR .
    (80) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       reduce using rule 75 (value -> VAR .)
    LESS            reduce using rule 75 (value -> VAR .)
    LESS_EQUAL      reduce using rule 75 (value -> VAR .)
    GREATER         reduce using rule 75 (value -> VAR .)
    GREATER_EQUAL   reduce using rule 75 (value -> VAR .)
    EQUAL_EQUAL     reduce using rule 75 (value -> VAR .)
    NOT_EQUAL       reduce using rule 75 (value -> VAR .)
    AND             reduce using rule 75 (value -> VAR .)
    OR              reduce using rule 75 (value -> VAR .)
    RIGHT_BR        reduce using rule 75 (value -> VAR .)
    LEFT_BR_SQUARED shift and go to state 41


state 131

    (48) if_statement -> IF LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 143


state 132

    (49) comparisons -> comparison .
    (50) comparisons -> comparison . conjunction comparisons
    (68) conjunction -> . AND
    (69) conjunction -> . OR

    RIGHT_BR        reduce using rule 49 (comparisons -> comparison .)
    AND             shift and go to state 145
    OR              shift and go to state 146

    conjunction                    shift and go to state 144

state 133

    (93) comparison -> value . comparator value
    (51) comparator -> . LESS
    (52) comparator -> . LESS_EQUAL
    (53) comparator -> . GREATER
    (54) comparator -> . GREATER_EQUAL
    (55) comparator -> . EQUAL_EQUAL
    (56) comparator -> . NOT_EQUAL

    LESS            shift and go to state 148
    LESS_EQUAL      shift and go to state 149
    GREATER         shift and go to state 150
    GREATER_EQUAL   shift and go to state 151
    EQUAL_EQUAL     shift and go to state 152
    NOT_EQUAL       shift and go to state 153

    comparator                     shift and go to state 147

state 134

    (83) operation -> value operator value . SEMICOLON

    SEMICOLON       shift and go to state 154


state 135

    (86) assignment -> get_array_element EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 155


state 136

    (87) assignment -> get_array_element EQUAL VAR . SEMICOLON
    (75) value -> VAR .
    (80) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 156
    LEFT_BR_SQUARED shift and go to state 41

  ! SEMICOLON       [ reduce using rule 75 (value -> VAR .) ]


state 137

    (40) while_loop -> WHILE LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 157


state 138

    (45) for_loop -> for_loop_statement LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 158


state 139

    (41) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 159


state 140

    (85) assignment -> VAR EQUAL VAR SEMICOLON .

    IF              reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    TEXT            reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    SIGN            reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 85 (assignment -> VAR EQUAL VAR SEMICOLON .)


state 141

    (84) assignment -> VAR EQUAL value SEMICOLON .

    IF              reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    TEXT            reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    SIGN            reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 84 (assignment -> VAR EQUAL value SEMICOLON .)


state 142

    (94) returning -> RETURN value SEMICOLON .

    RIGHT_BR_CURLY  reduce using rule 94 (returning -> RETURN value SEMICOLON .)


state 143

    (48) if_statement -> IF LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 160


state 144

    (50) comparisons -> comparison conjunction . comparisons
    (49) comparisons -> . comparison
    (50) comparisons -> . comparison conjunction comparisons
    (93) comparison -> . value comparator value
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

    VAR             shift and go to state 130
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    comparison                     shift and go to state 132
    comparisons                    shift and go to state 161
    value                          shift and go to state 133
    number                         shift and go to state 52
    get_array_element              shift and go to state 53
    string_value                   shift and go to state 54

state 145

    (68) conjunction -> AND .

    VAR             reduce using rule 68 (conjunction -> AND .)
    INT_NUMBER      reduce using rule 68 (conjunction -> AND .)
    FLOAT_NUMBER    reduce using rule 68 (conjunction -> AND .)
    TEXT            reduce using rule 68 (conjunction -> AND .)
    SIGN            reduce using rule 68 (conjunction -> AND .)


state 146

    (69) conjunction -> OR .

    VAR             reduce using rule 69 (conjunction -> OR .)
    INT_NUMBER      reduce using rule 69 (conjunction -> OR .)
    FLOAT_NUMBER    reduce using rule 69 (conjunction -> OR .)
    TEXT            reduce using rule 69 (conjunction -> OR .)
    SIGN            reduce using rule 69 (conjunction -> OR .)


state 147

    (93) comparison -> value comparator . value
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

    VAR             shift and go to state 130
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

    value                          shift and go to state 162
    number                         shift and go to state 52
    get_array_element              shift and go to state 53
    string_value                   shift and go to state 54

state 148

    (51) comparator -> LESS .

    VAR             reduce using rule 51 (comparator -> LESS .)
    INT_NUMBER      reduce using rule 51 (comparator -> LESS .)
    FLOAT_NUMBER    reduce using rule 51 (comparator -> LESS .)
    TEXT            reduce using rule 51 (comparator -> LESS .)
    SIGN            reduce using rule 51 (comparator -> LESS .)


state 149

    (52) comparator -> LESS_EQUAL .

    VAR             reduce using rule 52 (comparator -> LESS_EQUAL .)
    INT_NUMBER      reduce using rule 52 (comparator -> LESS_EQUAL .)
    FLOAT_NUMBER    reduce using rule 52 (comparator -> LESS_EQUAL .)
    TEXT            reduce using rule 52 (comparator -> LESS_EQUAL .)
    SIGN            reduce using rule 52 (comparator -> LESS_EQUAL .)


state 150

    (53) comparator -> GREATER .

    VAR             reduce using rule 53 (comparator -> GREATER .)
    INT_NUMBER      reduce using rule 53 (comparator -> GREATER .)
    FLOAT_NUMBER    reduce using rule 53 (comparator -> GREATER .)
    TEXT            reduce using rule 53 (comparator -> GREATER .)
    SIGN            reduce using rule 53 (comparator -> GREATER .)


state 151

    (54) comparator -> GREATER_EQUAL .

    VAR             reduce using rule 54 (comparator -> GREATER_EQUAL .)
    INT_NUMBER      reduce using rule 54 (comparator -> GREATER_EQUAL .)
    FLOAT_NUMBER    reduce using rule 54 (comparator -> GREATER_EQUAL .)
    TEXT            reduce using rule 54 (comparator -> GREATER_EQUAL .)
    SIGN            reduce using rule 54 (comparator -> GREATER_EQUAL .)


state 152

    (55) comparator -> EQUAL_EQUAL .

    VAR             reduce using rule 55 (comparator -> EQUAL_EQUAL .)
    INT_NUMBER      reduce using rule 55 (comparator -> EQUAL_EQUAL .)
    FLOAT_NUMBER    reduce using rule 55 (comparator -> EQUAL_EQUAL .)
    TEXT            reduce using rule 55 (comparator -> EQUAL_EQUAL .)
    SIGN            reduce using rule 55 (comparator -> EQUAL_EQUAL .)


state 153

    (56) comparator -> NOT_EQUAL .

    VAR             reduce using rule 56 (comparator -> NOT_EQUAL .)
    INT_NUMBER      reduce using rule 56 (comparator -> NOT_EQUAL .)
    FLOAT_NUMBER    reduce using rule 56 (comparator -> NOT_EQUAL .)
    TEXT            reduce using rule 56 (comparator -> NOT_EQUAL .)
    SIGN            reduce using rule 56 (comparator -> NOT_EQUAL .)


state 154

    (83) operation -> value operator value SEMICOLON .

    IF              reduce using rule 83 (operation -> value operator value SEMICOLON .)
    VAR             reduce using rule 83 (operation -> value operator value SEMICOLON .)
    WHILE           reduce using rule 83 (operation -> value operator value SEMICOLON .)
    INT             reduce using rule 83 (operation -> value operator value SEMICOLON .)
    CHAR            reduce using rule 83 (operation -> value operator value SEMICOLON .)
    STRING          reduce using rule 83 (operation -> value operator value SEMICOLON .)
    BOOL            reduce using rule 83 (operation -> value operator value SEMICOLON .)
    FLOAT           reduce using rule 83 (operation -> value operator value SEMICOLON .)
    LONG            reduce using rule 83 (operation -> value operator value SEMICOLON .)
    SHORT           reduce using rule 83 (operation -> value operator value SEMICOLON .)
    FOR             reduce using rule 83 (operation -> value operator value SEMICOLON .)
    INT_NUMBER      reduce using rule 83 (operation -> value operator value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 83 (operation -> value operator value SEMICOLON .)
    TEXT            reduce using rule 83 (operation -> value operator value SEMICOLON .)
    SIGN            reduce using rule 83 (operation -> value operator value SEMICOLON .)
    RETURN          reduce using rule 83 (operation -> value operator value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 83 (operation -> value operator value SEMICOLON .)


state 155

    (86) assignment -> get_array_element EQUAL value SEMICOLON .

    IF              reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    VAR             reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    WHILE           reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    INT             reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    CHAR            reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    STRING          reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    BOOL            reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    LONG            reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    SHORT           reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FOR             reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    TEXT            reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    SIGN            reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RETURN          reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 86 (assignment -> get_array_element EQUAL value SEMICOLON .)


state 156

    (87) assignment -> get_array_element EQUAL VAR SEMICOLON .

    IF              reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    INT             reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    TEXT            reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    SIGN            reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 87 (assignment -> get_array_element EQUAL VAR SEMICOLON .)


state 157

    (40) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 163


state 158

    (45) for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 45 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 159

    (41) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    EQUAL           shift and go to state 164


state 160

    (48) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (46) loop -> . while_loop
    (47) loop -> . for_loop
    (48) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (84) assignment -> . VAR EQUAL value SEMICOLON
    (85) assignment -> . VAR EQUAL VAR SEMICOLON
    (86) assignment -> . get_array_element EQUAL value SEMICOLON
    (87) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (81) operation -> . increment
    (82) operation -> . decrement
    (83) operation -> . value operator value SEMICOLON
    (95) empty -> .
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (40) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (45) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (78) increment -> . VAR PLUS_PLUS SEMICOLON
    (79) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (92) array_declaration -> . type get_array_element SEMICOLON
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 97
    VAR             shift and go to state 86
    RIGHT_BR_CURLY  reduce using rule 95 (empty -> .)
    WHILE           shift and go to state 102
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    FOR             shift and go to state 104
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

  ! IF              [ reduce using rule 95 (empty -> .) ]
  ! VAR             [ reduce using rule 95 (empty -> .) ]
  ! WHILE           [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! STRING          [ reduce using rule 95 (empty -> .) ]
  ! BOOL            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]
  ! FOR             [ reduce using rule 95 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 95 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 95 (empty -> .) ]
  ! TEXT            [ reduce using rule 95 (empty -> .) ]
  ! SIGN            [ reduce using rule 95 (empty -> .) ]

    instructions                   shift and go to state 165
    instruction                    shift and go to state 88
    loop                           shift and go to state 89
    if_statement                   shift and go to state 90
    assignment                     shift and go to state 91
    operation                      shift and go to state 92
    empty                          shift and go to state 93
    var_declaration                shift and go to state 94
    while_loop                     shift and go to state 95
    for_loop                       shift and go to state 96
    value                          shift and go to state 98
    get_array_element              shift and go to state 99
    increment                      shift and go to state 100
    decrement                      shift and go to state 101
    type                           shift and go to state 85
    array_declaration              shift and go to state 68
    for_loop_statement             shift and go to state 103
    number                         shift and go to state 52
    string_value                   shift and go to state 54

state 161

    (50) comparisons -> comparison conjunction comparisons .

    RIGHT_BR        reduce using rule 50 (comparisons -> comparison conjunction comparisons .)


state 162

    (93) comparison -> value comparator value .

    AND             reduce using rule 93 (comparison -> value comparator value .)
    OR              reduce using rule 93 (comparison -> value comparator value .)
    RIGHT_BR        reduce using rule 93 (comparison -> value comparator value .)


state 163

    (40) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (32) instructions -> . instruction
    (33) instructions -> . instruction instructions
    (34) instruction -> . loop
    (35) instruction -> . if_statement
    (36) instruction -> . assignment
    (37) instruction -> . operation
    (38) instruction -> . empty
    (39) instruction -> . var_declaration
    (46) loop -> . while_loop
    (47) loop -> . for_loop
    (48) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (84) assignment -> . VAR EQUAL value SEMICOLON
    (85) assignment -> . VAR EQUAL VAR SEMICOLON
    (86) assignment -> . get_array_element EQUAL value SEMICOLON
    (87) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (81) operation -> . increment
    (82) operation -> . decrement
    (83) operation -> . value operator value SEMICOLON
    (95) empty -> .
    (88) var_declaration -> . type VAR SEMICOLON
    (89) var_declaration -> . array_declaration
    (90) var_declaration -> . type VAR EQUAL value SEMICOLON
    (91) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (40) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (45) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (78) increment -> . VAR PLUS_PLUS SEMICOLON
    (79) decrement -> . VAR MINUS_MINUS SEMICOLON
    (74) value -> . number
    (75) value -> . VAR
    (76) value -> . get_array_element
    (77) value -> . string_value
    (61) type -> . INT
    (62) type -> . CHAR
    (63) type -> . STRING
    (64) type -> . BOOL
    (65) type -> . FLOAT
    (66) type -> . LONG
    (67) type -> . SHORT
    (92) array_declaration -> . type get_array_element SEMICOLON
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (72) number -> . INT_NUMBER
    (73) number -> . FLOAT_NUMBER
    (70) string_value -> . TEXT
    (71) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 97
    VAR             shift and go to state 86
    RIGHT_BR_CURLY  reduce using rule 95 (empty -> .)
    WHILE           shift and go to state 102
    INT             shift and go to state 20
    CHAR            shift and go to state 21
    STRING          shift and go to state 16
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    FOR             shift and go to state 104
    INT_NUMBER      shift and go to state 55
    FLOAT_NUMBER    shift and go to state 56
    TEXT            shift and go to state 57
    SIGN            shift and go to state 58

  ! IF              [ reduce using rule 95 (empty -> .) ]
  ! VAR             [ reduce using rule 95 (empty -> .) ]
  ! WHILE           [ reduce using rule 95 (empty -> .) ]
  ! INT             [ reduce using rule 95 (empty -> .) ]
  ! CHAR            [ reduce using rule 95 (empty -> .) ]
  ! STRING          [ reduce using rule 95 (empty -> .) ]
  ! BOOL            [ reduce using rule 95 (empty -> .) ]
  ! FLOAT           [ reduce using rule 95 (empty -> .) ]
  ! LONG            [ reduce using rule 95 (empty -> .) ]
  ! SHORT           [ reduce using rule 95 (empty -> .) ]
  ! FOR             [ reduce using rule 95 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 95 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 95 (empty -> .) ]
  ! TEXT            [ reduce using rule 95 (empty -> .) ]
  ! SIGN            [ reduce using rule 95 (empty -> .) ]

    instructions                   shift and go to state 166
    instruction                    shift and go to state 88
    loop                           shift and go to state 89
    if_statement                   shift and go to state 90
    assignment                     shift and go to state 91
    operation                      shift and go to state 92
    empty                          shift and go to state 93
    var_declaration                shift and go to state 94
    while_loop                     shift and go to state 95
    for_loop                       shift and go to state 96
    value                          shift and go to state 98
    get_array_element              shift and go to state 99
    increment                      shift and go to state 100
    decrement                      shift and go to state 101
    type                           shift and go to state 85
    array_declaration              shift and go to state 68
    for_loop_statement             shift and go to state 103
    number                         shift and go to state 52
    string_value                   shift and go to state 54

state 164

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 167


state 165

    (48) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 168


state 166

    (40) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 169


state 167

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 170


state 168

    (48) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 48 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 169

    (40) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 40 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 170

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 171


state 171

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LESS            shift and go to state 172
    LESS_EQUAL      shift and go to state 173
    GREATER         shift and go to state 174
    GREATER_EQUAL   shift and go to state 175


state 172

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 176


state 173

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 177


state 174

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 178


state 175

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 179


state 176

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 180


state 177

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 181


state 178

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 182


state 179

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 183


state 180

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 184


state 181

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 185


state 182

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 186


state 183

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 187


state 184

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 188


state 185

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 189


state 186

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 190


state 187

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 191


state 188

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 192


state 189

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 193


state 190

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 194


state 191

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 195


state 192

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 41 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 193

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 42 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 194

    (43) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 43 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)


state 195

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 44 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USING in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for HASH in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for LONG in state 0 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 0 resolved as shift
WARNING: shift/reduce conflict for USING in state 5 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 5 resolved as shift
WARNING: shift/reduce conflict for HASH in state 5 resolved as shift
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for LONG in state 5 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 5 resolved as shift
WARNING: shift/reduce conflict for USING in state 6 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 6 resolved as shift
WARNING: shift/reduce conflict for HASH in state 6 resolved as shift
WARNING: shift/reduce conflict for VOID in state 6 resolved as shift
WARNING: shift/reduce conflict for INT in state 6 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 6 resolved as shift
WARNING: shift/reduce conflict for STRING in state 6 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 6 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 6 resolved as shift
WARNING: shift/reduce conflict for LONG in state 6 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 6 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 50 resolved as shift
WARNING: shift/reduce conflict for IF in state 81 resolved as shift
WARNING: shift/reduce conflict for VAR in state 81 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 81 resolved as shift
WARNING: shift/reduce conflict for INT in state 81 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 81 resolved as shift
WARNING: shift/reduce conflict for STRING in state 81 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 81 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 81 resolved as shift
WARNING: shift/reduce conflict for LONG in state 81 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 81 resolved as shift
WARNING: shift/reduce conflict for FOR in state 81 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 81 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 81 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 81 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 81 resolved as shift
WARNING: shift/reduce conflict for IF in state 82 resolved as shift
WARNING: shift/reduce conflict for VAR in state 82 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 82 resolved as shift
WARNING: shift/reduce conflict for INT in state 82 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 82 resolved as shift
WARNING: shift/reduce conflict for STRING in state 82 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 82 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 82 resolved as shift
WARNING: shift/reduce conflict for LONG in state 82 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 82 resolved as shift
WARNING: shift/reduce conflict for FOR in state 82 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 82 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 82 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 82 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 82 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for VAR in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for INT in state 88 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 88 resolved as shift
WARNING: shift/reduce conflict for STRING in state 88 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 88 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 88 resolved as shift
WARNING: shift/reduce conflict for LONG in state 88 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 88 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 88 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 88 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 121 resolved as shift
WARNING: shift/reduce conflict for VAR in state 121 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 121 resolved as shift
WARNING: shift/reduce conflict for INT in state 121 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 121 resolved as shift
WARNING: shift/reduce conflict for STRING in state 121 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 121 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 121 resolved as shift
WARNING: shift/reduce conflict for LONG in state 121 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 121 resolved as shift
WARNING: shift/reduce conflict for FOR in state 121 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 121 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 121 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 121 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 121 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 124 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 136 resolved as shift
WARNING: shift/reduce conflict for IF in state 160 resolved as shift
WARNING: shift/reduce conflict for VAR in state 160 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 160 resolved as shift
WARNING: shift/reduce conflict for INT in state 160 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 160 resolved as shift
WARNING: shift/reduce conflict for STRING in state 160 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 160 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 160 resolved as shift
WARNING: shift/reduce conflict for LONG in state 160 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 160 resolved as shift
WARNING: shift/reduce conflict for FOR in state 160 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 160 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 160 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 160 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 160 resolved as shift
WARNING: shift/reduce conflict for IF in state 163 resolved as shift
WARNING: shift/reduce conflict for VAR in state 163 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 163 resolved as shift
WARNING: shift/reduce conflict for INT in state 163 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 163 resolved as shift
WARNING: shift/reduce conflict for STRING in state 163 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 163 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 163 resolved as shift
WARNING: shift/reduce conflict for LONG in state 163 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 163 resolved as shift
WARNING: shift/reduce conflict for FOR in state 163 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 163 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 163 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 163 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 163 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> empty)
WARNING: rejected rule (program_components -> empty) in state 4
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> empty)
WARNING: rejected rule (program_component -> empty) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (program_components -> program_component)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 11 resolved using rule (program_component -> array_declaration)
WARNING: rejected rule (var_declaration -> array_declaration) in state 11
WARNING: reduce/reduce conflict in state 27 resolved using rule (program_components -> empty)
WARNING: rejected rule (program_component -> empty) in state 27
WARNING: reduce/reduce conflict in state 88 resolved using rule (instructions -> instruction)
WARNING: rejected rule (empty -> <empty>) in state 88
