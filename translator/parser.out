Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT
    ID

Grammar

Rule 0     S' -> start_symbol
Rule 1     start_symbol -> program
Rule 2     program -> program_components
Rule 3     program -> empty
Rule 4     program_components -> program_component
Rule 5     program_components -> program_component program_components
Rule 6     program_component -> function_definition
Rule 7     program_component -> class_definition
Rule 8     program_component -> including
Rule 9     program_component -> using_namespace_std
Rule 10    program_component -> var_declaration
Rule 11    program_component -> array_declaration
Rule 12    program_component -> comment
Rule 13    program_component -> empty
Rule 14    using_namespace_std -> USING NAMESPACE STD SEMICOLON
Rule 15    including -> HASH INCLUDE LIBRARY
Rule 16    function_definition -> type_function_definition
Rule 17    function_definition -> void_function_definition
Rule 18    type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
Rule 19    void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 20    function_var_declaration -> var_declaration_no_semicolon
Rule 21    function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration
Rule 22    function_var_declaration -> empty
Rule 23    var_declaration_no_semicolon -> type VAR
Rule 24    function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON
Rule 25    function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON
Rule 26    class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON
Rule 27    var_list -> value
Rule 28    var_list -> value COMMA var_list
Rule 29    class_declaration -> var_declaration
Rule 30    class_declaration -> function_definition
Rule 31    class_declarations -> class_declaration
Rule 32    class_declarations -> class_declaration class_declarations
Rule 33    class_declarations -> empty
Rule 34    instructions -> instruction
Rule 35    instructions -> instruction instructions
Rule 36    instruction -> loop
Rule 37    instruction -> if_statement
Rule 38    instruction -> assignment
Rule 39    instruction -> operation
Rule 40    instruction -> empty
Rule 41    instruction -> var_declaration
Rule 42    instruction -> print
Rule 43    instruction -> input
Rule 44    instruction -> comment
Rule 45    instruction -> function_call
Rule 46    while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 47    while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 48    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 49    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 50    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 51    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 52    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 53    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 54    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 55    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 56    for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 57    loop -> while_loop
Rule 58    loop -> for_loop
Rule 59    else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 60    if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
Rule 61    if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
Rule 62    comparisons -> comparison
Rule 63    comparisons -> comparison conjunction comparisons
Rule 64    comparison -> value comparator value
Rule 65    comparison -> value EQUAL_EQUAL EMPTY_TEXT
Rule 66    comparator -> LESS
Rule 67    comparator -> LESS_EQUAL
Rule 68    comparator -> GREATER
Rule 69    comparator -> GREATER_EQUAL
Rule 70    comparator -> EQUAL_EQUAL
Rule 71    comparator -> NOT_EQUAL
Rule 72    operator -> PLUS
Rule 73    operator -> MINUS
Rule 74    operator -> MULTIPLY
Rule 75    operator -> DIVIDE
Rule 76    type -> INT
Rule 77    type -> CHAR
Rule 78    type -> STRING
Rule 79    type -> BOOL
Rule 80    type -> FLOAT
Rule 81    type -> LONG
Rule 82    type -> SHORT
Rule 83    type -> DOUBLE
Rule 84    conjunction -> AND
Rule 85    conjunction -> OR
Rule 86    string_value -> TEXT
Rule 87    string_value -> SIGN
Rule 88    number -> INT_NUMBER
Rule 89    number -> FLOAT_NUMBER
Rule 90    bool_value -> TRUE
Rule 91    bool_value -> FALSE
Rule 92    value -> number
Rule 93    value -> VAR
Rule 94    value -> get_array_element
Rule 95    value -> string_value
Rule 96    value -> bool_value
Rule 97    value -> math_operation
Rule 98    increment -> VAR PLUS_PLUS SEMICOLON
Rule 99    decrement -> VAR MINUS_MINUS SEMICOLON
Rule 100   math_operation -> VAR operator VAR
Rule 101   math_operation -> VAR operator number
Rule 102   math_operation -> number operator number
Rule 103   operation -> increment
Rule 104   operation -> decrement
Rule 105   get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
Rule 106   get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
Rule 107   assignment -> VAR EQUAL value SEMICOLON
Rule 108   assignment -> VAR EQUAL VAR SEMICOLON
Rule 109   assignment -> VAR EQUAL function_call
Rule 110   assignment -> get_array_element EQUAL value SEMICOLON
Rule 111   assignment -> get_array_element EQUAL VAR SEMICOLON
Rule 112   var_declaration -> type VAR SEMICOLON
Rule 113   var_declaration -> array_declaration
Rule 114   var_declaration -> type VAR EQUAL value SEMICOLON
Rule 115   var_declaration -> type VAR EQUAL VAR SEMICOLON
Rule 116   var_declaration -> type VAR EQUAL function_call
Rule 117   array_declaration -> type get_array_element SEMICOLON
Rule 118   out -> OUT VAR
Rule 119   out -> OUT VAR out
Rule 120   out -> OUT TEXT
Rule 121   out -> OUT TEXT out
Rule 122   out -> OUT ENDL
Rule 123   out -> OUT ENDL out
Rule 124   in -> IN VAR
Rule 125   in -> IN VAR in
Rule 126   print -> COUT out SEMICOLON
Rule 127   input -> CIN in SEMICOLON
Rule 128   returning -> RETURN value SEMICOLON
Rule 129   comment -> COMMENT
Rule 130   empty -> <empty>
Rule 131   change_tab_number -> <empty>
Rule 132   change_inside_class -> <empty>

Terminals, with rules where they appear

AND                  : 84
BOOL                 : 79
CHAR                 : 77
CIN                  : 127
CLASS                : 26
COMMA                : 21 28
COMMENT              : 129
COUT                 : 126
DIVIDE               : 75
DOT                  : 
DOUBLE               : 83
ELSE                 : 59
EMPTY_TEXT           : 65
ENDL                 : 122 123
EQUAL                : 48 49 50 51 52 53 54 55 107 108 109 110 111 114 115 116
EQUAL_EQUAL          : 65 70
FALSE                : 91
FLOAT                : 80
FLOAT_NUMBER         : 89
FOR                  : 48 49 50 51 52 53 54 55
GREATER              : 52 53 68
GREATER_EQUAL        : 54 55 69
HASH                 : 15
ID                   : 
IF                   : 60 61
IN                   : 124 125
INCLUDE              : 15
INT                  : 48 49 50 51 52 53 54 55 76
INT_NUMBER           : 48 48 49 50 50 51 52 52 53 54 54 55 88 105
LEFT_BR              : 18 19 24 25 46 47 48 49 50 51 52 53 54 55 60 61
LEFT_BR_CURLY        : 18 19 26 46 47 56 59 60 61
LEFT_BR_SQUARED      : 105 106
LESS                 : 48 49 66
LESS_EQUAL           : 50 51 67
LIBRARY              : 15
LONG                 : 81
MINUS                : 73
MINUS_MINUS          : 52 53 54 55 99
MULTIPLY             : 74
NAMESPACE            : 14
NOT_EQUAL            : 71
OR                   : 85
OUT                  : 118 119 120 121 122 123
PLUS                 : 72
PLUS_PLUS            : 48 49 50 51 98
RETURN               : 128
RIGHT_BR             : 18 19 24 25 46 47 48 49 50 51 52 53 54 55 60 61
RIGHT_BR_CURLY       : 18 19 26 46 47 56 59 60 61
RIGHT_BR_SQUARED     : 105 106
SEMICOLON            : 14 24 25 26 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 98 99 107 108 110 111 112 114 115 117 126 127 128
SHORT                : 82
SIGN                 : 87
STD                  : 14
STRING               : 78
TEXT                 : 86 120 121
TRUE                 : 90
USING                : 14
VAR                  : 18 19 23 24 25 26 48 48 48 49 49 49 49 50 50 50 51 51 51 51 52 52 52 53 53 53 53 54 54 54 55 55 55 55 93 98 99 100 100 101 105 106 106 107 108 108 109 111 112 114 115 115 116 118 119 124 125
VOID                 : 19
WHILE                : 46 47
error                : 

Nonterminals, with rules where they appear

array_declaration    : 11 113
assignment           : 38
bool_value           : 47 96
change_inside_class  : 26
change_tab_number    : 18 19 26 46 47 56 60 61
class_declaration    : 31 32
class_declarations   : 26 32
class_definition     : 7
comment              : 12 44
comparator           : 64
comparison           : 62 63
comparisons          : 46 60 61 63
conjunction          : 63
decrement            : 104
else_statement       : 61
empty                : 3 13 22 33 40
for_loop             : 58
for_loop_statement   : 56
function_call        : 45 109 116
function_definition  : 6 30
function_var_declaration : 18 19 21
get_array_element    : 94 110 111 117
if_statement         : 37
in                   : 125 127
including            : 8
increment            : 103
input                : 43
instruction          : 34 35
instructions         : 18 19 35 46 47 56 59 60 61
loop                 : 36
math_operation       : 97
number               : 92 101 102 102
operation            : 39
operator             : 100 101 102
out                  : 119 121 123 126
print                : 42
program              : 1
program_component    : 4 5
program_components   : 2 5
returning            : 18
start_symbol         : 0
string_value         : 95
type                 : 18 23 112 114 115 116 117
type_function_definition : 16
using_namespace_std  : 9
value                : 27 28 64 64 65 107 110 114 128
var_declaration      : 10 29 41
var_declaration_no_semicolon : 20 21
var_list             : 25 28
void_function_definition : 17
while_loop           : 57

Parsing method: LALR

state 0

    (0) S' -> . start_symbol
    (1) start_symbol -> . program
    (2) program -> . program_components
    (3) program -> . empty
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (130) empty -> .
    (6) program_component -> . function_definition
    (7) program_component -> . class_definition
    (8) program_component -> . including
    (9) program_component -> . using_namespace_std
    (10) program_component -> . var_declaration
    (11) program_component -> . array_declaration
    (12) program_component -> . comment
    (13) program_component -> . empty
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (26) class_definition -> . CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (117) array_declaration -> . type get_array_element SEMICOLON
    (129) comment -> . COMMENT
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 130 (empty -> .)
    CLASS           shift and go to state 15
    HASH            shift and go to state 16
    USING           shift and go to state 17
    COMMENT         shift and go to state 19
    VOID            shift and go to state 20
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

  ! CLASS           [ reduce using rule 130 (empty -> .) ]
  ! HASH            [ reduce using rule 130 (empty -> .) ]
  ! USING           [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! VOID            [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]

    start_symbol                   shift and go to state 1
    program                        shift and go to state 2
    program_components             shift and go to state 3
    empty                          shift and go to state 4
    program_component              shift and go to state 5
    function_definition            shift and go to state 6
    class_definition               shift and go to state 7
    including                      shift and go to state 8
    using_namespace_std            shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    comment                        shift and go to state 12
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 18

state 1

    (0) S' -> start_symbol .



state 2

    (1) start_symbol -> program .

    $end            reduce using rule 1 (start_symbol -> program .)


state 3

    (2) program -> program_components .

    $end            reduce using rule 2 (program -> program_components .)


state 4

    (3) program -> empty .
    (13) program_component -> empty .

  ! reduce/reduce conflict for $end resolved using rule 3 (program -> empty .)
    $end            reduce using rule 3 (program -> empty .)
    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    COMMENT         reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)
    DOUBLE          reduce using rule 13 (program_component -> empty .)

  ! $end            [ reduce using rule 13 (program_component -> empty .) ]


state 5

    (4) program_components -> program_component .
    (5) program_components -> program_component . program_components
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_component -> . function_definition
    (7) program_component -> . class_definition
    (8) program_component -> . including
    (9) program_component -> . using_namespace_std
    (10) program_component -> . var_declaration
    (11) program_component -> . array_declaration
    (12) program_component -> . comment
    (13) program_component -> . empty
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (26) class_definition -> . CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (117) array_declaration -> . type get_array_element SEMICOLON
    (129) comment -> . COMMENT
    (130) empty -> .
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (program_components -> program_component .)
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 4 (program_components -> program_component .)
    CLASS           shift and go to state 15
    HASH            shift and go to state 16
    USING           shift and go to state 17
    COMMENT         shift and go to state 19
    VOID            shift and go to state 20
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

  ! CLASS           [ reduce using rule 130 (empty -> .) ]
  ! HASH            [ reduce using rule 130 (empty -> .) ]
  ! USING           [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! VOID            [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]
  ! $end            [ reduce using rule 130 (empty -> .) ]

    program_component              shift and go to state 5
    program_components             shift and go to state 29
    function_definition            shift and go to state 6
    class_definition               shift and go to state 7
    including                      shift and go to state 8
    using_namespace_std            shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    comment                        shift and go to state 12
    empty                          shift and go to state 30
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 18

state 6

    (6) program_component -> function_definition .

    CLASS           reduce using rule 6 (program_component -> function_definition .)
    HASH            reduce using rule 6 (program_component -> function_definition .)
    USING           reduce using rule 6 (program_component -> function_definition .)
    COMMENT         reduce using rule 6 (program_component -> function_definition .)
    VOID            reduce using rule 6 (program_component -> function_definition .)
    INT             reduce using rule 6 (program_component -> function_definition .)
    CHAR            reduce using rule 6 (program_component -> function_definition .)
    STRING          reduce using rule 6 (program_component -> function_definition .)
    BOOL            reduce using rule 6 (program_component -> function_definition .)
    FLOAT           reduce using rule 6 (program_component -> function_definition .)
    LONG            reduce using rule 6 (program_component -> function_definition .)
    SHORT           reduce using rule 6 (program_component -> function_definition .)
    DOUBLE          reduce using rule 6 (program_component -> function_definition .)
    $end            reduce using rule 6 (program_component -> function_definition .)


state 7

    (7) program_component -> class_definition .

    CLASS           reduce using rule 7 (program_component -> class_definition .)
    HASH            reduce using rule 7 (program_component -> class_definition .)
    USING           reduce using rule 7 (program_component -> class_definition .)
    COMMENT         reduce using rule 7 (program_component -> class_definition .)
    VOID            reduce using rule 7 (program_component -> class_definition .)
    INT             reduce using rule 7 (program_component -> class_definition .)
    CHAR            reduce using rule 7 (program_component -> class_definition .)
    STRING          reduce using rule 7 (program_component -> class_definition .)
    BOOL            reduce using rule 7 (program_component -> class_definition .)
    FLOAT           reduce using rule 7 (program_component -> class_definition .)
    LONG            reduce using rule 7 (program_component -> class_definition .)
    SHORT           reduce using rule 7 (program_component -> class_definition .)
    DOUBLE          reduce using rule 7 (program_component -> class_definition .)
    $end            reduce using rule 7 (program_component -> class_definition .)


state 8

    (8) program_component -> including .

    CLASS           reduce using rule 8 (program_component -> including .)
    HASH            reduce using rule 8 (program_component -> including .)
    USING           reduce using rule 8 (program_component -> including .)
    COMMENT         reduce using rule 8 (program_component -> including .)
    VOID            reduce using rule 8 (program_component -> including .)
    INT             reduce using rule 8 (program_component -> including .)
    CHAR            reduce using rule 8 (program_component -> including .)
    STRING          reduce using rule 8 (program_component -> including .)
    BOOL            reduce using rule 8 (program_component -> including .)
    FLOAT           reduce using rule 8 (program_component -> including .)
    LONG            reduce using rule 8 (program_component -> including .)
    SHORT           reduce using rule 8 (program_component -> including .)
    DOUBLE          reduce using rule 8 (program_component -> including .)
    $end            reduce using rule 8 (program_component -> including .)


state 9

    (9) program_component -> using_namespace_std .

    CLASS           reduce using rule 9 (program_component -> using_namespace_std .)
    HASH            reduce using rule 9 (program_component -> using_namespace_std .)
    USING           reduce using rule 9 (program_component -> using_namespace_std .)
    COMMENT         reduce using rule 9 (program_component -> using_namespace_std .)
    VOID            reduce using rule 9 (program_component -> using_namespace_std .)
    INT             reduce using rule 9 (program_component -> using_namespace_std .)
    CHAR            reduce using rule 9 (program_component -> using_namespace_std .)
    STRING          reduce using rule 9 (program_component -> using_namespace_std .)
    BOOL            reduce using rule 9 (program_component -> using_namespace_std .)
    FLOAT           reduce using rule 9 (program_component -> using_namespace_std .)
    LONG            reduce using rule 9 (program_component -> using_namespace_std .)
    SHORT           reduce using rule 9 (program_component -> using_namespace_std .)
    DOUBLE          reduce using rule 9 (program_component -> using_namespace_std .)
    $end            reduce using rule 9 (program_component -> using_namespace_std .)


state 10

    (10) program_component -> var_declaration .

    CLASS           reduce using rule 10 (program_component -> var_declaration .)
    HASH            reduce using rule 10 (program_component -> var_declaration .)
    USING           reduce using rule 10 (program_component -> var_declaration .)
    COMMENT         reduce using rule 10 (program_component -> var_declaration .)
    VOID            reduce using rule 10 (program_component -> var_declaration .)
    INT             reduce using rule 10 (program_component -> var_declaration .)
    CHAR            reduce using rule 10 (program_component -> var_declaration .)
    STRING          reduce using rule 10 (program_component -> var_declaration .)
    BOOL            reduce using rule 10 (program_component -> var_declaration .)
    FLOAT           reduce using rule 10 (program_component -> var_declaration .)
    LONG            reduce using rule 10 (program_component -> var_declaration .)
    SHORT           reduce using rule 10 (program_component -> var_declaration .)
    DOUBLE          reduce using rule 10 (program_component -> var_declaration .)
    $end            reduce using rule 10 (program_component -> var_declaration .)


state 11

    (11) program_component -> array_declaration .
    (113) var_declaration -> array_declaration .

  ! reduce/reduce conflict for CLASS resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for HASH resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for USING resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for COMMENT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for VOID resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for INT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for CHAR resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for BOOL resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for LONG resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for SHORT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for $end resolved using rule 11 (program_component -> array_declaration .)
    CLASS           reduce using rule 11 (program_component -> array_declaration .)
    HASH            reduce using rule 11 (program_component -> array_declaration .)
    USING           reduce using rule 11 (program_component -> array_declaration .)
    COMMENT         reduce using rule 11 (program_component -> array_declaration .)
    VOID            reduce using rule 11 (program_component -> array_declaration .)
    INT             reduce using rule 11 (program_component -> array_declaration .)
    CHAR            reduce using rule 11 (program_component -> array_declaration .)
    STRING          reduce using rule 11 (program_component -> array_declaration .)
    BOOL            reduce using rule 11 (program_component -> array_declaration .)
    FLOAT           reduce using rule 11 (program_component -> array_declaration .)
    LONG            reduce using rule 11 (program_component -> array_declaration .)
    SHORT           reduce using rule 11 (program_component -> array_declaration .)
    DOUBLE          reduce using rule 11 (program_component -> array_declaration .)
    $end            reduce using rule 11 (program_component -> array_declaration .)

  ! CLASS           [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! HASH            [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! USING           [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! COMMENT         [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! VOID            [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! INT             [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! CHAR            [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! STRING          [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! BOOL            [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! FLOAT           [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! LONG            [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! SHORT           [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! DOUBLE          [ reduce using rule 113 (var_declaration -> array_declaration .) ]
  ! $end            [ reduce using rule 113 (var_declaration -> array_declaration .) ]


state 12

    (12) program_component -> comment .

    CLASS           reduce using rule 12 (program_component -> comment .)
    HASH            reduce using rule 12 (program_component -> comment .)
    USING           reduce using rule 12 (program_component -> comment .)
    COMMENT         reduce using rule 12 (program_component -> comment .)
    VOID            reduce using rule 12 (program_component -> comment .)
    INT             reduce using rule 12 (program_component -> comment .)
    CHAR            reduce using rule 12 (program_component -> comment .)
    STRING          reduce using rule 12 (program_component -> comment .)
    BOOL            reduce using rule 12 (program_component -> comment .)
    FLOAT           reduce using rule 12 (program_component -> comment .)
    LONG            reduce using rule 12 (program_component -> comment .)
    SHORT           reduce using rule 12 (program_component -> comment .)
    DOUBLE          reduce using rule 12 (program_component -> comment .)
    $end            reduce using rule 12 (program_component -> comment .)


state 13

    (16) function_definition -> type_function_definition .

    CLASS           reduce using rule 16 (function_definition -> type_function_definition .)
    HASH            reduce using rule 16 (function_definition -> type_function_definition .)
    USING           reduce using rule 16 (function_definition -> type_function_definition .)
    COMMENT         reduce using rule 16 (function_definition -> type_function_definition .)
    VOID            reduce using rule 16 (function_definition -> type_function_definition .)
    INT             reduce using rule 16 (function_definition -> type_function_definition .)
    CHAR            reduce using rule 16 (function_definition -> type_function_definition .)
    STRING          reduce using rule 16 (function_definition -> type_function_definition .)
    BOOL            reduce using rule 16 (function_definition -> type_function_definition .)
    FLOAT           reduce using rule 16 (function_definition -> type_function_definition .)
    LONG            reduce using rule 16 (function_definition -> type_function_definition .)
    SHORT           reduce using rule 16 (function_definition -> type_function_definition .)
    DOUBLE          reduce using rule 16 (function_definition -> type_function_definition .)
    $end            reduce using rule 16 (function_definition -> type_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 16 (function_definition -> type_function_definition .)


state 14

    (17) function_definition -> void_function_definition .

    CLASS           reduce using rule 17 (function_definition -> void_function_definition .)
    HASH            reduce using rule 17 (function_definition -> void_function_definition .)
    USING           reduce using rule 17 (function_definition -> void_function_definition .)
    COMMENT         reduce using rule 17 (function_definition -> void_function_definition .)
    VOID            reduce using rule 17 (function_definition -> void_function_definition .)
    INT             reduce using rule 17 (function_definition -> void_function_definition .)
    CHAR            reduce using rule 17 (function_definition -> void_function_definition .)
    STRING          reduce using rule 17 (function_definition -> void_function_definition .)
    BOOL            reduce using rule 17 (function_definition -> void_function_definition .)
    FLOAT           reduce using rule 17 (function_definition -> void_function_definition .)
    LONG            reduce using rule 17 (function_definition -> void_function_definition .)
    SHORT           reduce using rule 17 (function_definition -> void_function_definition .)
    DOUBLE          reduce using rule 17 (function_definition -> void_function_definition .)
    $end            reduce using rule 17 (function_definition -> void_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 17 (function_definition -> void_function_definition .)


state 15

    (26) class_definition -> CLASS . VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON

    VAR             shift and go to state 31


state 16

    (15) including -> HASH . INCLUDE LIBRARY

    INCLUDE         shift and go to state 32


state 17

    (14) using_namespace_std -> USING . NAMESPACE STD SEMICOLON

    NAMESPACE       shift and go to state 33


state 18

    (112) var_declaration -> type . VAR SEMICOLON
    (114) var_declaration -> type . VAR EQUAL value SEMICOLON
    (115) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> type . VAR EQUAL function_call
    (117) array_declaration -> type . get_array_element SEMICOLON
    (18) type_function_definition -> type . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED

    VAR             shift and go to state 34

    get_array_element              shift and go to state 35

state 19

    (129) comment -> COMMENT .

    CLASS           reduce using rule 129 (comment -> COMMENT .)
    HASH            reduce using rule 129 (comment -> COMMENT .)
    USING           reduce using rule 129 (comment -> COMMENT .)
    COMMENT         reduce using rule 129 (comment -> COMMENT .)
    VOID            reduce using rule 129 (comment -> COMMENT .)
    INT             reduce using rule 129 (comment -> COMMENT .)
    CHAR            reduce using rule 129 (comment -> COMMENT .)
    STRING          reduce using rule 129 (comment -> COMMENT .)
    BOOL            reduce using rule 129 (comment -> COMMENT .)
    FLOAT           reduce using rule 129 (comment -> COMMENT .)
    LONG            reduce using rule 129 (comment -> COMMENT .)
    SHORT           reduce using rule 129 (comment -> COMMENT .)
    DOUBLE          reduce using rule 129 (comment -> COMMENT .)
    $end            reduce using rule 129 (comment -> COMMENT .)
    IF              reduce using rule 129 (comment -> COMMENT .)
    VAR             reduce using rule 129 (comment -> COMMENT .)
    COUT            reduce using rule 129 (comment -> COMMENT .)
    CIN             reduce using rule 129 (comment -> COMMENT .)
    WHILE           reduce using rule 129 (comment -> COMMENT .)
    FOR             reduce using rule 129 (comment -> COMMENT .)
    RETURN          reduce using rule 129 (comment -> COMMENT .)
    RIGHT_BR_CURLY  reduce using rule 129 (comment -> COMMENT .)


state 20

    (19) void_function_definition -> VOID . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    VAR             shift and go to state 36


state 21

    (76) type -> INT .

    VAR             reduce using rule 76 (type -> INT .)


state 22

    (77) type -> CHAR .

    VAR             reduce using rule 77 (type -> CHAR .)


state 23

    (78) type -> STRING .

    VAR             reduce using rule 78 (type -> STRING .)


state 24

    (79) type -> BOOL .

    VAR             reduce using rule 79 (type -> BOOL .)


state 25

    (80) type -> FLOAT .

    VAR             reduce using rule 80 (type -> FLOAT .)


state 26

    (81) type -> LONG .

    VAR             reduce using rule 81 (type -> LONG .)


state 27

    (82) type -> SHORT .

    VAR             reduce using rule 82 (type -> SHORT .)


state 28

    (83) type -> DOUBLE .

    VAR             reduce using rule 83 (type -> DOUBLE .)


state 29

    (5) program_components -> program_component program_components .

    $end            reduce using rule 5 (program_components -> program_component program_components .)


state 30

    (13) program_component -> empty .

    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    COMMENT         reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)
    DOUBLE          reduce using rule 13 (program_component -> empty .)
    $end            reduce using rule 13 (program_component -> empty .)


state 31

    (26) class_definition -> CLASS VAR . LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON

    LEFT_BR_CURLY   shift and go to state 37


state 32

    (15) including -> HASH INCLUDE . LIBRARY

    LIBRARY         shift and go to state 38


state 33

    (14) using_namespace_std -> USING NAMESPACE . STD SEMICOLON

    STD             shift and go to state 39


state 34

    (112) var_declaration -> type VAR . SEMICOLON
    (114) var_declaration -> type VAR . EQUAL value SEMICOLON
    (115) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (116) var_declaration -> type VAR . EQUAL function_call
    (18) type_function_definition -> type VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (105) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 40
    EQUAL           shift and go to state 41
    LEFT_BR         shift and go to state 42
    LEFT_BR_SQUARED shift and go to state 43


state 35

    (117) array_declaration -> type get_array_element . SEMICOLON

    SEMICOLON       shift and go to state 44


state 36

    (19) void_function_definition -> VOID VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 45


state 37

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY . change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON
    (131) change_tab_number -> .

    INT             reduce using rule 131 (change_tab_number -> .)
    CHAR            reduce using rule 131 (change_tab_number -> .)
    STRING          reduce using rule 131 (change_tab_number -> .)
    BOOL            reduce using rule 131 (change_tab_number -> .)
    FLOAT           reduce using rule 131 (change_tab_number -> .)
    LONG            reduce using rule 131 (change_tab_number -> .)
    SHORT           reduce using rule 131 (change_tab_number -> .)
    DOUBLE          reduce using rule 131 (change_tab_number -> .)
    VOID            reduce using rule 131 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 131 (change_tab_number -> .)

    change_tab_number              shift and go to state 46

state 38

    (15) including -> HASH INCLUDE LIBRARY .

    CLASS           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    HASH            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    USING           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    COMMENT         reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    VOID            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    INT             reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    CHAR            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    STRING          reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    BOOL            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    FLOAT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    LONG            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    SHORT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    DOUBLE          reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    $end            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)


state 39

    (14) using_namespace_std -> USING NAMESPACE STD . SEMICOLON

    SEMICOLON       shift and go to state 47


state 40

    (112) var_declaration -> type VAR SEMICOLON .

    CLASS           reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    HASH            reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    USING           reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    COMMENT         reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    VOID            reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    INT             reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    CHAR            reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    STRING          reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    BOOL            reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    FLOAT           reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    LONG            reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    SHORT           reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    DOUBLE          reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    $end            reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    IF              reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    VAR             reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    COUT            reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    CIN             reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    WHILE           reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    FOR             reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)
    RETURN          reduce using rule 112 (var_declaration -> type VAR SEMICOLON .)


state 41

    (114) var_declaration -> type VAR EQUAL . value SEMICOLON
    (115) var_declaration -> type VAR EQUAL . VAR SEMICOLON
    (116) var_declaration -> type VAR EQUAL . function_call
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    VAR             shift and go to state 48
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    value                          shift and go to state 49
    function_call                  shift and go to state 50
    number                         shift and go to state 51
    get_array_element              shift and go to state 52
    string_value                   shift and go to state 53
    bool_value                     shift and go to state 54
    math_operation                 shift and go to state 55

state 42

    (18) type_function_definition -> type VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (20) function_var_declaration -> . var_declaration_no_semicolon
    (21) function_var_declaration -> . var_declaration_no_semicolon COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (23) var_declaration_no_semicolon -> . type VAR
    (130) empty -> .
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE

    RIGHT_BR        reduce using rule 130 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

    type                           shift and go to state 62
    function_var_declaration       shift and go to state 63
    var_declaration_no_semicolon   shift and go to state 64
    empty                          shift and go to state 65

state 43

    (105) get_array_element -> VAR LEFT_BR_SQUARED . INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> VAR LEFT_BR_SQUARED . VAR RIGHT_BR_SQUARED

    INT_NUMBER      shift and go to state 67
    VAR             shift and go to state 66


state 44

    (117) array_declaration -> type get_array_element SEMICOLON .

    CLASS           reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    HASH            reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    USING           reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    COMMENT         reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    VOID            reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    INT             reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    CHAR            reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    STRING          reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    BOOL            reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT           reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    LONG            reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    SHORT           reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    DOUBLE          reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    $end            reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    IF              reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    VAR             reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    COUT            reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    CIN             reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    WHILE           reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    FOR             reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)
    RETURN          reduce using rule 117 (array_declaration -> type get_array_element SEMICOLON .)


state 45

    (19) void_function_definition -> VOID VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (20) function_var_declaration -> . var_declaration_no_semicolon
    (21) function_var_declaration -> . var_declaration_no_semicolon COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (23) var_declaration_no_semicolon -> . type VAR
    (130) empty -> .
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE

    RIGHT_BR        reduce using rule 130 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

    function_var_declaration       shift and go to state 68
    var_declaration_no_semicolon   shift and go to state 64
    empty                          shift and go to state 65
    type                           shift and go to state 62

state 46

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number . change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON
    (132) change_inside_class -> .

    INT             reduce using rule 132 (change_inside_class -> .)
    CHAR            reduce using rule 132 (change_inside_class -> .)
    STRING          reduce using rule 132 (change_inside_class -> .)
    BOOL            reduce using rule 132 (change_inside_class -> .)
    FLOAT           reduce using rule 132 (change_inside_class -> .)
    LONG            reduce using rule 132 (change_inside_class -> .)
    SHORT           reduce using rule 132 (change_inside_class -> .)
    DOUBLE          reduce using rule 132 (change_inside_class -> .)
    VOID            reduce using rule 132 (change_inside_class -> .)
    RIGHT_BR_CURLY  reduce using rule 132 (change_inside_class -> .)

    change_inside_class            shift and go to state 69

state 47

    (14) using_namespace_std -> USING NAMESPACE STD SEMICOLON .

    CLASS           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    HASH            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    USING           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    COMMENT         reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    VOID            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    INT             reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    CHAR            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    STRING          reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    BOOL            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    FLOAT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    LONG            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    SHORT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    DOUBLE          reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    $end            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)


state 48

    (115) var_declaration -> type VAR EQUAL VAR . SEMICOLON
    (93) value -> VAR .
    (24) function_call -> VAR . LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> VAR . LEFT_BR var_list RIGHT_BR SEMICOLON
    (105) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (100) math_operation -> VAR . operator VAR
    (101) math_operation -> VAR . operator number
    (72) operator -> . PLUS
    (73) operator -> . MINUS
    (74) operator -> . MULTIPLY
    (75) operator -> . DIVIDE

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 70
    LEFT_BR         shift and go to state 71
    LEFT_BR_SQUARED shift and go to state 43
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76

  ! SEMICOLON       [ reduce using rule 93 (value -> VAR .) ]

    operator                       shift and go to state 72

state 49

    (114) var_declaration -> type VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 77


state 50

    (116) var_declaration -> type VAR EQUAL function_call .

    CLASS           reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    HASH            reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    USING           reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    COMMENT         reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    VOID            reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    INT             reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    CHAR            reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    STRING          reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    BOOL            reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    FLOAT           reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    LONG            reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    SHORT           reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    DOUBLE          reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    $end            reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    RIGHT_BR_CURLY  reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    IF              reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    VAR             reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    COUT            reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    CIN             reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    WHILE           reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    FOR             reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)
    RETURN          reduce using rule 116 (var_declaration -> type VAR EQUAL function_call .)


state 51

    (92) value -> number .
    (102) math_operation -> number . operator number
    (72) operator -> . PLUS
    (73) operator -> . MINUS
    (74) operator -> . MULTIPLY
    (75) operator -> . DIVIDE

    SEMICOLON       reduce using rule 92 (value -> number .)
    COMMA           reduce using rule 92 (value -> number .)
    RIGHT_BR        reduce using rule 92 (value -> number .)
    EQUAL_EQUAL     reduce using rule 92 (value -> number .)
    LESS            reduce using rule 92 (value -> number .)
    LESS_EQUAL      reduce using rule 92 (value -> number .)
    GREATER         reduce using rule 92 (value -> number .)
    GREATER_EQUAL   reduce using rule 92 (value -> number .)
    NOT_EQUAL       reduce using rule 92 (value -> number .)
    AND             reduce using rule 92 (value -> number .)
    OR              reduce using rule 92 (value -> number .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76

    operator                       shift and go to state 78

state 52

    (94) value -> get_array_element .

    SEMICOLON       reduce using rule 94 (value -> get_array_element .)
    COMMA           reduce using rule 94 (value -> get_array_element .)
    RIGHT_BR        reduce using rule 94 (value -> get_array_element .)
    EQUAL_EQUAL     reduce using rule 94 (value -> get_array_element .)
    LESS            reduce using rule 94 (value -> get_array_element .)
    LESS_EQUAL      reduce using rule 94 (value -> get_array_element .)
    GREATER         reduce using rule 94 (value -> get_array_element .)
    GREATER_EQUAL   reduce using rule 94 (value -> get_array_element .)
    NOT_EQUAL       reduce using rule 94 (value -> get_array_element .)
    AND             reduce using rule 94 (value -> get_array_element .)
    OR              reduce using rule 94 (value -> get_array_element .)


state 53

    (95) value -> string_value .

    SEMICOLON       reduce using rule 95 (value -> string_value .)
    COMMA           reduce using rule 95 (value -> string_value .)
    RIGHT_BR        reduce using rule 95 (value -> string_value .)
    EQUAL_EQUAL     reduce using rule 95 (value -> string_value .)
    LESS            reduce using rule 95 (value -> string_value .)
    LESS_EQUAL      reduce using rule 95 (value -> string_value .)
    GREATER         reduce using rule 95 (value -> string_value .)
    GREATER_EQUAL   reduce using rule 95 (value -> string_value .)
    NOT_EQUAL       reduce using rule 95 (value -> string_value .)
    AND             reduce using rule 95 (value -> string_value .)
    OR              reduce using rule 95 (value -> string_value .)


state 54

    (96) value -> bool_value .

    SEMICOLON       reduce using rule 96 (value -> bool_value .)
    COMMA           reduce using rule 96 (value -> bool_value .)
    RIGHT_BR        reduce using rule 96 (value -> bool_value .)
    EQUAL_EQUAL     reduce using rule 96 (value -> bool_value .)
    LESS            reduce using rule 96 (value -> bool_value .)
    LESS_EQUAL      reduce using rule 96 (value -> bool_value .)
    GREATER         reduce using rule 96 (value -> bool_value .)
    GREATER_EQUAL   reduce using rule 96 (value -> bool_value .)
    NOT_EQUAL       reduce using rule 96 (value -> bool_value .)
    AND             reduce using rule 96 (value -> bool_value .)
    OR              reduce using rule 96 (value -> bool_value .)


state 55

    (97) value -> math_operation .

    SEMICOLON       reduce using rule 97 (value -> math_operation .)
    COMMA           reduce using rule 97 (value -> math_operation .)
    RIGHT_BR        reduce using rule 97 (value -> math_operation .)
    EQUAL_EQUAL     reduce using rule 97 (value -> math_operation .)
    LESS            reduce using rule 97 (value -> math_operation .)
    LESS_EQUAL      reduce using rule 97 (value -> math_operation .)
    GREATER         reduce using rule 97 (value -> math_operation .)
    GREATER_EQUAL   reduce using rule 97 (value -> math_operation .)
    NOT_EQUAL       reduce using rule 97 (value -> math_operation .)
    AND             reduce using rule 97 (value -> math_operation .)
    OR              reduce using rule 97 (value -> math_operation .)


state 56

    (88) number -> INT_NUMBER .

    PLUS            reduce using rule 88 (number -> INT_NUMBER .)
    MINUS           reduce using rule 88 (number -> INT_NUMBER .)
    MULTIPLY        reduce using rule 88 (number -> INT_NUMBER .)
    DIVIDE          reduce using rule 88 (number -> INT_NUMBER .)
    SEMICOLON       reduce using rule 88 (number -> INT_NUMBER .)
    COMMA           reduce using rule 88 (number -> INT_NUMBER .)
    RIGHT_BR        reduce using rule 88 (number -> INT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 88 (number -> INT_NUMBER .)
    LESS            reduce using rule 88 (number -> INT_NUMBER .)
    LESS_EQUAL      reduce using rule 88 (number -> INT_NUMBER .)
    GREATER         reduce using rule 88 (number -> INT_NUMBER .)
    GREATER_EQUAL   reduce using rule 88 (number -> INT_NUMBER .)
    NOT_EQUAL       reduce using rule 88 (number -> INT_NUMBER .)
    AND             reduce using rule 88 (number -> INT_NUMBER .)
    OR              reduce using rule 88 (number -> INT_NUMBER .)


state 57

    (89) number -> FLOAT_NUMBER .

    PLUS            reduce using rule 89 (number -> FLOAT_NUMBER .)
    MINUS           reduce using rule 89 (number -> FLOAT_NUMBER .)
    MULTIPLY        reduce using rule 89 (number -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 89 (number -> FLOAT_NUMBER .)
    SEMICOLON       reduce using rule 89 (number -> FLOAT_NUMBER .)
    COMMA           reduce using rule 89 (number -> FLOAT_NUMBER .)
    RIGHT_BR        reduce using rule 89 (number -> FLOAT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 89 (number -> FLOAT_NUMBER .)
    LESS            reduce using rule 89 (number -> FLOAT_NUMBER .)
    LESS_EQUAL      reduce using rule 89 (number -> FLOAT_NUMBER .)
    GREATER         reduce using rule 89 (number -> FLOAT_NUMBER .)
    GREATER_EQUAL   reduce using rule 89 (number -> FLOAT_NUMBER .)
    NOT_EQUAL       reduce using rule 89 (number -> FLOAT_NUMBER .)
    AND             reduce using rule 89 (number -> FLOAT_NUMBER .)
    OR              reduce using rule 89 (number -> FLOAT_NUMBER .)


state 58

    (86) string_value -> TEXT .

    SEMICOLON       reduce using rule 86 (string_value -> TEXT .)
    COMMA           reduce using rule 86 (string_value -> TEXT .)
    RIGHT_BR        reduce using rule 86 (string_value -> TEXT .)
    EQUAL_EQUAL     reduce using rule 86 (string_value -> TEXT .)
    LESS            reduce using rule 86 (string_value -> TEXT .)
    LESS_EQUAL      reduce using rule 86 (string_value -> TEXT .)
    GREATER         reduce using rule 86 (string_value -> TEXT .)
    GREATER_EQUAL   reduce using rule 86 (string_value -> TEXT .)
    NOT_EQUAL       reduce using rule 86 (string_value -> TEXT .)
    AND             reduce using rule 86 (string_value -> TEXT .)
    OR              reduce using rule 86 (string_value -> TEXT .)


state 59

    (87) string_value -> SIGN .

    SEMICOLON       reduce using rule 87 (string_value -> SIGN .)
    COMMA           reduce using rule 87 (string_value -> SIGN .)
    RIGHT_BR        reduce using rule 87 (string_value -> SIGN .)
    EQUAL_EQUAL     reduce using rule 87 (string_value -> SIGN .)
    LESS            reduce using rule 87 (string_value -> SIGN .)
    LESS_EQUAL      reduce using rule 87 (string_value -> SIGN .)
    GREATER         reduce using rule 87 (string_value -> SIGN .)
    GREATER_EQUAL   reduce using rule 87 (string_value -> SIGN .)
    NOT_EQUAL       reduce using rule 87 (string_value -> SIGN .)
    AND             reduce using rule 87 (string_value -> SIGN .)
    OR              reduce using rule 87 (string_value -> SIGN .)


state 60

    (90) bool_value -> TRUE .

    SEMICOLON       reduce using rule 90 (bool_value -> TRUE .)
    COMMA           reduce using rule 90 (bool_value -> TRUE .)
    RIGHT_BR        reduce using rule 90 (bool_value -> TRUE .)
    EQUAL_EQUAL     reduce using rule 90 (bool_value -> TRUE .)
    LESS            reduce using rule 90 (bool_value -> TRUE .)
    LESS_EQUAL      reduce using rule 90 (bool_value -> TRUE .)
    GREATER         reduce using rule 90 (bool_value -> TRUE .)
    GREATER_EQUAL   reduce using rule 90 (bool_value -> TRUE .)
    NOT_EQUAL       reduce using rule 90 (bool_value -> TRUE .)
    AND             reduce using rule 90 (bool_value -> TRUE .)
    OR              reduce using rule 90 (bool_value -> TRUE .)


state 61

    (91) bool_value -> FALSE .

    SEMICOLON       reduce using rule 91 (bool_value -> FALSE .)
    COMMA           reduce using rule 91 (bool_value -> FALSE .)
    RIGHT_BR        reduce using rule 91 (bool_value -> FALSE .)
    EQUAL_EQUAL     reduce using rule 91 (bool_value -> FALSE .)
    LESS            reduce using rule 91 (bool_value -> FALSE .)
    LESS_EQUAL      reduce using rule 91 (bool_value -> FALSE .)
    GREATER         reduce using rule 91 (bool_value -> FALSE .)
    GREATER_EQUAL   reduce using rule 91 (bool_value -> FALSE .)
    NOT_EQUAL       reduce using rule 91 (bool_value -> FALSE .)
    AND             reduce using rule 91 (bool_value -> FALSE .)
    OR              reduce using rule 91 (bool_value -> FALSE .)


state 62

    (23) var_declaration_no_semicolon -> type . VAR

    VAR             shift and go to state 79


state 63

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 80


state 64

    (20) function_var_declaration -> var_declaration_no_semicolon .
    (21) function_var_declaration -> var_declaration_no_semicolon . COMMA function_var_declaration

    RIGHT_BR        reduce using rule 20 (function_var_declaration -> var_declaration_no_semicolon .)
    COMMA           shift and go to state 81


state 65

    (22) function_var_declaration -> empty .

    RIGHT_BR        reduce using rule 22 (function_var_declaration -> empty .)


state 66

    (106) get_array_element -> VAR LEFT_BR_SQUARED VAR . RIGHT_BR_SQUARED

    RIGHT_BR_SQUARED shift and go to state 82


state 67

    (105) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER . RIGHT_BR_SQUARED

    RIGHT_BR_SQUARED shift and go to state 83


state 68

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 84


state 69

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class . class_declarations RIGHT_BR_CURLY SEMICOLON
    (31) class_declarations -> . class_declaration
    (32) class_declarations -> . class_declaration class_declarations
    (33) class_declarations -> . empty
    (29) class_declaration -> . var_declaration
    (30) class_declaration -> . function_definition
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    RIGHT_BR_CURLY  reduce using rule 130 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 20

    class_declarations             shift and go to state 85
    class_declaration              shift and go to state 86
    empty                          shift and go to state 87
    var_declaration                shift and go to state 88
    function_definition            shift and go to state 89
    type                           shift and go to state 18
    array_declaration              shift and go to state 90
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 70

    (115) var_declaration -> type VAR EQUAL VAR SEMICOLON .

    CLASS           reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    HASH            reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    USING           reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    COMMENT         reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VOID            reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    $end            reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    IF              reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 115 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)


state 71

    (24) function_call -> VAR LEFT_BR . RIGHT_BR SEMICOLON
    (25) function_call -> VAR LEFT_BR . var_list RIGHT_BR SEMICOLON
    (27) var_list -> . value
    (28) var_list -> . value COMMA var_list
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    RIGHT_BR        shift and go to state 92
    VAR             shift and go to state 91
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    var_list                       shift and go to state 93
    value                          shift and go to state 94
    number                         shift and go to state 51
    get_array_element              shift and go to state 52
    string_value                   shift and go to state 53
    bool_value                     shift and go to state 54
    math_operation                 shift and go to state 55

state 72

    (100) math_operation -> VAR operator . VAR
    (101) math_operation -> VAR operator . number
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER

    VAR             shift and go to state 95
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57

    number                         shift and go to state 96

state 73

    (72) operator -> PLUS .

    VAR             reduce using rule 72 (operator -> PLUS .)
    INT_NUMBER      reduce using rule 72 (operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 72 (operator -> PLUS .)


state 74

    (73) operator -> MINUS .

    VAR             reduce using rule 73 (operator -> MINUS .)
    INT_NUMBER      reduce using rule 73 (operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 73 (operator -> MINUS .)


state 75

    (74) operator -> MULTIPLY .

    VAR             reduce using rule 74 (operator -> MULTIPLY .)
    INT_NUMBER      reduce using rule 74 (operator -> MULTIPLY .)
    FLOAT_NUMBER    reduce using rule 74 (operator -> MULTIPLY .)


state 76

    (75) operator -> DIVIDE .

    VAR             reduce using rule 75 (operator -> DIVIDE .)
    INT_NUMBER      reduce using rule 75 (operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 75 (operator -> DIVIDE .)


state 77

    (114) var_declaration -> type VAR EQUAL value SEMICOLON .

    CLASS           reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    HASH            reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    USING           reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    COMMENT         reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VOID            reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    $end            reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    IF              reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    COUT            reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CIN             reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 114 (var_declaration -> type VAR EQUAL value SEMICOLON .)


state 78

    (102) math_operation -> number operator . number
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER

    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57

    number                         shift and go to state 97

state 79

    (23) var_declaration_no_semicolon -> type VAR .

    COMMA           reduce using rule 23 (var_declaration_no_semicolon -> type VAR .)
    RIGHT_BR        reduce using rule 23 (var_declaration_no_semicolon -> type VAR .)


state 80

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 98


state 81

    (21) function_var_declaration -> var_declaration_no_semicolon COMMA . function_var_declaration
    (20) function_var_declaration -> . var_declaration_no_semicolon
    (21) function_var_declaration -> . var_declaration_no_semicolon COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (23) var_declaration_no_semicolon -> . type VAR
    (130) empty -> .
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE

    RIGHT_BR        reduce using rule 130 (empty -> .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28

    var_declaration_no_semicolon   shift and go to state 64
    function_var_declaration       shift and go to state 99
    empty                          shift and go to state 65
    type                           shift and go to state 62

state 82

    (106) get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .

    SEMICOLON       reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    COMMA           reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    RIGHT_BR        reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    EQUAL           reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    EQUAL_EQUAL     reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    LESS            reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    LESS_EQUAL      reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    GREATER         reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    GREATER_EQUAL   reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    NOT_EQUAL       reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    AND             reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)
    OR              reduce using rule 106 (get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED .)


state 83

    (105) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .

    SEMICOLON       reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    COMMA           reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    RIGHT_BR        reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL           reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL_EQUAL     reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS            reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS_EQUAL      reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER         reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER_EQUAL   reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    NOT_EQUAL       reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    AND             reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    OR              reduce using rule 105 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)


state 84

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 100


state 85

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations . RIGHT_BR_CURLY SEMICOLON

    RIGHT_BR_CURLY  shift and go to state 101


state 86

    (31) class_declarations -> class_declaration .
    (32) class_declarations -> class_declaration . class_declarations
    (31) class_declarations -> . class_declaration
    (32) class_declarations -> . class_declaration class_declarations
    (33) class_declarations -> . empty
    (29) class_declaration -> . var_declaration
    (30) class_declaration -> . function_definition
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 31 (class_declarations -> class_declaration .)
    RIGHT_BR_CURLY  reduce using rule 31 (class_declarations -> class_declaration .)
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    VOID            shift and go to state 20

  ! RIGHT_BR_CURLY  [ reduce using rule 130 (empty -> .) ]

    class_declaration              shift and go to state 86
    class_declarations             shift and go to state 102
    empty                          shift and go to state 87
    var_declaration                shift and go to state 88
    function_definition            shift and go to state 89
    type                           shift and go to state 18
    array_declaration              shift and go to state 90
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 87

    (33) class_declarations -> empty .

    RIGHT_BR_CURLY  reduce using rule 33 (class_declarations -> empty .)


state 88

    (29) class_declaration -> var_declaration .

    INT             reduce using rule 29 (class_declaration -> var_declaration .)
    CHAR            reduce using rule 29 (class_declaration -> var_declaration .)
    STRING          reduce using rule 29 (class_declaration -> var_declaration .)
    BOOL            reduce using rule 29 (class_declaration -> var_declaration .)
    FLOAT           reduce using rule 29 (class_declaration -> var_declaration .)
    LONG            reduce using rule 29 (class_declaration -> var_declaration .)
    SHORT           reduce using rule 29 (class_declaration -> var_declaration .)
    DOUBLE          reduce using rule 29 (class_declaration -> var_declaration .)
    VOID            reduce using rule 29 (class_declaration -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 29 (class_declaration -> var_declaration .)


state 89

    (30) class_declaration -> function_definition .

    INT             reduce using rule 30 (class_declaration -> function_definition .)
    CHAR            reduce using rule 30 (class_declaration -> function_definition .)
    STRING          reduce using rule 30 (class_declaration -> function_definition .)
    BOOL            reduce using rule 30 (class_declaration -> function_definition .)
    FLOAT           reduce using rule 30 (class_declaration -> function_definition .)
    LONG            reduce using rule 30 (class_declaration -> function_definition .)
    SHORT           reduce using rule 30 (class_declaration -> function_definition .)
    DOUBLE          reduce using rule 30 (class_declaration -> function_definition .)
    VOID            reduce using rule 30 (class_declaration -> function_definition .)
    RIGHT_BR_CURLY  reduce using rule 30 (class_declaration -> function_definition .)


state 90

    (113) var_declaration -> array_declaration .

    INT             reduce using rule 113 (var_declaration -> array_declaration .)
    CHAR            reduce using rule 113 (var_declaration -> array_declaration .)
    STRING          reduce using rule 113 (var_declaration -> array_declaration .)
    BOOL            reduce using rule 113 (var_declaration -> array_declaration .)
    FLOAT           reduce using rule 113 (var_declaration -> array_declaration .)
    LONG            reduce using rule 113 (var_declaration -> array_declaration .)
    SHORT           reduce using rule 113 (var_declaration -> array_declaration .)
    DOUBLE          reduce using rule 113 (var_declaration -> array_declaration .)
    VOID            reduce using rule 113 (var_declaration -> array_declaration .)
    RIGHT_BR_CURLY  reduce using rule 113 (var_declaration -> array_declaration .)
    IF              reduce using rule 113 (var_declaration -> array_declaration .)
    VAR             reduce using rule 113 (var_declaration -> array_declaration .)
    COUT            reduce using rule 113 (var_declaration -> array_declaration .)
    CIN             reduce using rule 113 (var_declaration -> array_declaration .)
    COMMENT         reduce using rule 113 (var_declaration -> array_declaration .)
    WHILE           reduce using rule 113 (var_declaration -> array_declaration .)
    FOR             reduce using rule 113 (var_declaration -> array_declaration .)
    RETURN          reduce using rule 113 (var_declaration -> array_declaration .)


state 91

    (93) value -> VAR .
    (105) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (100) math_operation -> VAR . operator VAR
    (101) math_operation -> VAR . operator number
    (72) operator -> . PLUS
    (73) operator -> . MINUS
    (74) operator -> . MULTIPLY
    (75) operator -> . DIVIDE

    COMMA           reduce using rule 93 (value -> VAR .)
    RIGHT_BR        reduce using rule 93 (value -> VAR .)
    SEMICOLON       reduce using rule 93 (value -> VAR .)
    EQUAL_EQUAL     reduce using rule 93 (value -> VAR .)
    LESS            reduce using rule 93 (value -> VAR .)
    LESS_EQUAL      reduce using rule 93 (value -> VAR .)
    GREATER         reduce using rule 93 (value -> VAR .)
    GREATER_EQUAL   reduce using rule 93 (value -> VAR .)
    NOT_EQUAL       reduce using rule 93 (value -> VAR .)
    AND             reduce using rule 93 (value -> VAR .)
    OR              reduce using rule 93 (value -> VAR .)
    LEFT_BR_SQUARED shift and go to state 43
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76

    operator                       shift and go to state 72

state 92

    (24) function_call -> VAR LEFT_BR RIGHT_BR . SEMICOLON

    SEMICOLON       shift and go to state 103


state 93

    (25) function_call -> VAR LEFT_BR var_list . RIGHT_BR SEMICOLON

    RIGHT_BR        shift and go to state 104


state 94

    (27) var_list -> value .
    (28) var_list -> value . COMMA var_list

    RIGHT_BR        reduce using rule 27 (var_list -> value .)
    COMMA           shift and go to state 105


state 95

    (100) math_operation -> VAR operator VAR .

    SEMICOLON       reduce using rule 100 (math_operation -> VAR operator VAR .)
    COMMA           reduce using rule 100 (math_operation -> VAR operator VAR .)
    RIGHT_BR        reduce using rule 100 (math_operation -> VAR operator VAR .)
    EQUAL_EQUAL     reduce using rule 100 (math_operation -> VAR operator VAR .)
    LESS            reduce using rule 100 (math_operation -> VAR operator VAR .)
    LESS_EQUAL      reduce using rule 100 (math_operation -> VAR operator VAR .)
    GREATER         reduce using rule 100 (math_operation -> VAR operator VAR .)
    GREATER_EQUAL   reduce using rule 100 (math_operation -> VAR operator VAR .)
    NOT_EQUAL       reduce using rule 100 (math_operation -> VAR operator VAR .)
    AND             reduce using rule 100 (math_operation -> VAR operator VAR .)
    OR              reduce using rule 100 (math_operation -> VAR operator VAR .)


state 96

    (101) math_operation -> VAR operator number .

    SEMICOLON       reduce using rule 101 (math_operation -> VAR operator number .)
    COMMA           reduce using rule 101 (math_operation -> VAR operator number .)
    RIGHT_BR        reduce using rule 101 (math_operation -> VAR operator number .)
    EQUAL_EQUAL     reduce using rule 101 (math_operation -> VAR operator number .)
    LESS            reduce using rule 101 (math_operation -> VAR operator number .)
    LESS_EQUAL      reduce using rule 101 (math_operation -> VAR operator number .)
    GREATER         reduce using rule 101 (math_operation -> VAR operator number .)
    GREATER_EQUAL   reduce using rule 101 (math_operation -> VAR operator number .)
    NOT_EQUAL       reduce using rule 101 (math_operation -> VAR operator number .)
    AND             reduce using rule 101 (math_operation -> VAR operator number .)
    OR              reduce using rule 101 (math_operation -> VAR operator number .)


state 97

    (102) math_operation -> number operator number .

    SEMICOLON       reduce using rule 102 (math_operation -> number operator number .)
    COMMA           reduce using rule 102 (math_operation -> number operator number .)
    RIGHT_BR        reduce using rule 102 (math_operation -> number operator number .)
    EQUAL_EQUAL     reduce using rule 102 (math_operation -> number operator number .)
    LESS            reduce using rule 102 (math_operation -> number operator number .)
    LESS_EQUAL      reduce using rule 102 (math_operation -> number operator number .)
    GREATER         reduce using rule 102 (math_operation -> number operator number .)
    GREATER_EQUAL   reduce using rule 102 (math_operation -> number operator number .)
    NOT_EQUAL       reduce using rule 102 (math_operation -> number operator number .)
    AND             reduce using rule 102 (math_operation -> number operator number .)
    OR              reduce using rule 102 (math_operation -> number operator number .)


state 98

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions returning RIGHT_BR_CURLY
    (131) change_tab_number -> .

    IF              reduce using rule 131 (change_tab_number -> .)
    VAR             reduce using rule 131 (change_tab_number -> .)
    COUT            reduce using rule 131 (change_tab_number -> .)
    CIN             reduce using rule 131 (change_tab_number -> .)
    COMMENT         reduce using rule 131 (change_tab_number -> .)
    WHILE           reduce using rule 131 (change_tab_number -> .)
    INT             reduce using rule 131 (change_tab_number -> .)
    CHAR            reduce using rule 131 (change_tab_number -> .)
    STRING          reduce using rule 131 (change_tab_number -> .)
    BOOL            reduce using rule 131 (change_tab_number -> .)
    FLOAT           reduce using rule 131 (change_tab_number -> .)
    LONG            reduce using rule 131 (change_tab_number -> .)
    SHORT           reduce using rule 131 (change_tab_number -> .)
    DOUBLE          reduce using rule 131 (change_tab_number -> .)
    FOR             reduce using rule 131 (change_tab_number -> .)
    RETURN          reduce using rule 131 (change_tab_number -> .)

    change_tab_number              shift and go to state 106

state 99

    (21) function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration .

    RIGHT_BR        reduce using rule 21 (function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration .)


state 100

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (131) change_tab_number -> .

    IF              reduce using rule 131 (change_tab_number -> .)
    VAR             reduce using rule 131 (change_tab_number -> .)
    COUT            reduce using rule 131 (change_tab_number -> .)
    CIN             reduce using rule 131 (change_tab_number -> .)
    COMMENT         reduce using rule 131 (change_tab_number -> .)
    WHILE           reduce using rule 131 (change_tab_number -> .)
    INT             reduce using rule 131 (change_tab_number -> .)
    CHAR            reduce using rule 131 (change_tab_number -> .)
    STRING          reduce using rule 131 (change_tab_number -> .)
    BOOL            reduce using rule 131 (change_tab_number -> .)
    FLOAT           reduce using rule 131 (change_tab_number -> .)
    LONG            reduce using rule 131 (change_tab_number -> .)
    SHORT           reduce using rule 131 (change_tab_number -> .)
    DOUBLE          reduce using rule 131 (change_tab_number -> .)
    FOR             reduce using rule 131 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 131 (change_tab_number -> .)

    change_tab_number              shift and go to state 107

state 101

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY . SEMICOLON

    SEMICOLON       shift and go to state 108


state 102

    (32) class_declarations -> class_declaration class_declarations .

    RIGHT_BR_CURLY  reduce using rule 32 (class_declarations -> class_declaration class_declarations .)


state 103

    (24) function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .

    CLASS           reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    HASH            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    USING           reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    COMMENT         reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    VOID            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    INT             reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    CHAR            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    STRING          reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    BOOL            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    FLOAT           reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    LONG            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    SHORT           reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    DOUBLE          reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    $end            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    IF              reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    VAR             reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    COUT            reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    CIN             reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    WHILE           reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    FOR             reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)
    RETURN          reduce using rule 24 (function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON .)


state 104

    (25) function_call -> VAR LEFT_BR var_list RIGHT_BR . SEMICOLON

    SEMICOLON       shift and go to state 109


state 105

    (28) var_list -> value COMMA . var_list
    (27) var_list -> . value
    (28) var_list -> . value COMMA var_list
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    VAR             shift and go to state 91
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    value                          shift and go to state 94
    var_list                       shift and go to state 110
    number                         shift and go to state 51
    get_array_element              shift and go to state 52
    string_value                   shift and go to state 53
    bool_value                     shift and go to state 54
    math_operation                 shift and go to state 55

state 106

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions returning RIGHT_BR_CURLY
    (34) instructions -> . instruction
    (35) instructions -> . instruction instructions
    (36) instruction -> . loop
    (37) instruction -> . if_statement
    (38) instruction -> . assignment
    (39) instruction -> . operation
    (40) instruction -> . empty
    (41) instruction -> . var_declaration
    (42) instruction -> . print
    (43) instruction -> . input
    (44) instruction -> . comment
    (45) instruction -> . function_call
    (57) loop -> . while_loop
    (58) loop -> . for_loop
    (60) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (107) assignment -> . VAR EQUAL value SEMICOLON
    (108) assignment -> . VAR EQUAL VAR SEMICOLON
    (109) assignment -> . VAR EQUAL function_call
    (110) assignment -> . get_array_element EQUAL value SEMICOLON
    (111) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (103) operation -> . increment
    (104) operation -> . decrement
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (126) print -> . COUT out SEMICOLON
    (127) input -> . CIN in SEMICOLON
    (129) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (46) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (56) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) increment -> . VAR PLUS_PLUS SEMICOLON
    (99) decrement -> . VAR MINUS_MINUS SEMICOLON
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 127
    VAR             shift and go to state 112
    RETURN          reduce using rule 130 (empty -> .)
    COUT            shift and go to state 131
    CIN             shift and go to state 132
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 133
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 135

  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! VAR             [ reduce using rule 130 (empty -> .) ]
  ! COUT            [ reduce using rule 130 (empty -> .) ]
  ! CIN             [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]

    type                           shift and go to state 111
    instructions                   shift and go to state 113
    instruction                    shift and go to state 114
    loop                           shift and go to state 115
    if_statement                   shift and go to state 116
    assignment                     shift and go to state 117
    operation                      shift and go to state 118
    empty                          shift and go to state 119
    var_declaration                shift and go to state 120
    print                          shift and go to state 121
    input                          shift and go to state 122
    comment                        shift and go to state 123
    function_call                  shift and go to state 124
    while_loop                     shift and go to state 125
    for_loop                       shift and go to state 126
    get_array_element              shift and go to state 128
    increment                      shift and go to state 129
    decrement                      shift and go to state 130
    array_declaration              shift and go to state 90
    for_loop_statement             shift and go to state 134

state 107

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (34) instructions -> . instruction
    (35) instructions -> . instruction instructions
    (36) instruction -> . loop
    (37) instruction -> . if_statement
    (38) instruction -> . assignment
    (39) instruction -> . operation
    (40) instruction -> . empty
    (41) instruction -> . var_declaration
    (42) instruction -> . print
    (43) instruction -> . input
    (44) instruction -> . comment
    (45) instruction -> . function_call
    (57) loop -> . while_loop
    (58) loop -> . for_loop
    (60) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (107) assignment -> . VAR EQUAL value SEMICOLON
    (108) assignment -> . VAR EQUAL VAR SEMICOLON
    (109) assignment -> . VAR EQUAL function_call
    (110) assignment -> . get_array_element EQUAL value SEMICOLON
    (111) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (103) operation -> . increment
    (104) operation -> . decrement
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (126) print -> . COUT out SEMICOLON
    (127) input -> . CIN in SEMICOLON
    (129) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (46) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (56) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) increment -> . VAR PLUS_PLUS SEMICOLON
    (99) decrement -> . VAR MINUS_MINUS SEMICOLON
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 127
    VAR             shift and go to state 112
    RIGHT_BR_CURLY  reduce using rule 130 (empty -> .)
    COUT            shift and go to state 131
    CIN             shift and go to state 132
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 133
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 135

  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! VAR             [ reduce using rule 130 (empty -> .) ]
  ! COUT            [ reduce using rule 130 (empty -> .) ]
  ! CIN             [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]

    instructions                   shift and go to state 136
    instruction                    shift and go to state 114
    loop                           shift and go to state 115
    if_statement                   shift and go to state 116
    assignment                     shift and go to state 117
    operation                      shift and go to state 118
    empty                          shift and go to state 119
    var_declaration                shift and go to state 120
    print                          shift and go to state 121
    input                          shift and go to state 122
    comment                        shift and go to state 123
    function_call                  shift and go to state 124
    while_loop                     shift and go to state 125
    for_loop                       shift and go to state 126
    get_array_element              shift and go to state 128
    increment                      shift and go to state 129
    decrement                      shift and go to state 130
    type                           shift and go to state 111
    array_declaration              shift and go to state 90
    for_loop_statement             shift and go to state 134

state 108

    (26) class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .

    CLASS           reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    HASH            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    USING           reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    COMMENT         reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    VOID            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    INT             reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    CHAR            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    STRING          reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    BOOL            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    FLOAT           reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    LONG            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    SHORT           reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    DOUBLE          reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)
    $end            reduce using rule 26 (class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON .)


state 109

    (25) function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .

    CLASS           reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    HASH            reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    USING           reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    COMMENT         reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    VOID            reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    INT             reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    CHAR            reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    STRING          reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    BOOL            reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    FLOAT           reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    LONG            reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    SHORT           reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    DOUBLE          reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    $end            reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    IF              reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    VAR             reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    COUT            reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    CIN             reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    WHILE           reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    FOR             reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)
    RETURN          reduce using rule 25 (function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON .)


state 110

    (28) var_list -> value COMMA var_list .

    RIGHT_BR        reduce using rule 28 (var_list -> value COMMA var_list .)


state 111

    (112) var_declaration -> type . VAR SEMICOLON
    (114) var_declaration -> type . VAR EQUAL value SEMICOLON
    (115) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> type . VAR EQUAL function_call
    (117) array_declaration -> type . get_array_element SEMICOLON
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED

    VAR             shift and go to state 137

    get_array_element              shift and go to state 35

state 112

    (107) assignment -> VAR . EQUAL value SEMICOLON
    (108) assignment -> VAR . EQUAL VAR SEMICOLON
    (109) assignment -> VAR . EQUAL function_call
    (24) function_call -> VAR . LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> VAR . LEFT_BR var_list RIGHT_BR SEMICOLON
    (105) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) increment -> VAR . PLUS_PLUS SEMICOLON
    (99) decrement -> VAR . MINUS_MINUS SEMICOLON

    EQUAL           shift and go to state 138
    LEFT_BR         shift and go to state 71
    LEFT_BR_SQUARED shift and go to state 43
    PLUS_PLUS       shift and go to state 139
    MINUS_MINUS     shift and go to state 140


state 113

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . returning RIGHT_BR_CURLY
    (128) returning -> . RETURN value SEMICOLON

    RETURN          shift and go to state 142

    returning                      shift and go to state 141

state 114

    (34) instructions -> instruction .
    (35) instructions -> instruction . instructions
    (34) instructions -> . instruction
    (35) instructions -> . instruction instructions
    (36) instruction -> . loop
    (37) instruction -> . if_statement
    (38) instruction -> . assignment
    (39) instruction -> . operation
    (40) instruction -> . empty
    (41) instruction -> . var_declaration
    (42) instruction -> . print
    (43) instruction -> . input
    (44) instruction -> . comment
    (45) instruction -> . function_call
    (57) loop -> . while_loop
    (58) loop -> . for_loop
    (60) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (107) assignment -> . VAR EQUAL value SEMICOLON
    (108) assignment -> . VAR EQUAL VAR SEMICOLON
    (109) assignment -> . VAR EQUAL function_call
    (110) assignment -> . get_array_element EQUAL value SEMICOLON
    (111) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (103) operation -> . increment
    (104) operation -> . decrement
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (126) print -> . COUT out SEMICOLON
    (127) input -> . CIN in SEMICOLON
    (129) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (46) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (56) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) increment -> . VAR PLUS_PLUS SEMICOLON
    (99) decrement -> . VAR MINUS_MINUS SEMICOLON
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 34 (instructions -> instruction .)
  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 34 (instructions -> instruction .)
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    RETURN          reduce using rule 34 (instructions -> instruction .)
    RIGHT_BR_CURLY  reduce using rule 34 (instructions -> instruction .)
    IF              shift and go to state 127
    VAR             shift and go to state 112
    COUT            shift and go to state 131
    CIN             shift and go to state 132
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 133
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 135

  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! VAR             [ reduce using rule 130 (empty -> .) ]
  ! COUT            [ reduce using rule 130 (empty -> .) ]
  ! CIN             [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]
  ! RETURN          [ reduce using rule 130 (empty -> .) ]
  ! RIGHT_BR_CURLY  [ reduce using rule 130 (empty -> .) ]

    instruction                    shift and go to state 114
    instructions                   shift and go to state 143
    loop                           shift and go to state 115
    if_statement                   shift and go to state 116
    assignment                     shift and go to state 117
    operation                      shift and go to state 118
    empty                          shift and go to state 119
    var_declaration                shift and go to state 120
    print                          shift and go to state 121
    input                          shift and go to state 122
    comment                        shift and go to state 123
    function_call                  shift and go to state 124
    while_loop                     shift and go to state 125
    for_loop                       shift and go to state 126
    get_array_element              shift and go to state 128
    increment                      shift and go to state 129
    decrement                      shift and go to state 130
    type                           shift and go to state 111
    array_declaration              shift and go to state 90
    for_loop_statement             shift and go to state 134

state 115

    (36) instruction -> loop .

    IF              reduce using rule 36 (instruction -> loop .)
    VAR             reduce using rule 36 (instruction -> loop .)
    COUT            reduce using rule 36 (instruction -> loop .)
    CIN             reduce using rule 36 (instruction -> loop .)
    COMMENT         reduce using rule 36 (instruction -> loop .)
    WHILE           reduce using rule 36 (instruction -> loop .)
    INT             reduce using rule 36 (instruction -> loop .)
    CHAR            reduce using rule 36 (instruction -> loop .)
    STRING          reduce using rule 36 (instruction -> loop .)
    BOOL            reduce using rule 36 (instruction -> loop .)
    FLOAT           reduce using rule 36 (instruction -> loop .)
    LONG            reduce using rule 36 (instruction -> loop .)
    SHORT           reduce using rule 36 (instruction -> loop .)
    DOUBLE          reduce using rule 36 (instruction -> loop .)
    FOR             reduce using rule 36 (instruction -> loop .)
    RETURN          reduce using rule 36 (instruction -> loop .)
    RIGHT_BR_CURLY  reduce using rule 36 (instruction -> loop .)


state 116

    (37) instruction -> if_statement .

    IF              reduce using rule 37 (instruction -> if_statement .)
    VAR             reduce using rule 37 (instruction -> if_statement .)
    COUT            reduce using rule 37 (instruction -> if_statement .)
    CIN             reduce using rule 37 (instruction -> if_statement .)
    COMMENT         reduce using rule 37 (instruction -> if_statement .)
    WHILE           reduce using rule 37 (instruction -> if_statement .)
    INT             reduce using rule 37 (instruction -> if_statement .)
    CHAR            reduce using rule 37 (instruction -> if_statement .)
    STRING          reduce using rule 37 (instruction -> if_statement .)
    BOOL            reduce using rule 37 (instruction -> if_statement .)
    FLOAT           reduce using rule 37 (instruction -> if_statement .)
    LONG            reduce using rule 37 (instruction -> if_statement .)
    SHORT           reduce using rule 37 (instruction -> if_statement .)
    DOUBLE          reduce using rule 37 (instruction -> if_statement .)
    FOR             reduce using rule 37 (instruction -> if_statement .)
    RETURN          reduce using rule 37 (instruction -> if_statement .)
    RIGHT_BR_CURLY  reduce using rule 37 (instruction -> if_statement .)


state 117

    (38) instruction -> assignment .

    IF              reduce using rule 38 (instruction -> assignment .)
    VAR             reduce using rule 38 (instruction -> assignment .)
    COUT            reduce using rule 38 (instruction -> assignment .)
    CIN             reduce using rule 38 (instruction -> assignment .)
    COMMENT         reduce using rule 38 (instruction -> assignment .)
    WHILE           reduce using rule 38 (instruction -> assignment .)
    INT             reduce using rule 38 (instruction -> assignment .)
    CHAR            reduce using rule 38 (instruction -> assignment .)
    STRING          reduce using rule 38 (instruction -> assignment .)
    BOOL            reduce using rule 38 (instruction -> assignment .)
    FLOAT           reduce using rule 38 (instruction -> assignment .)
    LONG            reduce using rule 38 (instruction -> assignment .)
    SHORT           reduce using rule 38 (instruction -> assignment .)
    DOUBLE          reduce using rule 38 (instruction -> assignment .)
    FOR             reduce using rule 38 (instruction -> assignment .)
    RETURN          reduce using rule 38 (instruction -> assignment .)
    RIGHT_BR_CURLY  reduce using rule 38 (instruction -> assignment .)


state 118

    (39) instruction -> operation .

    IF              reduce using rule 39 (instruction -> operation .)
    VAR             reduce using rule 39 (instruction -> operation .)
    COUT            reduce using rule 39 (instruction -> operation .)
    CIN             reduce using rule 39 (instruction -> operation .)
    COMMENT         reduce using rule 39 (instruction -> operation .)
    WHILE           reduce using rule 39 (instruction -> operation .)
    INT             reduce using rule 39 (instruction -> operation .)
    CHAR            reduce using rule 39 (instruction -> operation .)
    STRING          reduce using rule 39 (instruction -> operation .)
    BOOL            reduce using rule 39 (instruction -> operation .)
    FLOAT           reduce using rule 39 (instruction -> operation .)
    LONG            reduce using rule 39 (instruction -> operation .)
    SHORT           reduce using rule 39 (instruction -> operation .)
    DOUBLE          reduce using rule 39 (instruction -> operation .)
    FOR             reduce using rule 39 (instruction -> operation .)
    RETURN          reduce using rule 39 (instruction -> operation .)
    RIGHT_BR_CURLY  reduce using rule 39 (instruction -> operation .)


state 119

    (40) instruction -> empty .

    IF              reduce using rule 40 (instruction -> empty .)
    VAR             reduce using rule 40 (instruction -> empty .)
    COUT            reduce using rule 40 (instruction -> empty .)
    CIN             reduce using rule 40 (instruction -> empty .)
    COMMENT         reduce using rule 40 (instruction -> empty .)
    WHILE           reduce using rule 40 (instruction -> empty .)
    INT             reduce using rule 40 (instruction -> empty .)
    CHAR            reduce using rule 40 (instruction -> empty .)
    STRING          reduce using rule 40 (instruction -> empty .)
    BOOL            reduce using rule 40 (instruction -> empty .)
    FLOAT           reduce using rule 40 (instruction -> empty .)
    LONG            reduce using rule 40 (instruction -> empty .)
    SHORT           reduce using rule 40 (instruction -> empty .)
    DOUBLE          reduce using rule 40 (instruction -> empty .)
    FOR             reduce using rule 40 (instruction -> empty .)
    RETURN          reduce using rule 40 (instruction -> empty .)
    RIGHT_BR_CURLY  reduce using rule 40 (instruction -> empty .)


state 120

    (41) instruction -> var_declaration .

    IF              reduce using rule 41 (instruction -> var_declaration .)
    VAR             reduce using rule 41 (instruction -> var_declaration .)
    COUT            reduce using rule 41 (instruction -> var_declaration .)
    CIN             reduce using rule 41 (instruction -> var_declaration .)
    COMMENT         reduce using rule 41 (instruction -> var_declaration .)
    WHILE           reduce using rule 41 (instruction -> var_declaration .)
    INT             reduce using rule 41 (instruction -> var_declaration .)
    CHAR            reduce using rule 41 (instruction -> var_declaration .)
    STRING          reduce using rule 41 (instruction -> var_declaration .)
    BOOL            reduce using rule 41 (instruction -> var_declaration .)
    FLOAT           reduce using rule 41 (instruction -> var_declaration .)
    LONG            reduce using rule 41 (instruction -> var_declaration .)
    SHORT           reduce using rule 41 (instruction -> var_declaration .)
    DOUBLE          reduce using rule 41 (instruction -> var_declaration .)
    FOR             reduce using rule 41 (instruction -> var_declaration .)
    RETURN          reduce using rule 41 (instruction -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 41 (instruction -> var_declaration .)


state 121

    (42) instruction -> print .

    IF              reduce using rule 42 (instruction -> print .)
    VAR             reduce using rule 42 (instruction -> print .)
    COUT            reduce using rule 42 (instruction -> print .)
    CIN             reduce using rule 42 (instruction -> print .)
    COMMENT         reduce using rule 42 (instruction -> print .)
    WHILE           reduce using rule 42 (instruction -> print .)
    INT             reduce using rule 42 (instruction -> print .)
    CHAR            reduce using rule 42 (instruction -> print .)
    STRING          reduce using rule 42 (instruction -> print .)
    BOOL            reduce using rule 42 (instruction -> print .)
    FLOAT           reduce using rule 42 (instruction -> print .)
    LONG            reduce using rule 42 (instruction -> print .)
    SHORT           reduce using rule 42 (instruction -> print .)
    DOUBLE          reduce using rule 42 (instruction -> print .)
    FOR             reduce using rule 42 (instruction -> print .)
    RETURN          reduce using rule 42 (instruction -> print .)
    RIGHT_BR_CURLY  reduce using rule 42 (instruction -> print .)


state 122

    (43) instruction -> input .

    IF              reduce using rule 43 (instruction -> input .)
    VAR             reduce using rule 43 (instruction -> input .)
    COUT            reduce using rule 43 (instruction -> input .)
    CIN             reduce using rule 43 (instruction -> input .)
    COMMENT         reduce using rule 43 (instruction -> input .)
    WHILE           reduce using rule 43 (instruction -> input .)
    INT             reduce using rule 43 (instruction -> input .)
    CHAR            reduce using rule 43 (instruction -> input .)
    STRING          reduce using rule 43 (instruction -> input .)
    BOOL            reduce using rule 43 (instruction -> input .)
    FLOAT           reduce using rule 43 (instruction -> input .)
    LONG            reduce using rule 43 (instruction -> input .)
    SHORT           reduce using rule 43 (instruction -> input .)
    DOUBLE          reduce using rule 43 (instruction -> input .)
    FOR             reduce using rule 43 (instruction -> input .)
    RETURN          reduce using rule 43 (instruction -> input .)
    RIGHT_BR_CURLY  reduce using rule 43 (instruction -> input .)


state 123

    (44) instruction -> comment .

    IF              reduce using rule 44 (instruction -> comment .)
    VAR             reduce using rule 44 (instruction -> comment .)
    COUT            reduce using rule 44 (instruction -> comment .)
    CIN             reduce using rule 44 (instruction -> comment .)
    COMMENT         reduce using rule 44 (instruction -> comment .)
    WHILE           reduce using rule 44 (instruction -> comment .)
    INT             reduce using rule 44 (instruction -> comment .)
    CHAR            reduce using rule 44 (instruction -> comment .)
    STRING          reduce using rule 44 (instruction -> comment .)
    BOOL            reduce using rule 44 (instruction -> comment .)
    FLOAT           reduce using rule 44 (instruction -> comment .)
    LONG            reduce using rule 44 (instruction -> comment .)
    SHORT           reduce using rule 44 (instruction -> comment .)
    DOUBLE          reduce using rule 44 (instruction -> comment .)
    FOR             reduce using rule 44 (instruction -> comment .)
    RETURN          reduce using rule 44 (instruction -> comment .)
    RIGHT_BR_CURLY  reduce using rule 44 (instruction -> comment .)


state 124

    (45) instruction -> function_call .

    IF              reduce using rule 45 (instruction -> function_call .)
    VAR             reduce using rule 45 (instruction -> function_call .)
    COUT            reduce using rule 45 (instruction -> function_call .)
    CIN             reduce using rule 45 (instruction -> function_call .)
    COMMENT         reduce using rule 45 (instruction -> function_call .)
    WHILE           reduce using rule 45 (instruction -> function_call .)
    INT             reduce using rule 45 (instruction -> function_call .)
    CHAR            reduce using rule 45 (instruction -> function_call .)
    STRING          reduce using rule 45 (instruction -> function_call .)
    BOOL            reduce using rule 45 (instruction -> function_call .)
    FLOAT           reduce using rule 45 (instruction -> function_call .)
    LONG            reduce using rule 45 (instruction -> function_call .)
    SHORT           reduce using rule 45 (instruction -> function_call .)
    DOUBLE          reduce using rule 45 (instruction -> function_call .)
    FOR             reduce using rule 45 (instruction -> function_call .)
    RETURN          reduce using rule 45 (instruction -> function_call .)
    RIGHT_BR_CURLY  reduce using rule 45 (instruction -> function_call .)


state 125

    (57) loop -> while_loop .

    IF              reduce using rule 57 (loop -> while_loop .)
    VAR             reduce using rule 57 (loop -> while_loop .)
    COUT            reduce using rule 57 (loop -> while_loop .)
    CIN             reduce using rule 57 (loop -> while_loop .)
    COMMENT         reduce using rule 57 (loop -> while_loop .)
    WHILE           reduce using rule 57 (loop -> while_loop .)
    INT             reduce using rule 57 (loop -> while_loop .)
    CHAR            reduce using rule 57 (loop -> while_loop .)
    STRING          reduce using rule 57 (loop -> while_loop .)
    BOOL            reduce using rule 57 (loop -> while_loop .)
    FLOAT           reduce using rule 57 (loop -> while_loop .)
    LONG            reduce using rule 57 (loop -> while_loop .)
    SHORT           reduce using rule 57 (loop -> while_loop .)
    DOUBLE          reduce using rule 57 (loop -> while_loop .)
    FOR             reduce using rule 57 (loop -> while_loop .)
    RETURN          reduce using rule 57 (loop -> while_loop .)
    RIGHT_BR_CURLY  reduce using rule 57 (loop -> while_loop .)


state 126

    (58) loop -> for_loop .

    IF              reduce using rule 58 (loop -> for_loop .)
    VAR             reduce using rule 58 (loop -> for_loop .)
    COUT            reduce using rule 58 (loop -> for_loop .)
    CIN             reduce using rule 58 (loop -> for_loop .)
    COMMENT         reduce using rule 58 (loop -> for_loop .)
    WHILE           reduce using rule 58 (loop -> for_loop .)
    INT             reduce using rule 58 (loop -> for_loop .)
    CHAR            reduce using rule 58 (loop -> for_loop .)
    STRING          reduce using rule 58 (loop -> for_loop .)
    BOOL            reduce using rule 58 (loop -> for_loop .)
    FLOAT           reduce using rule 58 (loop -> for_loop .)
    LONG            reduce using rule 58 (loop -> for_loop .)
    SHORT           reduce using rule 58 (loop -> for_loop .)
    DOUBLE          reduce using rule 58 (loop -> for_loop .)
    FOR             reduce using rule 58 (loop -> for_loop .)
    RETURN          reduce using rule 58 (loop -> for_loop .)
    RIGHT_BR_CURLY  reduce using rule 58 (loop -> for_loop .)


state 127

    (60) if_statement -> IF . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> IF . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement

    LEFT_BR         shift and go to state 144


state 128

    (110) assignment -> get_array_element . EQUAL value SEMICOLON
    (111) assignment -> get_array_element . EQUAL VAR SEMICOLON

    EQUAL           shift and go to state 145


state 129

    (103) operation -> increment .

    IF              reduce using rule 103 (operation -> increment .)
    VAR             reduce using rule 103 (operation -> increment .)
    COUT            reduce using rule 103 (operation -> increment .)
    CIN             reduce using rule 103 (operation -> increment .)
    COMMENT         reduce using rule 103 (operation -> increment .)
    WHILE           reduce using rule 103 (operation -> increment .)
    INT             reduce using rule 103 (operation -> increment .)
    CHAR            reduce using rule 103 (operation -> increment .)
    STRING          reduce using rule 103 (operation -> increment .)
    BOOL            reduce using rule 103 (operation -> increment .)
    FLOAT           reduce using rule 103 (operation -> increment .)
    LONG            reduce using rule 103 (operation -> increment .)
    SHORT           reduce using rule 103 (operation -> increment .)
    DOUBLE          reduce using rule 103 (operation -> increment .)
    FOR             reduce using rule 103 (operation -> increment .)
    RETURN          reduce using rule 103 (operation -> increment .)
    RIGHT_BR_CURLY  reduce using rule 103 (operation -> increment .)


state 130

    (104) operation -> decrement .

    IF              reduce using rule 104 (operation -> decrement .)
    VAR             reduce using rule 104 (operation -> decrement .)
    COUT            reduce using rule 104 (operation -> decrement .)
    CIN             reduce using rule 104 (operation -> decrement .)
    COMMENT         reduce using rule 104 (operation -> decrement .)
    WHILE           reduce using rule 104 (operation -> decrement .)
    INT             reduce using rule 104 (operation -> decrement .)
    CHAR            reduce using rule 104 (operation -> decrement .)
    STRING          reduce using rule 104 (operation -> decrement .)
    BOOL            reduce using rule 104 (operation -> decrement .)
    FLOAT           reduce using rule 104 (operation -> decrement .)
    LONG            reduce using rule 104 (operation -> decrement .)
    SHORT           reduce using rule 104 (operation -> decrement .)
    DOUBLE          reduce using rule 104 (operation -> decrement .)
    FOR             reduce using rule 104 (operation -> decrement .)
    RETURN          reduce using rule 104 (operation -> decrement .)
    RIGHT_BR_CURLY  reduce using rule 104 (operation -> decrement .)


state 131

    (126) print -> COUT . out SEMICOLON
    (118) out -> . OUT VAR
    (119) out -> . OUT VAR out
    (120) out -> . OUT TEXT
    (121) out -> . OUT TEXT out
    (122) out -> . OUT ENDL
    (123) out -> . OUT ENDL out

    OUT             shift and go to state 147

    out                            shift and go to state 146

state 132

    (127) input -> CIN . in SEMICOLON
    (124) in -> . IN VAR
    (125) in -> . IN VAR in

    IN              shift and go to state 149

    in                             shift and go to state 148

state 133

    (46) while_loop -> WHILE . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> WHILE . LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 150


state 134

    (56) for_loop -> for_loop_statement . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 151


state 135

    (48) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LEFT_BR         shift and go to state 152


state 136

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 153


state 137

    (112) var_declaration -> type VAR . SEMICOLON
    (114) var_declaration -> type VAR . EQUAL value SEMICOLON
    (115) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (116) var_declaration -> type VAR . EQUAL function_call
    (105) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 40
    EQUAL           shift and go to state 41
    LEFT_BR_SQUARED shift and go to state 43


state 138

    (107) assignment -> VAR EQUAL . value SEMICOLON
    (108) assignment -> VAR EQUAL . VAR SEMICOLON
    (109) assignment -> VAR EQUAL . function_call
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    VAR             shift and go to state 154
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    value                          shift and go to state 155
    function_call                  shift and go to state 156
    number                         shift and go to state 51
    get_array_element              shift and go to state 52
    string_value                   shift and go to state 53
    bool_value                     shift and go to state 54
    math_operation                 shift and go to state 55

state 139

    (98) increment -> VAR PLUS_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 157


state 140

    (99) decrement -> VAR MINUS_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 158


state 141

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 159


state 142

    (128) returning -> RETURN . value SEMICOLON
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    VAR             shift and go to state 91
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    value                          shift and go to state 160
    number                         shift and go to state 51
    get_array_element              shift and go to state 52
    string_value                   shift and go to state 53
    bool_value                     shift and go to state 54
    math_operation                 shift and go to state 55

state 143

    (35) instructions -> instruction instructions .

    RETURN          reduce using rule 35 (instructions -> instruction instructions .)
    RIGHT_BR_CURLY  reduce using rule 35 (instructions -> instruction instructions .)


state 144

    (60) if_statement -> IF LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> IF LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (62) comparisons -> . comparison
    (63) comparisons -> . comparison conjunction comparisons
    (64) comparison -> . value comparator value
    (65) comparison -> . value EQUAL_EQUAL EMPTY_TEXT
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    VAR             shift and go to state 91
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    comparisons                    shift and go to state 161
    comparison                     shift and go to state 162
    value                          shift and go to state 163
    number                         shift and go to state 51
    get_array_element              shift and go to state 52
    string_value                   shift and go to state 53
    bool_value                     shift and go to state 54
    math_operation                 shift and go to state 55

state 145

    (110) assignment -> get_array_element EQUAL . value SEMICOLON
    (111) assignment -> get_array_element EQUAL . VAR SEMICOLON
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    VAR             shift and go to state 165
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    get_array_element              shift and go to state 52
    value                          shift and go to state 164
    number                         shift and go to state 51
    string_value                   shift and go to state 53
    bool_value                     shift and go to state 54
    math_operation                 shift and go to state 55

state 146

    (126) print -> COUT out . SEMICOLON

    SEMICOLON       shift and go to state 166


state 147

    (118) out -> OUT . VAR
    (119) out -> OUT . VAR out
    (120) out -> OUT . TEXT
    (121) out -> OUT . TEXT out
    (122) out -> OUT . ENDL
    (123) out -> OUT . ENDL out

    VAR             shift and go to state 167
    TEXT            shift and go to state 168
    ENDL            shift and go to state 169


state 148

    (127) input -> CIN in . SEMICOLON

    SEMICOLON       shift and go to state 170


state 149

    (124) in -> IN . VAR
    (125) in -> IN . VAR in

    VAR             shift and go to state 171


state 150

    (46) while_loop -> WHILE LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> WHILE LEFT_BR . bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (62) comparisons -> . comparison
    (63) comparisons -> . comparison conjunction comparisons
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (64) comparison -> . value comparator value
    (65) comparison -> . value EQUAL_EQUAL EMPTY_TEXT
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    TRUE            shift and go to state 60
    FALSE           shift and go to state 61
    VAR             shift and go to state 91
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    comparisons                    shift and go to state 172
    bool_value                     shift and go to state 173
    comparison                     shift and go to state 162
    value                          shift and go to state 163
    number                         shift and go to state 51
    get_array_element              shift and go to state 52
    string_value                   shift and go to state 53
    math_operation                 shift and go to state 55

state 151

    (56) for_loop -> for_loop_statement LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (131) change_tab_number -> .

    IF              reduce using rule 131 (change_tab_number -> .)
    VAR             reduce using rule 131 (change_tab_number -> .)
    COUT            reduce using rule 131 (change_tab_number -> .)
    CIN             reduce using rule 131 (change_tab_number -> .)
    COMMENT         reduce using rule 131 (change_tab_number -> .)
    WHILE           reduce using rule 131 (change_tab_number -> .)
    INT             reduce using rule 131 (change_tab_number -> .)
    CHAR            reduce using rule 131 (change_tab_number -> .)
    STRING          reduce using rule 131 (change_tab_number -> .)
    BOOL            reduce using rule 131 (change_tab_number -> .)
    FLOAT           reduce using rule 131 (change_tab_number -> .)
    LONG            reduce using rule 131 (change_tab_number -> .)
    SHORT           reduce using rule 131 (change_tab_number -> .)
    DOUBLE          reduce using rule 131 (change_tab_number -> .)
    FOR             reduce using rule 131 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 131 (change_tab_number -> .)

    change_tab_number              shift and go to state 174

state 152

    (48) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT             shift and go to state 175


state 153

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    CLASS           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    HASH            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    USING           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VOID            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    $end            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 154

    (108) assignment -> VAR EQUAL VAR . SEMICOLON
    (93) value -> VAR .
    (24) function_call -> VAR . LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> VAR . LEFT_BR var_list RIGHT_BR SEMICOLON
    (105) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (100) math_operation -> VAR . operator VAR
    (101) math_operation -> VAR . operator number
    (72) operator -> . PLUS
    (73) operator -> . MINUS
    (74) operator -> . MULTIPLY
    (75) operator -> . DIVIDE

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 176
    LEFT_BR         shift and go to state 71
    LEFT_BR_SQUARED shift and go to state 43
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76

  ! SEMICOLON       [ reduce using rule 93 (value -> VAR .) ]

    operator                       shift and go to state 72

state 155

    (107) assignment -> VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 177


state 156

    (109) assignment -> VAR EQUAL function_call .

    IF              reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    VAR             reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    COUT            reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    CIN             reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    COMMENT         reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    WHILE           reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    INT             reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    CHAR            reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    STRING          reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    BOOL            reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    FLOAT           reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    LONG            reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    SHORT           reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    DOUBLE          reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    FOR             reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    RETURN          reduce using rule 109 (assignment -> VAR EQUAL function_call .)
    RIGHT_BR_CURLY  reduce using rule 109 (assignment -> VAR EQUAL function_call .)


state 157

    (98) increment -> VAR PLUS_PLUS SEMICOLON .

    IF              reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    VAR             reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    COUT            reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CIN             reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    COMMENT         reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    WHILE           reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT             reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CHAR            reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    STRING          reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    BOOL            reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT           reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    LONG            reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    SHORT           reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    DOUBLE          reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FOR             reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RETURN          reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 98 (increment -> VAR PLUS_PLUS SEMICOLON .)


state 158

    (99) decrement -> VAR MINUS_MINUS SEMICOLON .

    IF              reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    VAR             reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    COUT            reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CIN             reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    COMMENT         reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    WHILE           reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT             reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CHAR            reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    STRING          reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    BOOL            reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT           reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    LONG            reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    SHORT           reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    DOUBLE          reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FOR             reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RETURN          reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 99 (decrement -> VAR MINUS_MINUS SEMICOLON .)


state 159

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .

    CLASS           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    HASH            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    USING           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    VOID            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    INT             reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    CHAR            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    STRING          reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    BOOL            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    LONG            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    SHORT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    $end            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY .)


state 160

    (128) returning -> RETURN value . SEMICOLON

    SEMICOLON       shift and go to state 178


state 161

    (60) if_statement -> IF LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> IF LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement

    RIGHT_BR        shift and go to state 179


state 162

    (62) comparisons -> comparison .
    (63) comparisons -> comparison . conjunction comparisons
    (84) conjunction -> . AND
    (85) conjunction -> . OR

    RIGHT_BR        reduce using rule 62 (comparisons -> comparison .)
    AND             shift and go to state 181
    OR              shift and go to state 182

    conjunction                    shift and go to state 180

state 163

    (64) comparison -> value . comparator value
    (65) comparison -> value . EQUAL_EQUAL EMPTY_TEXT
    (66) comparator -> . LESS
    (67) comparator -> . LESS_EQUAL
    (68) comparator -> . GREATER
    (69) comparator -> . GREATER_EQUAL
    (70) comparator -> . EQUAL_EQUAL
    (71) comparator -> . NOT_EQUAL

    EQUAL_EQUAL     shift and go to state 184
    LESS            shift and go to state 185
    LESS_EQUAL      shift and go to state 186
    GREATER         shift and go to state 187
    GREATER_EQUAL   shift and go to state 188
    NOT_EQUAL       shift and go to state 189

    comparator                     shift and go to state 183

state 164

    (110) assignment -> get_array_element EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 190


state 165

    (111) assignment -> get_array_element EQUAL VAR . SEMICOLON
    (93) value -> VAR .
    (105) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> VAR . LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (100) math_operation -> VAR . operator VAR
    (101) math_operation -> VAR . operator number
    (72) operator -> . PLUS
    (73) operator -> . MINUS
    (74) operator -> . MULTIPLY
    (75) operator -> . DIVIDE

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 191
    LEFT_BR_SQUARED shift and go to state 43
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76

  ! SEMICOLON       [ reduce using rule 93 (value -> VAR .) ]

    operator                       shift and go to state 72

state 166

    (126) print -> COUT out SEMICOLON .

    IF              reduce using rule 126 (print -> COUT out SEMICOLON .)
    VAR             reduce using rule 126 (print -> COUT out SEMICOLON .)
    COUT            reduce using rule 126 (print -> COUT out SEMICOLON .)
    CIN             reduce using rule 126 (print -> COUT out SEMICOLON .)
    COMMENT         reduce using rule 126 (print -> COUT out SEMICOLON .)
    WHILE           reduce using rule 126 (print -> COUT out SEMICOLON .)
    INT             reduce using rule 126 (print -> COUT out SEMICOLON .)
    CHAR            reduce using rule 126 (print -> COUT out SEMICOLON .)
    STRING          reduce using rule 126 (print -> COUT out SEMICOLON .)
    BOOL            reduce using rule 126 (print -> COUT out SEMICOLON .)
    FLOAT           reduce using rule 126 (print -> COUT out SEMICOLON .)
    LONG            reduce using rule 126 (print -> COUT out SEMICOLON .)
    SHORT           reduce using rule 126 (print -> COUT out SEMICOLON .)
    DOUBLE          reduce using rule 126 (print -> COUT out SEMICOLON .)
    FOR             reduce using rule 126 (print -> COUT out SEMICOLON .)
    RETURN          reduce using rule 126 (print -> COUT out SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 126 (print -> COUT out SEMICOLON .)


state 167

    (118) out -> OUT VAR .
    (119) out -> OUT VAR . out
    (118) out -> . OUT VAR
    (119) out -> . OUT VAR out
    (120) out -> . OUT TEXT
    (121) out -> . OUT TEXT out
    (122) out -> . OUT ENDL
    (123) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 118 (out -> OUT VAR .)
    OUT             shift and go to state 147

    out                            shift and go to state 192

state 168

    (120) out -> OUT TEXT .
    (121) out -> OUT TEXT . out
    (118) out -> . OUT VAR
    (119) out -> . OUT VAR out
    (120) out -> . OUT TEXT
    (121) out -> . OUT TEXT out
    (122) out -> . OUT ENDL
    (123) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 120 (out -> OUT TEXT .)
    OUT             shift and go to state 147

    out                            shift and go to state 193

state 169

    (122) out -> OUT ENDL .
    (123) out -> OUT ENDL . out
    (118) out -> . OUT VAR
    (119) out -> . OUT VAR out
    (120) out -> . OUT TEXT
    (121) out -> . OUT TEXT out
    (122) out -> . OUT ENDL
    (123) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 122 (out -> OUT ENDL .)
    OUT             shift and go to state 147

    out                            shift and go to state 194

state 170

    (127) input -> CIN in SEMICOLON .

    IF              reduce using rule 127 (input -> CIN in SEMICOLON .)
    VAR             reduce using rule 127 (input -> CIN in SEMICOLON .)
    COUT            reduce using rule 127 (input -> CIN in SEMICOLON .)
    CIN             reduce using rule 127 (input -> CIN in SEMICOLON .)
    COMMENT         reduce using rule 127 (input -> CIN in SEMICOLON .)
    WHILE           reduce using rule 127 (input -> CIN in SEMICOLON .)
    INT             reduce using rule 127 (input -> CIN in SEMICOLON .)
    CHAR            reduce using rule 127 (input -> CIN in SEMICOLON .)
    STRING          reduce using rule 127 (input -> CIN in SEMICOLON .)
    BOOL            reduce using rule 127 (input -> CIN in SEMICOLON .)
    FLOAT           reduce using rule 127 (input -> CIN in SEMICOLON .)
    LONG            reduce using rule 127 (input -> CIN in SEMICOLON .)
    SHORT           reduce using rule 127 (input -> CIN in SEMICOLON .)
    DOUBLE          reduce using rule 127 (input -> CIN in SEMICOLON .)
    FOR             reduce using rule 127 (input -> CIN in SEMICOLON .)
    RETURN          reduce using rule 127 (input -> CIN in SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 127 (input -> CIN in SEMICOLON .)


state 171

    (124) in -> IN VAR .
    (125) in -> IN VAR . in
    (124) in -> . IN VAR
    (125) in -> . IN VAR in

    SEMICOLON       reduce using rule 124 (in -> IN VAR .)
    IN              shift and go to state 149

    in                             shift and go to state 195

state 172

    (46) while_loop -> WHILE LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 196


state 173

    (47) while_loop -> WHILE LEFT_BR bool_value . RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (96) value -> bool_value .

    RIGHT_BR        shift and go to state 197
    EQUAL_EQUAL     reduce using rule 96 (value -> bool_value .)
    LESS            reduce using rule 96 (value -> bool_value .)
    LESS_EQUAL      reduce using rule 96 (value -> bool_value .)
    GREATER         reduce using rule 96 (value -> bool_value .)
    GREATER_EQUAL   reduce using rule 96 (value -> bool_value .)
    NOT_EQUAL       reduce using rule 96 (value -> bool_value .)


state 174

    (56) for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (34) instructions -> . instruction
    (35) instructions -> . instruction instructions
    (36) instruction -> . loop
    (37) instruction -> . if_statement
    (38) instruction -> . assignment
    (39) instruction -> . operation
    (40) instruction -> . empty
    (41) instruction -> . var_declaration
    (42) instruction -> . print
    (43) instruction -> . input
    (44) instruction -> . comment
    (45) instruction -> . function_call
    (57) loop -> . while_loop
    (58) loop -> . for_loop
    (60) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (107) assignment -> . VAR EQUAL value SEMICOLON
    (108) assignment -> . VAR EQUAL VAR SEMICOLON
    (109) assignment -> . VAR EQUAL function_call
    (110) assignment -> . get_array_element EQUAL value SEMICOLON
    (111) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (103) operation -> . increment
    (104) operation -> . decrement
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (126) print -> . COUT out SEMICOLON
    (127) input -> . CIN in SEMICOLON
    (129) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (46) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (56) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) increment -> . VAR PLUS_PLUS SEMICOLON
    (99) decrement -> . VAR MINUS_MINUS SEMICOLON
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 127
    VAR             shift and go to state 112
    RIGHT_BR_CURLY  reduce using rule 130 (empty -> .)
    COUT            shift and go to state 131
    CIN             shift and go to state 132
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 133
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 135

  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! VAR             [ reduce using rule 130 (empty -> .) ]
  ! COUT            [ reduce using rule 130 (empty -> .) ]
  ! CIN             [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]

    for_loop_statement             shift and go to state 134
    instructions                   shift and go to state 198
    instruction                    shift and go to state 114
    loop                           shift and go to state 115
    if_statement                   shift and go to state 116
    assignment                     shift and go to state 117
    operation                      shift and go to state 118
    empty                          shift and go to state 119
    var_declaration                shift and go to state 120
    print                          shift and go to state 121
    input                          shift and go to state 122
    comment                        shift and go to state 123
    function_call                  shift and go to state 124
    while_loop                     shift and go to state 125
    for_loop                       shift and go to state 126
    get_array_element              shift and go to state 128
    increment                      shift and go to state 129
    decrement                      shift and go to state 130
    type                           shift and go to state 111
    array_declaration              shift and go to state 90

state 175

    (48) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 199


state 176

    (108) assignment -> VAR EQUAL VAR SEMICOLON .

    IF              reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    COMMENT         reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 108 (assignment -> VAR EQUAL VAR SEMICOLON .)


state 177

    (107) assignment -> VAR EQUAL value SEMICOLON .

    IF              reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    COUT            reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    CIN             reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    COMMENT         reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 107 (assignment -> VAR EQUAL value SEMICOLON .)


state 178

    (128) returning -> RETURN value SEMICOLON .

    RIGHT_BR_CURLY  reduce using rule 128 (returning -> RETURN value SEMICOLON .)


state 179

    (60) if_statement -> IF LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> IF LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement

    LEFT_BR_CURLY   shift and go to state 200


state 180

    (63) comparisons -> comparison conjunction . comparisons
    (62) comparisons -> . comparison
    (63) comparisons -> . comparison conjunction comparisons
    (64) comparison -> . value comparator value
    (65) comparison -> . value EQUAL_EQUAL EMPTY_TEXT
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    VAR             shift and go to state 91
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    comparison                     shift and go to state 162
    comparisons                    shift and go to state 201
    value                          shift and go to state 163
    number                         shift and go to state 51
    get_array_element              shift and go to state 52
    string_value                   shift and go to state 53
    bool_value                     shift and go to state 54
    math_operation                 shift and go to state 55

state 181

    (84) conjunction -> AND .

    VAR             reduce using rule 84 (conjunction -> AND .)
    INT_NUMBER      reduce using rule 84 (conjunction -> AND .)
    FLOAT_NUMBER    reduce using rule 84 (conjunction -> AND .)
    TEXT            reduce using rule 84 (conjunction -> AND .)
    SIGN            reduce using rule 84 (conjunction -> AND .)
    TRUE            reduce using rule 84 (conjunction -> AND .)
    FALSE           reduce using rule 84 (conjunction -> AND .)


state 182

    (85) conjunction -> OR .

    VAR             reduce using rule 85 (conjunction -> OR .)
    INT_NUMBER      reduce using rule 85 (conjunction -> OR .)
    FLOAT_NUMBER    reduce using rule 85 (conjunction -> OR .)
    TEXT            reduce using rule 85 (conjunction -> OR .)
    SIGN            reduce using rule 85 (conjunction -> OR .)
    TRUE            reduce using rule 85 (conjunction -> OR .)
    FALSE           reduce using rule 85 (conjunction -> OR .)


state 183

    (64) comparison -> value comparator . value
    (92) value -> . number
    (93) value -> . VAR
    (94) value -> . get_array_element
    (95) value -> . string_value
    (96) value -> . bool_value
    (97) value -> . math_operation
    (88) number -> . INT_NUMBER
    (89) number -> . FLOAT_NUMBER
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (86) string_value -> . TEXT
    (87) string_value -> . SIGN
    (90) bool_value -> . TRUE
    (91) bool_value -> . FALSE
    (100) math_operation -> . VAR operator VAR
    (101) math_operation -> . VAR operator number
    (102) math_operation -> . number operator number

    VAR             shift and go to state 91
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59
    TRUE            shift and go to state 60
    FALSE           shift and go to state 61

    value                          shift and go to state 202
    number                         shift and go to state 51
    get_array_element              shift and go to state 52
    string_value                   shift and go to state 53
    bool_value                     shift and go to state 54
    math_operation                 shift and go to state 55

state 184

    (65) comparison -> value EQUAL_EQUAL . EMPTY_TEXT
    (70) comparator -> EQUAL_EQUAL .

    EMPTY_TEXT      shift and go to state 203
    VAR             reduce using rule 70 (comparator -> EQUAL_EQUAL .)
    INT_NUMBER      reduce using rule 70 (comparator -> EQUAL_EQUAL .)
    FLOAT_NUMBER    reduce using rule 70 (comparator -> EQUAL_EQUAL .)
    TEXT            reduce using rule 70 (comparator -> EQUAL_EQUAL .)
    SIGN            reduce using rule 70 (comparator -> EQUAL_EQUAL .)
    TRUE            reduce using rule 70 (comparator -> EQUAL_EQUAL .)
    FALSE           reduce using rule 70 (comparator -> EQUAL_EQUAL .)


state 185

    (66) comparator -> LESS .

    VAR             reduce using rule 66 (comparator -> LESS .)
    INT_NUMBER      reduce using rule 66 (comparator -> LESS .)
    FLOAT_NUMBER    reduce using rule 66 (comparator -> LESS .)
    TEXT            reduce using rule 66 (comparator -> LESS .)
    SIGN            reduce using rule 66 (comparator -> LESS .)
    TRUE            reduce using rule 66 (comparator -> LESS .)
    FALSE           reduce using rule 66 (comparator -> LESS .)


state 186

    (67) comparator -> LESS_EQUAL .

    VAR             reduce using rule 67 (comparator -> LESS_EQUAL .)
    INT_NUMBER      reduce using rule 67 (comparator -> LESS_EQUAL .)
    FLOAT_NUMBER    reduce using rule 67 (comparator -> LESS_EQUAL .)
    TEXT            reduce using rule 67 (comparator -> LESS_EQUAL .)
    SIGN            reduce using rule 67 (comparator -> LESS_EQUAL .)
    TRUE            reduce using rule 67 (comparator -> LESS_EQUAL .)
    FALSE           reduce using rule 67 (comparator -> LESS_EQUAL .)


state 187

    (68) comparator -> GREATER .

    VAR             reduce using rule 68 (comparator -> GREATER .)
    INT_NUMBER      reduce using rule 68 (comparator -> GREATER .)
    FLOAT_NUMBER    reduce using rule 68 (comparator -> GREATER .)
    TEXT            reduce using rule 68 (comparator -> GREATER .)
    SIGN            reduce using rule 68 (comparator -> GREATER .)
    TRUE            reduce using rule 68 (comparator -> GREATER .)
    FALSE           reduce using rule 68 (comparator -> GREATER .)


state 188

    (69) comparator -> GREATER_EQUAL .

    VAR             reduce using rule 69 (comparator -> GREATER_EQUAL .)
    INT_NUMBER      reduce using rule 69 (comparator -> GREATER_EQUAL .)
    FLOAT_NUMBER    reduce using rule 69 (comparator -> GREATER_EQUAL .)
    TEXT            reduce using rule 69 (comparator -> GREATER_EQUAL .)
    SIGN            reduce using rule 69 (comparator -> GREATER_EQUAL .)
    TRUE            reduce using rule 69 (comparator -> GREATER_EQUAL .)
    FALSE           reduce using rule 69 (comparator -> GREATER_EQUAL .)


state 189

    (71) comparator -> NOT_EQUAL .

    VAR             reduce using rule 71 (comparator -> NOT_EQUAL .)
    INT_NUMBER      reduce using rule 71 (comparator -> NOT_EQUAL .)
    FLOAT_NUMBER    reduce using rule 71 (comparator -> NOT_EQUAL .)
    TEXT            reduce using rule 71 (comparator -> NOT_EQUAL .)
    SIGN            reduce using rule 71 (comparator -> NOT_EQUAL .)
    TRUE            reduce using rule 71 (comparator -> NOT_EQUAL .)
    FALSE           reduce using rule 71 (comparator -> NOT_EQUAL .)


state 190

    (110) assignment -> get_array_element EQUAL value SEMICOLON .

    IF              reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    VAR             reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    COUT            reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    CIN             reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    COMMENT         reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    WHILE           reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    INT             reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    CHAR            reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    STRING          reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    BOOL            reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    LONG            reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    SHORT           reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FOR             reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RETURN          reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 110 (assignment -> get_array_element EQUAL value SEMICOLON .)


state 191

    (111) assignment -> get_array_element EQUAL VAR SEMICOLON .

    IF              reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    COMMENT         reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    INT             reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 111 (assignment -> get_array_element EQUAL VAR SEMICOLON .)


state 192

    (119) out -> OUT VAR out .

    SEMICOLON       reduce using rule 119 (out -> OUT VAR out .)


state 193

    (121) out -> OUT TEXT out .

    SEMICOLON       reduce using rule 121 (out -> OUT TEXT out .)


state 194

    (123) out -> OUT ENDL out .

    SEMICOLON       reduce using rule 123 (out -> OUT ENDL out .)


state 195

    (125) in -> IN VAR in .

    SEMICOLON       reduce using rule 125 (in -> IN VAR in .)


state 196

    (46) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 204


state 197

    (47) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR . LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 205


state 198

    (56) for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 206


state 199

    (48) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    EQUAL           shift and go to state 207


state 200

    (60) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY else_statement
    (131) change_tab_number -> .

    IF              reduce using rule 131 (change_tab_number -> .)
    VAR             reduce using rule 131 (change_tab_number -> .)
    COUT            reduce using rule 131 (change_tab_number -> .)
    CIN             reduce using rule 131 (change_tab_number -> .)
    COMMENT         reduce using rule 131 (change_tab_number -> .)
    WHILE           reduce using rule 131 (change_tab_number -> .)
    INT             reduce using rule 131 (change_tab_number -> .)
    CHAR            reduce using rule 131 (change_tab_number -> .)
    STRING          reduce using rule 131 (change_tab_number -> .)
    BOOL            reduce using rule 131 (change_tab_number -> .)
    FLOAT           reduce using rule 131 (change_tab_number -> .)
    LONG            reduce using rule 131 (change_tab_number -> .)
    SHORT           reduce using rule 131 (change_tab_number -> .)
    DOUBLE          reduce using rule 131 (change_tab_number -> .)
    FOR             reduce using rule 131 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 131 (change_tab_number -> .)

    change_tab_number              shift and go to state 208

state 201

    (63) comparisons -> comparison conjunction comparisons .

    RIGHT_BR        reduce using rule 63 (comparisons -> comparison conjunction comparisons .)


state 202

    (64) comparison -> value comparator value .

    AND             reduce using rule 64 (comparison -> value comparator value .)
    OR              reduce using rule 64 (comparison -> value comparator value .)
    RIGHT_BR        reduce using rule 64 (comparison -> value comparator value .)


state 203

    (65) comparison -> value EQUAL_EQUAL EMPTY_TEXT .

    AND             reduce using rule 65 (comparison -> value EQUAL_EQUAL EMPTY_TEXT .)
    OR              reduce using rule 65 (comparison -> value EQUAL_EQUAL EMPTY_TEXT .)
    RIGHT_BR        reduce using rule 65 (comparison -> value EQUAL_EQUAL EMPTY_TEXT .)


state 204

    (46) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (131) change_tab_number -> .

    IF              reduce using rule 131 (change_tab_number -> .)
    VAR             reduce using rule 131 (change_tab_number -> .)
    COUT            reduce using rule 131 (change_tab_number -> .)
    CIN             reduce using rule 131 (change_tab_number -> .)
    COMMENT         reduce using rule 131 (change_tab_number -> .)
    WHILE           reduce using rule 131 (change_tab_number -> .)
    INT             reduce using rule 131 (change_tab_number -> .)
    CHAR            reduce using rule 131 (change_tab_number -> .)
    STRING          reduce using rule 131 (change_tab_number -> .)
    BOOL            reduce using rule 131 (change_tab_number -> .)
    FLOAT           reduce using rule 131 (change_tab_number -> .)
    LONG            reduce using rule 131 (change_tab_number -> .)
    SHORT           reduce using rule 131 (change_tab_number -> .)
    DOUBLE          reduce using rule 131 (change_tab_number -> .)
    FOR             reduce using rule 131 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 131 (change_tab_number -> .)

    change_tab_number              shift and go to state 209

state 205

    (47) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY . change_tab_number instructions RIGHT_BR_CURLY
    (131) change_tab_number -> .

    IF              reduce using rule 131 (change_tab_number -> .)
    VAR             reduce using rule 131 (change_tab_number -> .)
    COUT            reduce using rule 131 (change_tab_number -> .)
    CIN             reduce using rule 131 (change_tab_number -> .)
    COMMENT         reduce using rule 131 (change_tab_number -> .)
    WHILE           reduce using rule 131 (change_tab_number -> .)
    INT             reduce using rule 131 (change_tab_number -> .)
    CHAR            reduce using rule 131 (change_tab_number -> .)
    STRING          reduce using rule 131 (change_tab_number -> .)
    BOOL            reduce using rule 131 (change_tab_number -> .)
    FLOAT           reduce using rule 131 (change_tab_number -> .)
    LONG            reduce using rule 131 (change_tab_number -> .)
    SHORT           reduce using rule 131 (change_tab_number -> .)
    DOUBLE          reduce using rule 131 (change_tab_number -> .)
    FOR             reduce using rule 131 (change_tab_number -> .)
    RIGHT_BR_CURLY  reduce using rule 131 (change_tab_number -> .)

    change_tab_number              shift and go to state 210

state 206

    (56) for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    IF              reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 56 (for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 207

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 211


state 208

    (60) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (61) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY else_statement
    (34) instructions -> . instruction
    (35) instructions -> . instruction instructions
    (36) instruction -> . loop
    (37) instruction -> . if_statement
    (38) instruction -> . assignment
    (39) instruction -> . operation
    (40) instruction -> . empty
    (41) instruction -> . var_declaration
    (42) instruction -> . print
    (43) instruction -> . input
    (44) instruction -> . comment
    (45) instruction -> . function_call
    (57) loop -> . while_loop
    (58) loop -> . for_loop
    (60) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (107) assignment -> . VAR EQUAL value SEMICOLON
    (108) assignment -> . VAR EQUAL VAR SEMICOLON
    (109) assignment -> . VAR EQUAL function_call
    (110) assignment -> . get_array_element EQUAL value SEMICOLON
    (111) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (103) operation -> . increment
    (104) operation -> . decrement
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (126) print -> . COUT out SEMICOLON
    (127) input -> . CIN in SEMICOLON
    (129) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (46) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (56) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) increment -> . VAR PLUS_PLUS SEMICOLON
    (99) decrement -> . VAR MINUS_MINUS SEMICOLON
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 127
    VAR             shift and go to state 112
    RIGHT_BR_CURLY  reduce using rule 130 (empty -> .)
    COUT            shift and go to state 131
    CIN             shift and go to state 132
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 133
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 135

  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! VAR             [ reduce using rule 130 (empty -> .) ]
  ! COUT            [ reduce using rule 130 (empty -> .) ]
  ! CIN             [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]

    instructions                   shift and go to state 212
    instruction                    shift and go to state 114
    loop                           shift and go to state 115
    if_statement                   shift and go to state 116
    assignment                     shift and go to state 117
    operation                      shift and go to state 118
    empty                          shift and go to state 119
    var_declaration                shift and go to state 120
    print                          shift and go to state 121
    input                          shift and go to state 122
    comment                        shift and go to state 123
    function_call                  shift and go to state 124
    while_loop                     shift and go to state 125
    for_loop                       shift and go to state 126
    get_array_element              shift and go to state 128
    increment                      shift and go to state 129
    decrement                      shift and go to state 130
    type                           shift and go to state 111
    array_declaration              shift and go to state 90
    for_loop_statement             shift and go to state 134

state 209

    (46) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (34) instructions -> . instruction
    (35) instructions -> . instruction instructions
    (36) instruction -> . loop
    (37) instruction -> . if_statement
    (38) instruction -> . assignment
    (39) instruction -> . operation
    (40) instruction -> . empty
    (41) instruction -> . var_declaration
    (42) instruction -> . print
    (43) instruction -> . input
    (44) instruction -> . comment
    (45) instruction -> . function_call
    (57) loop -> . while_loop
    (58) loop -> . for_loop
    (60) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (107) assignment -> . VAR EQUAL value SEMICOLON
    (108) assignment -> . VAR EQUAL VAR SEMICOLON
    (109) assignment -> . VAR EQUAL function_call
    (110) assignment -> . get_array_element EQUAL value SEMICOLON
    (111) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (103) operation -> . increment
    (104) operation -> . decrement
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (126) print -> . COUT out SEMICOLON
    (127) input -> . CIN in SEMICOLON
    (129) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (46) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (56) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) increment -> . VAR PLUS_PLUS SEMICOLON
    (99) decrement -> . VAR MINUS_MINUS SEMICOLON
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 127
    VAR             shift and go to state 112
    RIGHT_BR_CURLY  reduce using rule 130 (empty -> .)
    COUT            shift and go to state 131
    CIN             shift and go to state 132
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 133
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 135

  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! VAR             [ reduce using rule 130 (empty -> .) ]
  ! COUT            [ reduce using rule 130 (empty -> .) ]
  ! CIN             [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]

    instructions                   shift and go to state 213
    instruction                    shift and go to state 114
    loop                           shift and go to state 115
    if_statement                   shift and go to state 116
    assignment                     shift and go to state 117
    operation                      shift and go to state 118
    empty                          shift and go to state 119
    var_declaration                shift and go to state 120
    print                          shift and go to state 121
    input                          shift and go to state 122
    comment                        shift and go to state 123
    function_call                  shift and go to state 124
    while_loop                     shift and go to state 125
    for_loop                       shift and go to state 126
    get_array_element              shift and go to state 128
    increment                      shift and go to state 129
    decrement                      shift and go to state 130
    type                           shift and go to state 111
    array_declaration              shift and go to state 90
    for_loop_statement             shift and go to state 134

state 210

    (47) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number . instructions RIGHT_BR_CURLY
    (34) instructions -> . instruction
    (35) instructions -> . instruction instructions
    (36) instruction -> . loop
    (37) instruction -> . if_statement
    (38) instruction -> . assignment
    (39) instruction -> . operation
    (40) instruction -> . empty
    (41) instruction -> . var_declaration
    (42) instruction -> . print
    (43) instruction -> . input
    (44) instruction -> . comment
    (45) instruction -> . function_call
    (57) loop -> . while_loop
    (58) loop -> . for_loop
    (60) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (107) assignment -> . VAR EQUAL value SEMICOLON
    (108) assignment -> . VAR EQUAL VAR SEMICOLON
    (109) assignment -> . VAR EQUAL function_call
    (110) assignment -> . get_array_element EQUAL value SEMICOLON
    (111) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (103) operation -> . increment
    (104) operation -> . decrement
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (126) print -> . COUT out SEMICOLON
    (127) input -> . CIN in SEMICOLON
    (129) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (46) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (56) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) increment -> . VAR PLUS_PLUS SEMICOLON
    (99) decrement -> . VAR MINUS_MINUS SEMICOLON
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 127
    VAR             shift and go to state 112
    RIGHT_BR_CURLY  reduce using rule 130 (empty -> .)
    COUT            shift and go to state 131
    CIN             shift and go to state 132
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 133
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 135

  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! VAR             [ reduce using rule 130 (empty -> .) ]
  ! COUT            [ reduce using rule 130 (empty -> .) ]
  ! CIN             [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]

    instructions                   shift and go to state 214
    instruction                    shift and go to state 114
    loop                           shift and go to state 115
    if_statement                   shift and go to state 116
    assignment                     shift and go to state 117
    operation                      shift and go to state 118
    empty                          shift and go to state 119
    var_declaration                shift and go to state 120
    print                          shift and go to state 121
    input                          shift and go to state 122
    comment                        shift and go to state 123
    function_call                  shift and go to state 124
    while_loop                     shift and go to state 125
    for_loop                       shift and go to state 126
    get_array_element              shift and go to state 128
    increment                      shift and go to state 129
    decrement                      shift and go to state 130
    type                           shift and go to state 111
    array_declaration              shift and go to state 90
    for_loop_statement             shift and go to state 134

state 211

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 215


state 212

    (60) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY
    (61) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY else_statement

    RIGHT_BR_CURLY  shift and go to state 216


state 213

    (46) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 217


state 214

    (47) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 218


state 215

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 219


state 216

    (60) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .
    (61) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY . else_statement
    (59) else_statement -> . ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    IF              reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 60 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    ELSE            shift and go to state 221

    else_statement                 shift and go to state 220

state 217

    (46) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    IF              reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 46 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 218

    (47) while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .

    IF              reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 47 (while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY .)


state 219

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LESS            shift and go to state 222
    LESS_EQUAL      shift and go to state 223
    GREATER         shift and go to state 224
    GREATER_EQUAL   shift and go to state 225


state 220

    (61) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .

    IF              reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    VAR             reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    COUT            reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    CIN             reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    COMMENT         reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    WHILE           reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    INT             reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    CHAR            reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    STRING          reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    BOOL            reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    FLOAT           reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    LONG            reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    SHORT           reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    DOUBLE          reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    FOR             reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    RETURN          reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)
    RIGHT_BR_CURLY  reduce using rule 61 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement .)


state 221

    (59) else_statement -> ELSE . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 226


state 222

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS . VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 228
    VAR             shift and go to state 227


state 223

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL . VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 230
    VAR             shift and go to state 229


state 224

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER . VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 232
    VAR             shift and go to state 231


state 225

    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL . VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 234
    VAR             shift and go to state 233


state 226

    (59) else_statement -> ELSE LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (34) instructions -> . instruction
    (35) instructions -> . instruction instructions
    (36) instruction -> . loop
    (37) instruction -> . if_statement
    (38) instruction -> . assignment
    (39) instruction -> . operation
    (40) instruction -> . empty
    (41) instruction -> . var_declaration
    (42) instruction -> . print
    (43) instruction -> . input
    (44) instruction -> . comment
    (45) instruction -> . function_call
    (57) loop -> . while_loop
    (58) loop -> . for_loop
    (60) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (61) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement
    (107) assignment -> . VAR EQUAL value SEMICOLON
    (108) assignment -> . VAR EQUAL VAR SEMICOLON
    (109) assignment -> . VAR EQUAL function_call
    (110) assignment -> . get_array_element EQUAL value SEMICOLON
    (111) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (103) operation -> . increment
    (104) operation -> . decrement
    (130) empty -> .
    (112) var_declaration -> . type VAR SEMICOLON
    (113) var_declaration -> . array_declaration
    (114) var_declaration -> . type VAR EQUAL value SEMICOLON
    (115) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (116) var_declaration -> . type VAR EQUAL function_call
    (126) print -> . COUT out SEMICOLON
    (127) input -> . CIN in SEMICOLON
    (129) comment -> . COMMENT
    (24) function_call -> . VAR LEFT_BR RIGHT_BR SEMICOLON
    (25) function_call -> . VAR LEFT_BR var_list RIGHT_BR SEMICOLON
    (46) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (47) while_loop -> . WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (56) for_loop -> . for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY
    (105) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (106) get_array_element -> . VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED
    (98) increment -> . VAR PLUS_PLUS SEMICOLON
    (99) decrement -> . VAR MINUS_MINUS SEMICOLON
    (76) type -> . INT
    (77) type -> . CHAR
    (78) type -> . STRING
    (79) type -> . BOOL
    (80) type -> . FLOAT
    (81) type -> . LONG
    (82) type -> . SHORT
    (83) type -> . DOUBLE
    (117) array_declaration -> . type get_array_element SEMICOLON
    (48) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (49) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (50) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (51) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (52) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (53) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (54) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (55) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    IF              shift and go to state 127
    VAR             shift and go to state 112
    RIGHT_BR_CURLY  reduce using rule 130 (empty -> .)
    COUT            shift and go to state 131
    CIN             shift and go to state 132
    COMMENT         shift and go to state 19
    WHILE           shift and go to state 133
    INT             shift and go to state 21
    CHAR            shift and go to state 22
    STRING          shift and go to state 23
    BOOL            shift and go to state 24
    FLOAT           shift and go to state 25
    LONG            shift and go to state 26
    SHORT           shift and go to state 27
    DOUBLE          shift and go to state 28
    FOR             shift and go to state 135

  ! IF              [ reduce using rule 130 (empty -> .) ]
  ! VAR             [ reduce using rule 130 (empty -> .) ]
  ! COUT            [ reduce using rule 130 (empty -> .) ]
  ! CIN             [ reduce using rule 130 (empty -> .) ]
  ! COMMENT         [ reduce using rule 130 (empty -> .) ]
  ! WHILE           [ reduce using rule 130 (empty -> .) ]
  ! INT             [ reduce using rule 130 (empty -> .) ]
  ! CHAR            [ reduce using rule 130 (empty -> .) ]
  ! STRING          [ reduce using rule 130 (empty -> .) ]
  ! BOOL            [ reduce using rule 130 (empty -> .) ]
  ! FLOAT           [ reduce using rule 130 (empty -> .) ]
  ! LONG            [ reduce using rule 130 (empty -> .) ]
  ! SHORT           [ reduce using rule 130 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 130 (empty -> .) ]
  ! FOR             [ reduce using rule 130 (empty -> .) ]

    instructions                   shift and go to state 235
    instruction                    shift and go to state 114
    loop                           shift and go to state 115
    if_statement                   shift and go to state 116
    assignment                     shift and go to state 117
    operation                      shift and go to state 118
    empty                          shift and go to state 119
    var_declaration                shift and go to state 120
    print                          shift and go to state 121
    input                          shift and go to state 122
    comment                        shift and go to state 123
    function_call                  shift and go to state 124
    while_loop                     shift and go to state 125
    for_loop                       shift and go to state 126
    get_array_element              shift and go to state 128
    increment                      shift and go to state 129
    decrement                      shift and go to state 130
    type                           shift and go to state 111
    array_declaration              shift and go to state 90
    for_loop_statement             shift and go to state 134

state 227

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 236


state 228

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 237


state 229

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 238


state 230

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 239


state 231

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 240


state 232

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 241


state 233

    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 242


state 234

    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 243


state 235

    (59) else_statement -> ELSE LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 244


state 236

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 245


state 237

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 246


state 238

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 247


state 239

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 248


state 240

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 249


state 241

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 250


state 242

    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 251


state 243

    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 252


state 244

    (59) else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    COMMENT         reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 59 (else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 245

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 253


state 246

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 254


state 247

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 255


state 248

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 256


state 249

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 257


state 250

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 258


state 251

    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 259


state 252

    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 260


state 253

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 261


state 254

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 262


state 255

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 263


state 256

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 264


state 257

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 265


state 258

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 266


state 259

    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 267


state 260

    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 268


state 261

    (49) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 49 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 262

    (48) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 48 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 263

    (51) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 51 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 264

    (50) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 50 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 265

    (53) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 53 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR .)


state 266

    (52) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 52 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)


state 267

    (55) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 55 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR .)


state 268

    (54) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 54 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for HASH in state 0 resolved as shift
WARNING: shift/reduce conflict for USING in state 0 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for LONG in state 0 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 5 resolved as shift
WARNING: shift/reduce conflict for HASH in state 5 resolved as shift
WARNING: shift/reduce conflict for USING in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 5 resolved as shift
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for LONG in state 5 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 5 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 5 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 48 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for VAR in state 106 resolved as shift
WARNING: shift/reduce conflict for COUT in state 106 resolved as shift
WARNING: shift/reduce conflict for CIN in state 106 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 106 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 106 resolved as shift
WARNING: shift/reduce conflict for INT in state 106 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 106 resolved as shift
WARNING: shift/reduce conflict for STRING in state 106 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 106 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 106 resolved as shift
WARNING: shift/reduce conflict for LONG in state 106 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 106 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 106 resolved as shift
WARNING: shift/reduce conflict for FOR in state 106 resolved as shift
WARNING: shift/reduce conflict for IF in state 107 resolved as shift
WARNING: shift/reduce conflict for VAR in state 107 resolved as shift
WARNING: shift/reduce conflict for COUT in state 107 resolved as shift
WARNING: shift/reduce conflict for CIN in state 107 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 107 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 107 resolved as shift
WARNING: shift/reduce conflict for INT in state 107 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 107 resolved as shift
WARNING: shift/reduce conflict for STRING in state 107 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 107 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 107 resolved as shift
WARNING: shift/reduce conflict for LONG in state 107 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 107 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 107 resolved as shift
WARNING: shift/reduce conflict for FOR in state 107 resolved as shift
WARNING: shift/reduce conflict for IF in state 114 resolved as shift
WARNING: shift/reduce conflict for VAR in state 114 resolved as shift
WARNING: shift/reduce conflict for COUT in state 114 resolved as shift
WARNING: shift/reduce conflict for CIN in state 114 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 114 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 114 resolved as shift
WARNING: shift/reduce conflict for INT in state 114 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 114 resolved as shift
WARNING: shift/reduce conflict for STRING in state 114 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 114 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 114 resolved as shift
WARNING: shift/reduce conflict for LONG in state 114 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 114 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 114 resolved as shift
WARNING: shift/reduce conflict for FOR in state 114 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 154 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 165 resolved as shift
WARNING: shift/reduce conflict for IF in state 174 resolved as shift
WARNING: shift/reduce conflict for VAR in state 174 resolved as shift
WARNING: shift/reduce conflict for COUT in state 174 resolved as shift
WARNING: shift/reduce conflict for CIN in state 174 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 174 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 174 resolved as shift
WARNING: shift/reduce conflict for INT in state 174 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 174 resolved as shift
WARNING: shift/reduce conflict for STRING in state 174 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 174 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 174 resolved as shift
WARNING: shift/reduce conflict for LONG in state 174 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 174 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 174 resolved as shift
WARNING: shift/reduce conflict for FOR in state 174 resolved as shift
WARNING: shift/reduce conflict for IF in state 208 resolved as shift
WARNING: shift/reduce conflict for VAR in state 208 resolved as shift
WARNING: shift/reduce conflict for COUT in state 208 resolved as shift
WARNING: shift/reduce conflict for CIN in state 208 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 208 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 208 resolved as shift
WARNING: shift/reduce conflict for INT in state 208 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 208 resolved as shift
WARNING: shift/reduce conflict for STRING in state 208 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 208 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 208 resolved as shift
WARNING: shift/reduce conflict for LONG in state 208 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 208 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 208 resolved as shift
WARNING: shift/reduce conflict for FOR in state 208 resolved as shift
WARNING: shift/reduce conflict for IF in state 209 resolved as shift
WARNING: shift/reduce conflict for VAR in state 209 resolved as shift
WARNING: shift/reduce conflict for COUT in state 209 resolved as shift
WARNING: shift/reduce conflict for CIN in state 209 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 209 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 209 resolved as shift
WARNING: shift/reduce conflict for INT in state 209 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 209 resolved as shift
WARNING: shift/reduce conflict for STRING in state 209 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 209 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 209 resolved as shift
WARNING: shift/reduce conflict for LONG in state 209 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 209 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 209 resolved as shift
WARNING: shift/reduce conflict for FOR in state 209 resolved as shift
WARNING: shift/reduce conflict for IF in state 210 resolved as shift
WARNING: shift/reduce conflict for VAR in state 210 resolved as shift
WARNING: shift/reduce conflict for COUT in state 210 resolved as shift
WARNING: shift/reduce conflict for CIN in state 210 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 210 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 210 resolved as shift
WARNING: shift/reduce conflict for INT in state 210 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 210 resolved as shift
WARNING: shift/reduce conflict for STRING in state 210 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 210 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 210 resolved as shift
WARNING: shift/reduce conflict for LONG in state 210 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 210 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 210 resolved as shift
WARNING: shift/reduce conflict for FOR in state 210 resolved as shift
WARNING: shift/reduce conflict for IF in state 226 resolved as shift
WARNING: shift/reduce conflict for VAR in state 226 resolved as shift
WARNING: shift/reduce conflict for COUT in state 226 resolved as shift
WARNING: shift/reduce conflict for CIN in state 226 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 226 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 226 resolved as shift
WARNING: shift/reduce conflict for INT in state 226 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 226 resolved as shift
WARNING: shift/reduce conflict for STRING in state 226 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 226 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 226 resolved as shift
WARNING: shift/reduce conflict for LONG in state 226 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 226 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 226 resolved as shift
WARNING: shift/reduce conflict for FOR in state 226 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> empty)
WARNING: rejected rule (program_component -> empty) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (program_components -> program_component)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 11 resolved using rule (program_component -> array_declaration)
WARNING: rejected rule (var_declaration -> array_declaration) in state 11
WARNING: reduce/reduce conflict in state 86 resolved using rule (class_declarations -> class_declaration)
WARNING: rejected rule (empty -> <empty>) in state 86
WARNING: reduce/reduce conflict in state 114 resolved using rule (instructions -> instruction)
WARNING: rejected rule (empty -> <empty>) in state 114
