Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    ELSE
    FALSE
    ID
    TRUE

Grammar

Rule 0     S' -> start_symbol
Rule 1     start_symbol -> program
Rule 2     program -> program_components
Rule 3     program -> empty
Rule 4     program_components -> program_component
Rule 5     program_components -> program_component program_components
Rule 6     program_components -> using_namespace_std program_components
Rule 7     program_components -> empty
Rule 8     program_component -> function_definition
Rule 9     program_component -> class_definition
Rule 10    program_component -> including
Rule 11    program_component -> var_declaration
Rule 12    program_component -> array_declaration
Rule 13    program_component -> empty
Rule 14    using_namespace_std -> USING NAMESPACE STD SEMICOLON
Rule 15    including -> HASH INCLUDE LIBRARY
Rule 16    function_definition -> type_function_definition
Rule 17    function_definition -> void_function_definition
Rule 18    type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
Rule 19    void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 20    function_var_declaration -> type VAR
Rule 21    function_var_declaration -> type VAR COMMA function_var_declaration
Rule 22    function_var_declaration -> empty
Rule 23    class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
Rule 24    protection_level -> PUBLIC COLON
Rule 25    protection_level -> PRIVATE COLON
Rule 26    protection_level -> PROTECTED COLON
Rule 27    protection_level -> empty
Rule 28    class_declaration -> var_declaration
Rule 29    class_declaration -> function_definition
Rule 30    class_declarations -> class_declaration
Rule 31    class_declarations -> class_declaration class_declarations
Rule 32    class_declarations -> empty
Rule 33    instructions -> instruction
Rule 34    instructions -> instruction instructions
Rule 35    instruction -> loop
Rule 36    instruction -> if_statement
Rule 37    instruction -> assignment
Rule 38    instruction -> operation
Rule 39    instruction -> empty
Rule 40    instruction -> var_declaration
Rule 41    instruction -> print
Rule 42    instruction -> input
Rule 43    while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 44    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 45    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
Rule 46    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 47    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
Rule 48    for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 49    for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY
Rule 50    loop -> while_loop
Rule 51    loop -> for_loop
Rule 52    if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 53    comparisons -> comparison
Rule 54    comparisons -> comparison conjunction comparisons
Rule 55    comparator -> LESS
Rule 56    comparator -> LESS_EQUAL
Rule 57    comparator -> GREATER
Rule 58    comparator -> GREATER_EQUAL
Rule 59    comparator -> EQUAL_EQUAL
Rule 60    comparator -> NOT_EQUAL
Rule 61    operator -> PLUS
Rule 62    operator -> MINUS
Rule 63    operator -> MULTIPLY
Rule 64    operator -> DIVIDE
Rule 65    type -> INT
Rule 66    type -> CHAR
Rule 67    type -> STRING
Rule 68    type -> BOOL
Rule 69    type -> FLOAT
Rule 70    type -> LONG
Rule 71    type -> SHORT
Rule 72    type -> DOUBLE
Rule 73    conjunction -> AND
Rule 74    conjunction -> OR
Rule 75    string_value -> TEXT
Rule 76    string_value -> SIGN
Rule 77    number -> INT_NUMBER
Rule 78    number -> FLOAT_NUMBER
Rule 79    value -> number
Rule 80    value -> VAR
Rule 81    value -> get_array_element
Rule 82    value -> string_value
Rule 83    increment -> VAR PLUS_PLUS SEMICOLON
Rule 84    decrement -> VAR MINUS_MINUS SEMICOLON
Rule 85    get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
Rule 86    operation -> increment
Rule 87    operation -> decrement
Rule 88    operation -> value operator value SEMICOLON
Rule 89    assignment -> VAR EQUAL value SEMICOLON
Rule 90    assignment -> VAR EQUAL VAR SEMICOLON
Rule 91    assignment -> get_array_element EQUAL value SEMICOLON
Rule 92    assignment -> get_array_element EQUAL VAR SEMICOLON
Rule 93    var_declaration -> type VAR SEMICOLON
Rule 94    var_declaration -> array_declaration
Rule 95    var_declaration -> type VAR EQUAL value SEMICOLON
Rule 96    var_declaration -> type VAR EQUAL VAR SEMICOLON
Rule 97    array_declaration -> type get_array_element SEMICOLON
Rule 98    out -> OUT VAR
Rule 99    out -> OUT VAR out
Rule 100   out -> OUT TEXT
Rule 101   out -> OUT TEXT out
Rule 102   out -> OUT ENDL
Rule 103   out -> OUT ENDL out
Rule 104   in -> IN VAR
Rule 105   in -> IN VAR in
Rule 106   print -> COUT out SEMICOLON
Rule 107   input -> CIN in SEMICOLON
Rule 108   comparison -> value comparator value
Rule 109   returning -> RETURN value SEMICOLON
Rule 110   empty -> <empty>

Terminals, with rules where they appear

AND                  : 73
BOOL                 : 68
BREAK                : 49
CHAR                 : 66
CIN                  : 107
CLASS                : 23
COLON                : 24 25 26
COMMA                : 21
COMMENT              : 
COUT                 : 106
DIVIDE               : 64
DOUBLE               : 72
ELSE                 : 
ENDL                 : 102 103
EQUAL                : 44 45 46 47 89 90 91 92 95 96
EQUAL_EQUAL          : 59
FALSE                : 
FLOAT                : 69
FLOAT_NUMBER         : 78
FOR                  : 44 45 46 47
GREATER              : 46 57
GREATER_EQUAL        : 47 58
HASH                 : 15
ID                   : 
IF                   : 52
IN                   : 104 105
INCLUDE              : 15
INT                  : 44 45 46 47 65
INT_NUMBER           : 44 44 45 45 46 46 47 47 77 85
LEFT_BR              : 18 19 43 44 45 46 47 52
LEFT_BR_CURLY        : 18 19 23 43 48 49 52
LEFT_BR_SQUARED      : 85
LESS                 : 44 55
LESS_EQUAL           : 45 56
LIBRARY              : 15
LONG                 : 70
MINUS                : 62
MINUS_MINUS          : 46 47 84
MULTIPLY             : 63
NAMESPACE            : 14
NOT_EQUAL            : 60
OR                   : 74
OUT                  : 98 99 100 101 102 103
PLUS                 : 61
PLUS_PLUS            : 44 45 83
PRIVATE              : 25
PROTECTED            : 26
PUBLIC               : 24
RETURN               : 109
RIGHT_BR             : 18 19 43 44 45 46 47 52
RIGHT_BR_CURLY       : 18 19 23 43 48 49 52
RIGHT_BR_SQUARED     : 85
SEMICOLON            : 14 23 44 44 45 45 46 46 47 47 49 83 84 88 89 90 91 92 93 95 96 97 106 107 109
SHORT                : 71
SIGN                 : 76
STD                  : 14
STRING               : 67
TEXT                 : 75 100 101
TRUE                 : 
USING                : 14
VAR                  : 18 19 20 21 23 44 44 44 45 45 45 46 46 46 47 47 47 80 83 84 85 89 90 90 92 93 95 96 96 98 99 104 105
VOID                 : 19
WHILE                : 43
error                : 

Nonterminals, with rules where they appear

array_declaration    : 12 94
assignment           : 37
class_declaration    : 30 31
class_declarations   : 23 31
class_definition     : 9
comparator           : 108
comparison           : 53 54
comparisons          : 43 52 54
conjunction          : 54
decrement            : 87
empty                : 3 7 13 22 27 32 39
for_loop             : 51
for_loop_statement   : 48 49
function_definition  : 8 29
function_var_declaration : 18 19 21
get_array_element    : 81 91 92 97
if_statement         : 36
in                   : 105 107
including            : 10
increment            : 86
input                : 42
instruction          : 33 34
instructions         : 18 19 34 43 48 49 52
loop                 : 35
number               : 79
operation            : 38
operator             : 88
out                  : 99 101 103 106
print                : 41
program              : 1
program_component    : 4 5
program_components   : 2 5 6
protection_level     : 23
returning            : 18
start_symbol         : 0
string_value         : 82
type                 : 18 20 21 93 95 96 97
type_function_definition : 16
using_namespace_std  : 6
value                : 88 88 89 91 95 108 108 109
var_declaration      : 11 28 40
void_function_definition : 17
while_loop           : 50

Parsing method: LALR

state 0

    (0) S' -> . start_symbol
    (1) start_symbol -> . program
    (2) program -> . program_components
    (3) program -> . empty
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_components -> . using_namespace_std program_components
    (7) program_components -> . empty
    (110) empty -> .
    (8) program_component -> . function_definition
    (9) program_component -> . class_definition
    (10) program_component -> . including
    (11) program_component -> . var_declaration
    (12) program_component -> . array_declaration
    (13) program_component -> . empty
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (23) class_definition -> . CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (97) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE

  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 110 (empty -> .)
    USING           shift and go to state 12
    CLASS           shift and go to state 15
    HASH            shift and go to state 16
    VOID            shift and go to state 18
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26

  ! USING           [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! HASH            [ reduce using rule 110 (empty -> .) ]
  ! VOID            [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LONG            [ reduce using rule 110 (empty -> .) ]
  ! SHORT           [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]

    start_symbol                   shift and go to state 1
    program                        shift and go to state 2
    program_components             shift and go to state 3
    empty                          shift and go to state 4
    program_component              shift and go to state 5
    using_namespace_std            shift and go to state 6
    function_definition            shift and go to state 7
    class_definition               shift and go to state 8
    including                      shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 17

state 1

    (0) S' -> start_symbol .



state 2

    (1) start_symbol -> program .

    $end            reduce using rule 1 (start_symbol -> program .)


state 3

    (2) program -> program_components .

    $end            reduce using rule 2 (program -> program_components .)


state 4

    (3) program -> empty .
    (7) program_components -> empty .
    (13) program_component -> empty .

  ! reduce/reduce conflict for $end resolved using rule 3 (program -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 3 (program -> empty .)
    $end            reduce using rule 3 (program -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)
    DOUBLE          reduce using rule 13 (program_component -> empty .)

  ! $end            [ reduce using rule 7 (program_components -> empty .) ]
  ! $end            [ reduce using rule 13 (program_component -> empty .) ]


state 5

    (4) program_components -> program_component .
    (5) program_components -> program_component . program_components
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_components -> . using_namespace_std program_components
    (7) program_components -> . empty
    (8) program_component -> . function_definition
    (9) program_component -> . class_definition
    (10) program_component -> . including
    (11) program_component -> . var_declaration
    (12) program_component -> . array_declaration
    (13) program_component -> . empty
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (110) empty -> .
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (23) class_definition -> . CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (97) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE

  ! reduce/reduce conflict for $end resolved using rule 4 (program_components -> program_component .)
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    $end            reduce using rule 4 (program_components -> program_component .)
    USING           shift and go to state 12
    CLASS           shift and go to state 15
    HASH            shift and go to state 16
    VOID            shift and go to state 18
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26

  ! $end            [ reduce using rule 110 (empty -> .) ]
  ! USING           [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! HASH            [ reduce using rule 110 (empty -> .) ]
  ! VOID            [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LONG            [ reduce using rule 110 (empty -> .) ]
  ! SHORT           [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]

    program_component              shift and go to state 5
    program_components             shift and go to state 27
    using_namespace_std            shift and go to state 6
    empty                          shift and go to state 28
    function_definition            shift and go to state 7
    class_definition               shift and go to state 8
    including                      shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 17

state 6

    (6) program_components -> using_namespace_std . program_components
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_components -> . using_namespace_std program_components
    (7) program_components -> . empty
    (8) program_component -> . function_definition
    (9) program_component -> . class_definition
    (10) program_component -> . including
    (11) program_component -> . var_declaration
    (12) program_component -> . array_declaration
    (13) program_component -> . empty
    (14) using_namespace_std -> . USING NAMESPACE STD SEMICOLON
    (110) empty -> .
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (23) class_definition -> . CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
    (15) including -> . HASH INCLUDE LIBRARY
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (97) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE

  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    USING           shift and go to state 12
    $end            reduce using rule 110 (empty -> .)
    CLASS           shift and go to state 15
    HASH            shift and go to state 16
    VOID            shift and go to state 18
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26

  ! USING           [ reduce using rule 110 (empty -> .) ]
  ! CLASS           [ reduce using rule 110 (empty -> .) ]
  ! HASH            [ reduce using rule 110 (empty -> .) ]
  ! VOID            [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LONG            [ reduce using rule 110 (empty -> .) ]
  ! SHORT           [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]

    using_namespace_std            shift and go to state 6
    program_components             shift and go to state 29
    program_component              shift and go to state 5
    empty                          shift and go to state 28
    function_definition            shift and go to state 7
    class_definition               shift and go to state 8
    including                      shift and go to state 9
    var_declaration                shift and go to state 10
    array_declaration              shift and go to state 11
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14
    type                           shift and go to state 17

state 7

    (8) program_component -> function_definition .

    USING           reduce using rule 8 (program_component -> function_definition .)
    CLASS           reduce using rule 8 (program_component -> function_definition .)
    HASH            reduce using rule 8 (program_component -> function_definition .)
    VOID            reduce using rule 8 (program_component -> function_definition .)
    INT             reduce using rule 8 (program_component -> function_definition .)
    CHAR            reduce using rule 8 (program_component -> function_definition .)
    STRING          reduce using rule 8 (program_component -> function_definition .)
    BOOL            reduce using rule 8 (program_component -> function_definition .)
    FLOAT           reduce using rule 8 (program_component -> function_definition .)
    LONG            reduce using rule 8 (program_component -> function_definition .)
    SHORT           reduce using rule 8 (program_component -> function_definition .)
    DOUBLE          reduce using rule 8 (program_component -> function_definition .)
    $end            reduce using rule 8 (program_component -> function_definition .)


state 8

    (9) program_component -> class_definition .

    USING           reduce using rule 9 (program_component -> class_definition .)
    CLASS           reduce using rule 9 (program_component -> class_definition .)
    HASH            reduce using rule 9 (program_component -> class_definition .)
    VOID            reduce using rule 9 (program_component -> class_definition .)
    INT             reduce using rule 9 (program_component -> class_definition .)
    CHAR            reduce using rule 9 (program_component -> class_definition .)
    STRING          reduce using rule 9 (program_component -> class_definition .)
    BOOL            reduce using rule 9 (program_component -> class_definition .)
    FLOAT           reduce using rule 9 (program_component -> class_definition .)
    LONG            reduce using rule 9 (program_component -> class_definition .)
    SHORT           reduce using rule 9 (program_component -> class_definition .)
    DOUBLE          reduce using rule 9 (program_component -> class_definition .)
    $end            reduce using rule 9 (program_component -> class_definition .)


state 9

    (10) program_component -> including .

    USING           reduce using rule 10 (program_component -> including .)
    CLASS           reduce using rule 10 (program_component -> including .)
    HASH            reduce using rule 10 (program_component -> including .)
    VOID            reduce using rule 10 (program_component -> including .)
    INT             reduce using rule 10 (program_component -> including .)
    CHAR            reduce using rule 10 (program_component -> including .)
    STRING          reduce using rule 10 (program_component -> including .)
    BOOL            reduce using rule 10 (program_component -> including .)
    FLOAT           reduce using rule 10 (program_component -> including .)
    LONG            reduce using rule 10 (program_component -> including .)
    SHORT           reduce using rule 10 (program_component -> including .)
    DOUBLE          reduce using rule 10 (program_component -> including .)
    $end            reduce using rule 10 (program_component -> including .)


state 10

    (11) program_component -> var_declaration .

    USING           reduce using rule 11 (program_component -> var_declaration .)
    CLASS           reduce using rule 11 (program_component -> var_declaration .)
    HASH            reduce using rule 11 (program_component -> var_declaration .)
    VOID            reduce using rule 11 (program_component -> var_declaration .)
    INT             reduce using rule 11 (program_component -> var_declaration .)
    CHAR            reduce using rule 11 (program_component -> var_declaration .)
    STRING          reduce using rule 11 (program_component -> var_declaration .)
    BOOL            reduce using rule 11 (program_component -> var_declaration .)
    FLOAT           reduce using rule 11 (program_component -> var_declaration .)
    LONG            reduce using rule 11 (program_component -> var_declaration .)
    SHORT           reduce using rule 11 (program_component -> var_declaration .)
    DOUBLE          reduce using rule 11 (program_component -> var_declaration .)
    $end            reduce using rule 11 (program_component -> var_declaration .)


state 11

    (12) program_component -> array_declaration .
    (94) var_declaration -> array_declaration .

  ! reduce/reduce conflict for USING resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for CLASS resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for HASH resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for VOID resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for INT resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for CHAR resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for STRING resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for BOOL resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for FLOAT resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for LONG resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for SHORT resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for DOUBLE resolved using rule 12 (program_component -> array_declaration .)
  ! reduce/reduce conflict for $end resolved using rule 12 (program_component -> array_declaration .)
    USING           reduce using rule 12 (program_component -> array_declaration .)
    CLASS           reduce using rule 12 (program_component -> array_declaration .)
    HASH            reduce using rule 12 (program_component -> array_declaration .)
    VOID            reduce using rule 12 (program_component -> array_declaration .)
    INT             reduce using rule 12 (program_component -> array_declaration .)
    CHAR            reduce using rule 12 (program_component -> array_declaration .)
    STRING          reduce using rule 12 (program_component -> array_declaration .)
    BOOL            reduce using rule 12 (program_component -> array_declaration .)
    FLOAT           reduce using rule 12 (program_component -> array_declaration .)
    LONG            reduce using rule 12 (program_component -> array_declaration .)
    SHORT           reduce using rule 12 (program_component -> array_declaration .)
    DOUBLE          reduce using rule 12 (program_component -> array_declaration .)
    $end            reduce using rule 12 (program_component -> array_declaration .)

  ! USING           [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! CLASS           [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! HASH            [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! VOID            [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! INT             [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! CHAR            [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! STRING          [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! BOOL            [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! FLOAT           [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! LONG            [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! SHORT           [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! DOUBLE          [ reduce using rule 94 (var_declaration -> array_declaration .) ]
  ! $end            [ reduce using rule 94 (var_declaration -> array_declaration .) ]


state 12

    (14) using_namespace_std -> USING . NAMESPACE STD SEMICOLON

    NAMESPACE       shift and go to state 30


state 13

    (16) function_definition -> type_function_definition .

    USING           reduce using rule 16 (function_definition -> type_function_definition .)
    CLASS           reduce using rule 16 (function_definition -> type_function_definition .)
    HASH            reduce using rule 16 (function_definition -> type_function_definition .)
    VOID            reduce using rule 16 (function_definition -> type_function_definition .)
    INT             reduce using rule 16 (function_definition -> type_function_definition .)
    CHAR            reduce using rule 16 (function_definition -> type_function_definition .)
    STRING          reduce using rule 16 (function_definition -> type_function_definition .)
    BOOL            reduce using rule 16 (function_definition -> type_function_definition .)
    FLOAT           reduce using rule 16 (function_definition -> type_function_definition .)
    LONG            reduce using rule 16 (function_definition -> type_function_definition .)
    SHORT           reduce using rule 16 (function_definition -> type_function_definition .)
    DOUBLE          reduce using rule 16 (function_definition -> type_function_definition .)
    $end            reduce using rule 16 (function_definition -> type_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 16 (function_definition -> type_function_definition .)


state 14

    (17) function_definition -> void_function_definition .

    USING           reduce using rule 17 (function_definition -> void_function_definition .)
    CLASS           reduce using rule 17 (function_definition -> void_function_definition .)
    HASH            reduce using rule 17 (function_definition -> void_function_definition .)
    VOID            reduce using rule 17 (function_definition -> void_function_definition .)
    INT             reduce using rule 17 (function_definition -> void_function_definition .)
    CHAR            reduce using rule 17 (function_definition -> void_function_definition .)
    STRING          reduce using rule 17 (function_definition -> void_function_definition .)
    BOOL            reduce using rule 17 (function_definition -> void_function_definition .)
    FLOAT           reduce using rule 17 (function_definition -> void_function_definition .)
    LONG            reduce using rule 17 (function_definition -> void_function_definition .)
    SHORT           reduce using rule 17 (function_definition -> void_function_definition .)
    DOUBLE          reduce using rule 17 (function_definition -> void_function_definition .)
    $end            reduce using rule 17 (function_definition -> void_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 17 (function_definition -> void_function_definition .)


state 15

    (23) class_definition -> CLASS . VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON

    VAR             shift and go to state 31


state 16

    (15) including -> HASH . INCLUDE LIBRARY

    INCLUDE         shift and go to state 32


state 17

    (93) var_declaration -> type . VAR SEMICOLON
    (95) var_declaration -> type . VAR EQUAL value SEMICOLON
    (96) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (97) array_declaration -> type . get_array_element SEMICOLON
    (18) type_function_definition -> type . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    VAR             shift and go to state 33

    get_array_element              shift and go to state 34

state 18

    (19) void_function_definition -> VOID . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    VAR             shift and go to state 35


state 19

    (65) type -> INT .

    VAR             reduce using rule 65 (type -> INT .)


state 20

    (66) type -> CHAR .

    VAR             reduce using rule 66 (type -> CHAR .)


state 21

    (67) type -> STRING .

    VAR             reduce using rule 67 (type -> STRING .)


state 22

    (68) type -> BOOL .

    VAR             reduce using rule 68 (type -> BOOL .)


state 23

    (69) type -> FLOAT .

    VAR             reduce using rule 69 (type -> FLOAT .)


state 24

    (70) type -> LONG .

    VAR             reduce using rule 70 (type -> LONG .)


state 25

    (71) type -> SHORT .

    VAR             reduce using rule 71 (type -> SHORT .)


state 26

    (72) type -> DOUBLE .

    VAR             reduce using rule 72 (type -> DOUBLE .)


state 27

    (5) program_components -> program_component program_components .

    $end            reduce using rule 5 (program_components -> program_component program_components .)


state 28

    (7) program_components -> empty .
    (13) program_component -> empty .

  ! reduce/reduce conflict for $end resolved using rule 7 (program_components -> empty .)
    $end            reduce using rule 7 (program_components -> empty .)
    USING           reduce using rule 13 (program_component -> empty .)
    CLASS           reduce using rule 13 (program_component -> empty .)
    HASH            reduce using rule 13 (program_component -> empty .)
    VOID            reduce using rule 13 (program_component -> empty .)
    INT             reduce using rule 13 (program_component -> empty .)
    CHAR            reduce using rule 13 (program_component -> empty .)
    STRING          reduce using rule 13 (program_component -> empty .)
    BOOL            reduce using rule 13 (program_component -> empty .)
    FLOAT           reduce using rule 13 (program_component -> empty .)
    LONG            reduce using rule 13 (program_component -> empty .)
    SHORT           reduce using rule 13 (program_component -> empty .)
    DOUBLE          reduce using rule 13 (program_component -> empty .)

  ! $end            [ reduce using rule 13 (program_component -> empty .) ]


state 29

    (6) program_components -> using_namespace_std program_components .

    $end            reduce using rule 6 (program_components -> using_namespace_std program_components .)


state 30

    (14) using_namespace_std -> USING NAMESPACE . STD SEMICOLON

    STD             shift and go to state 36


state 31

    (23) class_definition -> CLASS VAR . LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON

    LEFT_BR_CURLY   shift and go to state 37


state 32

    (15) including -> HASH INCLUDE . LIBRARY

    LIBRARY         shift and go to state 38


state 33

    (93) var_declaration -> type VAR . SEMICOLON
    (95) var_declaration -> type VAR . EQUAL value SEMICOLON
    (96) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (18) type_function_definition -> type VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (85) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 39
    EQUAL           shift and go to state 40
    LEFT_BR         shift and go to state 41
    LEFT_BR_SQUARED shift and go to state 42


state 34

    (97) array_declaration -> type get_array_element . SEMICOLON

    SEMICOLON       shift and go to state 43


state 35

    (19) void_function_definition -> VOID VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 44


state 36

    (14) using_namespace_std -> USING NAMESPACE STD . SEMICOLON

    SEMICOLON       shift and go to state 45


state 37

    (23) class_definition -> CLASS VAR LEFT_BR_CURLY . protection_level class_declarations RIGHT_BR_CURLY SEMICOLON
    (24) protection_level -> . PUBLIC COLON
    (25) protection_level -> . PRIVATE COLON
    (26) protection_level -> . PROTECTED COLON
    (27) protection_level -> . empty
    (110) empty -> .

    PUBLIC          shift and go to state 47
    PRIVATE         shift and go to state 48
    PROTECTED       shift and go to state 49
    INT             reduce using rule 110 (empty -> .)
    CHAR            reduce using rule 110 (empty -> .)
    STRING          reduce using rule 110 (empty -> .)
    BOOL            reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    LONG            reduce using rule 110 (empty -> .)
    SHORT           reduce using rule 110 (empty -> .)
    DOUBLE          reduce using rule 110 (empty -> .)
    VOID            reduce using rule 110 (empty -> .)
    RIGHT_BR_CURLY  reduce using rule 110 (empty -> .)

    protection_level               shift and go to state 46
    empty                          shift and go to state 50

state 38

    (15) including -> HASH INCLUDE LIBRARY .

    USING           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    CLASS           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    HASH            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    VOID            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    INT             reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    CHAR            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    STRING          reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    BOOL            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    FLOAT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    LONG            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    SHORT           reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    DOUBLE          reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)
    $end            reduce using rule 15 (including -> HASH INCLUDE LIBRARY .)


state 39

    (93) var_declaration -> type VAR SEMICOLON .

    USING           reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    CLASS           reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    HASH            reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    VOID            reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    INT             reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    CHAR            reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    STRING          reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    BOOL            reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    FLOAT           reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    LONG            reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    SHORT           reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    DOUBLE          reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    $end            reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    IF              reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    VAR             reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    COUT            reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    CIN             reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    WHILE           reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    FOR             reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    TEXT            reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    SIGN            reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    RETURN          reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)
    BREAK           reduce using rule 93 (var_declaration -> type VAR SEMICOLON .)


state 40

    (95) var_declaration -> type VAR EQUAL . value SEMICOLON
    (96) var_declaration -> type VAR EQUAL . VAR SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

    VAR             shift and go to state 51
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    value                          shift and go to state 52
    number                         shift and go to state 53
    get_array_element              shift and go to state 54
    string_value                   shift and go to state 55

state 41

    (18) type_function_definition -> type VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (20) function_var_declaration -> . type VAR
    (21) function_var_declaration -> . type VAR COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (110) empty -> .

    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    RIGHT_BR        reduce using rule 110 (empty -> .)

    type                           shift and go to state 60
    function_var_declaration       shift and go to state 61
    empty                          shift and go to state 62

state 42

    (85) get_array_element -> VAR LEFT_BR_SQUARED . INT_NUMBER RIGHT_BR_SQUARED

    INT_NUMBER      shift and go to state 63


state 43

    (97) array_declaration -> type get_array_element SEMICOLON .

    USING           reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    CLASS           reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    HASH            reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    VOID            reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    INT             reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    CHAR            reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    STRING          reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    BOOL            reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT           reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    LONG            reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    SHORT           reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    DOUBLE          reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    $end            reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    IF              reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    VAR             reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    COUT            reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    CIN             reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    WHILE           reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    FOR             reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    INT_NUMBER      reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    TEXT            reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    SIGN            reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    RETURN          reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)
    BREAK           reduce using rule 97 (array_declaration -> type get_array_element SEMICOLON .)


state 44

    (19) void_function_definition -> VOID VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (20) function_var_declaration -> . type VAR
    (21) function_var_declaration -> . type VAR COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (110) empty -> .

    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    RIGHT_BR        reduce using rule 110 (empty -> .)

    function_var_declaration       shift and go to state 64
    type                           shift and go to state 60
    empty                          shift and go to state 62

state 45

    (14) using_namespace_std -> USING NAMESPACE STD SEMICOLON .

    USING           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    CLASS           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    HASH            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    VOID            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    INT             reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    CHAR            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    STRING          reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    BOOL            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    FLOAT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    LONG            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    SHORT           reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    DOUBLE          reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)
    $end            reduce using rule 14 (using_namespace_std -> USING NAMESPACE STD SEMICOLON .)


state 46

    (23) class_definition -> CLASS VAR LEFT_BR_CURLY protection_level . class_declarations RIGHT_BR_CURLY SEMICOLON
    (30) class_declarations -> . class_declaration
    (31) class_declarations -> . class_declaration class_declarations
    (32) class_declarations -> . empty
    (28) class_declaration -> . var_declaration
    (29) class_declaration -> . function_definition
    (110) empty -> .
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (97) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR_CURLY  reduce using rule 110 (empty -> .)
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    VOID            shift and go to state 18

    class_declarations             shift and go to state 65
    class_declaration              shift and go to state 66
    empty                          shift and go to state 67
    var_declaration                shift and go to state 68
    function_definition            shift and go to state 69
    type                           shift and go to state 17
    array_declaration              shift and go to state 70
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 47

    (24) protection_level -> PUBLIC . COLON

    COLON           shift and go to state 71


state 48

    (25) protection_level -> PRIVATE . COLON

    COLON           shift and go to state 72


state 49

    (26) protection_level -> PROTECTED . COLON

    COLON           shift and go to state 73


state 50

    (27) protection_level -> empty .

    INT             reduce using rule 27 (protection_level -> empty .)
    CHAR            reduce using rule 27 (protection_level -> empty .)
    STRING          reduce using rule 27 (protection_level -> empty .)
    BOOL            reduce using rule 27 (protection_level -> empty .)
    FLOAT           reduce using rule 27 (protection_level -> empty .)
    LONG            reduce using rule 27 (protection_level -> empty .)
    SHORT           reduce using rule 27 (protection_level -> empty .)
    DOUBLE          reduce using rule 27 (protection_level -> empty .)
    VOID            reduce using rule 27 (protection_level -> empty .)
    RIGHT_BR_CURLY  reduce using rule 27 (protection_level -> empty .)


state 51

    (96) var_declaration -> type VAR EQUAL VAR . SEMICOLON
    (80) value -> VAR .
    (85) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 74
    LEFT_BR_SQUARED shift and go to state 42

  ! SEMICOLON       [ reduce using rule 80 (value -> VAR .) ]


state 52

    (95) var_declaration -> type VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 75


state 53

    (79) value -> number .

    SEMICOLON       reduce using rule 79 (value -> number .)
    PLUS            reduce using rule 79 (value -> number .)
    MINUS           reduce using rule 79 (value -> number .)
    MULTIPLY        reduce using rule 79 (value -> number .)
    DIVIDE          reduce using rule 79 (value -> number .)
    LESS            reduce using rule 79 (value -> number .)
    LESS_EQUAL      reduce using rule 79 (value -> number .)
    GREATER         reduce using rule 79 (value -> number .)
    GREATER_EQUAL   reduce using rule 79 (value -> number .)
    EQUAL_EQUAL     reduce using rule 79 (value -> number .)
    NOT_EQUAL       reduce using rule 79 (value -> number .)
    AND             reduce using rule 79 (value -> number .)
    OR              reduce using rule 79 (value -> number .)
    RIGHT_BR        reduce using rule 79 (value -> number .)


state 54

    (81) value -> get_array_element .

    SEMICOLON       reduce using rule 81 (value -> get_array_element .)
    LESS            reduce using rule 81 (value -> get_array_element .)
    LESS_EQUAL      reduce using rule 81 (value -> get_array_element .)
    GREATER         reduce using rule 81 (value -> get_array_element .)
    GREATER_EQUAL   reduce using rule 81 (value -> get_array_element .)
    EQUAL_EQUAL     reduce using rule 81 (value -> get_array_element .)
    NOT_EQUAL       reduce using rule 81 (value -> get_array_element .)
    AND             reduce using rule 81 (value -> get_array_element .)
    OR              reduce using rule 81 (value -> get_array_element .)
    RIGHT_BR        reduce using rule 81 (value -> get_array_element .)


state 55

    (82) value -> string_value .

    SEMICOLON       reduce using rule 82 (value -> string_value .)
    PLUS            reduce using rule 82 (value -> string_value .)
    MINUS           reduce using rule 82 (value -> string_value .)
    MULTIPLY        reduce using rule 82 (value -> string_value .)
    DIVIDE          reduce using rule 82 (value -> string_value .)
    LESS            reduce using rule 82 (value -> string_value .)
    LESS_EQUAL      reduce using rule 82 (value -> string_value .)
    GREATER         reduce using rule 82 (value -> string_value .)
    GREATER_EQUAL   reduce using rule 82 (value -> string_value .)
    EQUAL_EQUAL     reduce using rule 82 (value -> string_value .)
    NOT_EQUAL       reduce using rule 82 (value -> string_value .)
    AND             reduce using rule 82 (value -> string_value .)
    OR              reduce using rule 82 (value -> string_value .)
    RIGHT_BR        reduce using rule 82 (value -> string_value .)


state 56

    (77) number -> INT_NUMBER .

    SEMICOLON       reduce using rule 77 (number -> INT_NUMBER .)
    PLUS            reduce using rule 77 (number -> INT_NUMBER .)
    MINUS           reduce using rule 77 (number -> INT_NUMBER .)
    MULTIPLY        reduce using rule 77 (number -> INT_NUMBER .)
    DIVIDE          reduce using rule 77 (number -> INT_NUMBER .)
    LESS            reduce using rule 77 (number -> INT_NUMBER .)
    LESS_EQUAL      reduce using rule 77 (number -> INT_NUMBER .)
    GREATER         reduce using rule 77 (number -> INT_NUMBER .)
    GREATER_EQUAL   reduce using rule 77 (number -> INT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 77 (number -> INT_NUMBER .)
    NOT_EQUAL       reduce using rule 77 (number -> INT_NUMBER .)
    AND             reduce using rule 77 (number -> INT_NUMBER .)
    OR              reduce using rule 77 (number -> INT_NUMBER .)
    RIGHT_BR        reduce using rule 77 (number -> INT_NUMBER .)


state 57

    (78) number -> FLOAT_NUMBER .

    SEMICOLON       reduce using rule 78 (number -> FLOAT_NUMBER .)
    PLUS            reduce using rule 78 (number -> FLOAT_NUMBER .)
    MINUS           reduce using rule 78 (number -> FLOAT_NUMBER .)
    MULTIPLY        reduce using rule 78 (number -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 78 (number -> FLOAT_NUMBER .)
    LESS            reduce using rule 78 (number -> FLOAT_NUMBER .)
    LESS_EQUAL      reduce using rule 78 (number -> FLOAT_NUMBER .)
    GREATER         reduce using rule 78 (number -> FLOAT_NUMBER .)
    GREATER_EQUAL   reduce using rule 78 (number -> FLOAT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 78 (number -> FLOAT_NUMBER .)
    NOT_EQUAL       reduce using rule 78 (number -> FLOAT_NUMBER .)
    AND             reduce using rule 78 (number -> FLOAT_NUMBER .)
    OR              reduce using rule 78 (number -> FLOAT_NUMBER .)
    RIGHT_BR        reduce using rule 78 (number -> FLOAT_NUMBER .)


state 58

    (75) string_value -> TEXT .

    SEMICOLON       reduce using rule 75 (string_value -> TEXT .)
    PLUS            reduce using rule 75 (string_value -> TEXT .)
    MINUS           reduce using rule 75 (string_value -> TEXT .)
    MULTIPLY        reduce using rule 75 (string_value -> TEXT .)
    DIVIDE          reduce using rule 75 (string_value -> TEXT .)
    LESS            reduce using rule 75 (string_value -> TEXT .)
    LESS_EQUAL      reduce using rule 75 (string_value -> TEXT .)
    GREATER         reduce using rule 75 (string_value -> TEXT .)
    GREATER_EQUAL   reduce using rule 75 (string_value -> TEXT .)
    EQUAL_EQUAL     reduce using rule 75 (string_value -> TEXT .)
    NOT_EQUAL       reduce using rule 75 (string_value -> TEXT .)
    AND             reduce using rule 75 (string_value -> TEXT .)
    OR              reduce using rule 75 (string_value -> TEXT .)
    RIGHT_BR        reduce using rule 75 (string_value -> TEXT .)


state 59

    (76) string_value -> SIGN .

    SEMICOLON       reduce using rule 76 (string_value -> SIGN .)
    PLUS            reduce using rule 76 (string_value -> SIGN .)
    MINUS           reduce using rule 76 (string_value -> SIGN .)
    MULTIPLY        reduce using rule 76 (string_value -> SIGN .)
    DIVIDE          reduce using rule 76 (string_value -> SIGN .)
    LESS            reduce using rule 76 (string_value -> SIGN .)
    LESS_EQUAL      reduce using rule 76 (string_value -> SIGN .)
    GREATER         reduce using rule 76 (string_value -> SIGN .)
    GREATER_EQUAL   reduce using rule 76 (string_value -> SIGN .)
    EQUAL_EQUAL     reduce using rule 76 (string_value -> SIGN .)
    NOT_EQUAL       reduce using rule 76 (string_value -> SIGN .)
    AND             reduce using rule 76 (string_value -> SIGN .)
    OR              reduce using rule 76 (string_value -> SIGN .)
    RIGHT_BR        reduce using rule 76 (string_value -> SIGN .)


state 60

    (20) function_var_declaration -> type . VAR
    (21) function_var_declaration -> type . VAR COMMA function_var_declaration

    VAR             shift and go to state 76


state 61

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 77


state 62

    (22) function_var_declaration -> empty .

    RIGHT_BR        reduce using rule 22 (function_var_declaration -> empty .)


state 63

    (85) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER . RIGHT_BR_SQUARED

    RIGHT_BR_SQUARED shift and go to state 78


state 64

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 79


state 65

    (23) class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations . RIGHT_BR_CURLY SEMICOLON

    RIGHT_BR_CURLY  shift and go to state 80


state 66

    (30) class_declarations -> class_declaration .
    (31) class_declarations -> class_declaration . class_declarations
    (30) class_declarations -> . class_declaration
    (31) class_declarations -> . class_declaration class_declarations
    (32) class_declarations -> . empty
    (28) class_declaration -> . var_declaration
    (29) class_declaration -> . function_definition
    (110) empty -> .
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (16) function_definition -> . type_function_definition
    (17) function_definition -> . void_function_definition
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (97) array_declaration -> . type get_array_element SEMICOLON
    (18) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 30 (class_declarations -> class_declaration .)
    RIGHT_BR_CURLY  reduce using rule 30 (class_declarations -> class_declaration .)
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    VOID            shift and go to state 18

  ! RIGHT_BR_CURLY  [ reduce using rule 110 (empty -> .) ]

    class_declaration              shift and go to state 66
    class_declarations             shift and go to state 81
    empty                          shift and go to state 67
    var_declaration                shift and go to state 68
    function_definition            shift and go to state 69
    type                           shift and go to state 17
    array_declaration              shift and go to state 70
    type_function_definition       shift and go to state 13
    void_function_definition       shift and go to state 14

state 67

    (32) class_declarations -> empty .

    RIGHT_BR_CURLY  reduce using rule 32 (class_declarations -> empty .)


state 68

    (28) class_declaration -> var_declaration .

    INT             reduce using rule 28 (class_declaration -> var_declaration .)
    CHAR            reduce using rule 28 (class_declaration -> var_declaration .)
    STRING          reduce using rule 28 (class_declaration -> var_declaration .)
    BOOL            reduce using rule 28 (class_declaration -> var_declaration .)
    FLOAT           reduce using rule 28 (class_declaration -> var_declaration .)
    LONG            reduce using rule 28 (class_declaration -> var_declaration .)
    SHORT           reduce using rule 28 (class_declaration -> var_declaration .)
    DOUBLE          reduce using rule 28 (class_declaration -> var_declaration .)
    VOID            reduce using rule 28 (class_declaration -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 28 (class_declaration -> var_declaration .)


state 69

    (29) class_declaration -> function_definition .

    INT             reduce using rule 29 (class_declaration -> function_definition .)
    CHAR            reduce using rule 29 (class_declaration -> function_definition .)
    STRING          reduce using rule 29 (class_declaration -> function_definition .)
    BOOL            reduce using rule 29 (class_declaration -> function_definition .)
    FLOAT           reduce using rule 29 (class_declaration -> function_definition .)
    LONG            reduce using rule 29 (class_declaration -> function_definition .)
    SHORT           reduce using rule 29 (class_declaration -> function_definition .)
    DOUBLE          reduce using rule 29 (class_declaration -> function_definition .)
    VOID            reduce using rule 29 (class_declaration -> function_definition .)
    RIGHT_BR_CURLY  reduce using rule 29 (class_declaration -> function_definition .)


state 70

    (94) var_declaration -> array_declaration .

    INT             reduce using rule 94 (var_declaration -> array_declaration .)
    CHAR            reduce using rule 94 (var_declaration -> array_declaration .)
    STRING          reduce using rule 94 (var_declaration -> array_declaration .)
    BOOL            reduce using rule 94 (var_declaration -> array_declaration .)
    FLOAT           reduce using rule 94 (var_declaration -> array_declaration .)
    LONG            reduce using rule 94 (var_declaration -> array_declaration .)
    SHORT           reduce using rule 94 (var_declaration -> array_declaration .)
    DOUBLE          reduce using rule 94 (var_declaration -> array_declaration .)
    VOID            reduce using rule 94 (var_declaration -> array_declaration .)
    RIGHT_BR_CURLY  reduce using rule 94 (var_declaration -> array_declaration .)
    IF              reduce using rule 94 (var_declaration -> array_declaration .)
    VAR             reduce using rule 94 (var_declaration -> array_declaration .)
    COUT            reduce using rule 94 (var_declaration -> array_declaration .)
    CIN             reduce using rule 94 (var_declaration -> array_declaration .)
    WHILE           reduce using rule 94 (var_declaration -> array_declaration .)
    FOR             reduce using rule 94 (var_declaration -> array_declaration .)
    INT_NUMBER      reduce using rule 94 (var_declaration -> array_declaration .)
    FLOAT_NUMBER    reduce using rule 94 (var_declaration -> array_declaration .)
    TEXT            reduce using rule 94 (var_declaration -> array_declaration .)
    SIGN            reduce using rule 94 (var_declaration -> array_declaration .)
    RETURN          reduce using rule 94 (var_declaration -> array_declaration .)
    BREAK           reduce using rule 94 (var_declaration -> array_declaration .)


state 71

    (24) protection_level -> PUBLIC COLON .

    INT             reduce using rule 24 (protection_level -> PUBLIC COLON .)
    CHAR            reduce using rule 24 (protection_level -> PUBLIC COLON .)
    STRING          reduce using rule 24 (protection_level -> PUBLIC COLON .)
    BOOL            reduce using rule 24 (protection_level -> PUBLIC COLON .)
    FLOAT           reduce using rule 24 (protection_level -> PUBLIC COLON .)
    LONG            reduce using rule 24 (protection_level -> PUBLIC COLON .)
    SHORT           reduce using rule 24 (protection_level -> PUBLIC COLON .)
    DOUBLE          reduce using rule 24 (protection_level -> PUBLIC COLON .)
    VOID            reduce using rule 24 (protection_level -> PUBLIC COLON .)
    RIGHT_BR_CURLY  reduce using rule 24 (protection_level -> PUBLIC COLON .)


state 72

    (25) protection_level -> PRIVATE COLON .

    INT             reduce using rule 25 (protection_level -> PRIVATE COLON .)
    CHAR            reduce using rule 25 (protection_level -> PRIVATE COLON .)
    STRING          reduce using rule 25 (protection_level -> PRIVATE COLON .)
    BOOL            reduce using rule 25 (protection_level -> PRIVATE COLON .)
    FLOAT           reduce using rule 25 (protection_level -> PRIVATE COLON .)
    LONG            reduce using rule 25 (protection_level -> PRIVATE COLON .)
    SHORT           reduce using rule 25 (protection_level -> PRIVATE COLON .)
    DOUBLE          reduce using rule 25 (protection_level -> PRIVATE COLON .)
    VOID            reduce using rule 25 (protection_level -> PRIVATE COLON .)
    RIGHT_BR_CURLY  reduce using rule 25 (protection_level -> PRIVATE COLON .)


state 73

    (26) protection_level -> PROTECTED COLON .

    INT             reduce using rule 26 (protection_level -> PROTECTED COLON .)
    CHAR            reduce using rule 26 (protection_level -> PROTECTED COLON .)
    STRING          reduce using rule 26 (protection_level -> PROTECTED COLON .)
    BOOL            reduce using rule 26 (protection_level -> PROTECTED COLON .)
    FLOAT           reduce using rule 26 (protection_level -> PROTECTED COLON .)
    LONG            reduce using rule 26 (protection_level -> PROTECTED COLON .)
    SHORT           reduce using rule 26 (protection_level -> PROTECTED COLON .)
    DOUBLE          reduce using rule 26 (protection_level -> PROTECTED COLON .)
    VOID            reduce using rule 26 (protection_level -> PROTECTED COLON .)
    RIGHT_BR_CURLY  reduce using rule 26 (protection_level -> PROTECTED COLON .)


state 74

    (96) var_declaration -> type VAR EQUAL VAR SEMICOLON .

    USING           reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CLASS           reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    HASH            reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VOID            reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    $end            reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    IF              reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    TEXT            reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    SIGN            reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    BREAK           reduce using rule 96 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)


state 75

    (95) var_declaration -> type VAR EQUAL value SEMICOLON .

    USING           reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CLASS           reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    HASH            reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VOID            reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    $end            reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    IF              reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    COUT            reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CIN             reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    TEXT            reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    SIGN            reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    BREAK           reduce using rule 95 (var_declaration -> type VAR EQUAL value SEMICOLON .)


state 76

    (20) function_var_declaration -> type VAR .
    (21) function_var_declaration -> type VAR . COMMA function_var_declaration

    RIGHT_BR        reduce using rule 20 (function_var_declaration -> type VAR .)
    COMMA           shift and go to state 82


state 77

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 83


state 78

    (85) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .

    SEMICOLON       reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL           reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    PLUS            reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    MINUS           reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    MULTIPLY        reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    DIVIDE          reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS            reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    LESS_EQUAL      reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER         reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    GREATER_EQUAL   reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    EQUAL_EQUAL     reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    NOT_EQUAL       reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    AND             reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    OR              reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)
    RIGHT_BR        reduce using rule 85 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)


state 79

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 84


state 80

    (23) class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY . SEMICOLON

    SEMICOLON       shift and go to state 85


state 81

    (31) class_declarations -> class_declaration class_declarations .

    RIGHT_BR_CURLY  reduce using rule 31 (class_declarations -> class_declaration class_declarations .)


state 82

    (21) function_var_declaration -> type VAR COMMA . function_var_declaration
    (20) function_var_declaration -> . type VAR
    (21) function_var_declaration -> . type VAR COMMA function_var_declaration
    (22) function_var_declaration -> . empty
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (110) empty -> .

    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    RIGHT_BR        reduce using rule 110 (empty -> .)

    type                           shift and go to state 60
    function_var_declaration       shift and go to state 86
    empty                          shift and go to state 62

state 83

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . instructions returning RIGHT_BR_CURLY
    (33) instructions -> . instruction
    (34) instructions -> . instruction instructions
    (35) instruction -> . loop
    (36) instruction -> . if_statement
    (37) instruction -> . assignment
    (38) instruction -> . operation
    (39) instruction -> . empty
    (40) instruction -> . var_declaration
    (41) instruction -> . print
    (42) instruction -> . input
    (50) loop -> . while_loop
    (51) loop -> . for_loop
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (89) assignment -> . VAR EQUAL value SEMICOLON
    (90) assignment -> . VAR EQUAL VAR SEMICOLON
    (91) assignment -> . get_array_element EQUAL value SEMICOLON
    (92) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (86) operation -> . increment
    (87) operation -> . decrement
    (88) operation -> . value operator value SEMICOLON
    (110) empty -> .
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (106) print -> . COUT out SEMICOLON
    (107) input -> . CIN in SEMICOLON
    (43) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (48) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (49) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (83) increment -> . VAR PLUS_PLUS SEMICOLON
    (84) decrement -> . VAR MINUS_MINUS SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (97) array_declaration -> . type get_array_element SEMICOLON
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 88
    RETURN          reduce using rule 110 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    WHILE           shift and go to state 108
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! COUT            [ reduce using rule 110 (empty -> .) ]
  ! CIN             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LONG            [ reduce using rule 110 (empty -> .) ]
  ! SHORT           [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 110 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 110 (empty -> .) ]
  ! TEXT            [ reduce using rule 110 (empty -> .) ]
  ! SIGN            [ reduce using rule 110 (empty -> .) ]

    type                           shift and go to state 87
    instructions                   shift and go to state 89
    instruction                    shift and go to state 90
    loop                           shift and go to state 91
    if_statement                   shift and go to state 92
    assignment                     shift and go to state 93
    operation                      shift and go to state 94
    empty                          shift and go to state 95
    var_declaration                shift and go to state 96
    print                          shift and go to state 97
    input                          shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    array_declaration              shift and go to state 70
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 53
    string_value                   shift and go to state 55

state 84

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (33) instructions -> . instruction
    (34) instructions -> . instruction instructions
    (35) instruction -> . loop
    (36) instruction -> . if_statement
    (37) instruction -> . assignment
    (38) instruction -> . operation
    (39) instruction -> . empty
    (40) instruction -> . var_declaration
    (41) instruction -> . print
    (42) instruction -> . input
    (50) loop -> . while_loop
    (51) loop -> . for_loop
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (89) assignment -> . VAR EQUAL value SEMICOLON
    (90) assignment -> . VAR EQUAL VAR SEMICOLON
    (91) assignment -> . get_array_element EQUAL value SEMICOLON
    (92) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (86) operation -> . increment
    (87) operation -> . decrement
    (88) operation -> . value operator value SEMICOLON
    (110) empty -> .
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (106) print -> . COUT out SEMICOLON
    (107) input -> . CIN in SEMICOLON
    (43) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (48) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (49) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (83) increment -> . VAR PLUS_PLUS SEMICOLON
    (84) decrement -> . VAR MINUS_MINUS SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (97) array_declaration -> . type get_array_element SEMICOLON
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 88
    RIGHT_BR_CURLY  reduce using rule 110 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    WHILE           shift and go to state 108
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! COUT            [ reduce using rule 110 (empty -> .) ]
  ! CIN             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LONG            [ reduce using rule 110 (empty -> .) ]
  ! SHORT           [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 110 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 110 (empty -> .) ]
  ! TEXT            [ reduce using rule 110 (empty -> .) ]
  ! SIGN            [ reduce using rule 110 (empty -> .) ]

    instructions                   shift and go to state 111
    instruction                    shift and go to state 90
    loop                           shift and go to state 91
    if_statement                   shift and go to state 92
    assignment                     shift and go to state 93
    operation                      shift and go to state 94
    empty                          shift and go to state 95
    var_declaration                shift and go to state 96
    print                          shift and go to state 97
    input                          shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 87
    array_declaration              shift and go to state 70
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 53
    string_value                   shift and go to state 55

state 85

    (23) class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .

    USING           reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    CLASS           reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    HASH            reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    VOID            reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    INT             reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    CHAR            reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    STRING          reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    BOOL            reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    FLOAT           reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    LONG            reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    SHORT           reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    DOUBLE          reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)
    $end            reduce using rule 23 (class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON .)


state 86

    (21) function_var_declaration -> type VAR COMMA function_var_declaration .

    RIGHT_BR        reduce using rule 21 (function_var_declaration -> type VAR COMMA function_var_declaration .)


state 87

    (93) var_declaration -> type . VAR SEMICOLON
    (95) var_declaration -> type . VAR EQUAL value SEMICOLON
    (96) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (97) array_declaration -> type . get_array_element SEMICOLON
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    VAR             shift and go to state 112

    get_array_element              shift and go to state 34

state 88

    (89) assignment -> VAR . EQUAL value SEMICOLON
    (90) assignment -> VAR . EQUAL VAR SEMICOLON
    (85) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (83) increment -> VAR . PLUS_PLUS SEMICOLON
    (84) decrement -> VAR . MINUS_MINUS SEMICOLON
    (80) value -> VAR .

    EQUAL           shift and go to state 113
    LEFT_BR_SQUARED shift and go to state 42
    PLUS_PLUS       shift and go to state 114
    MINUS_MINUS     shift and go to state 115
    PLUS            reduce using rule 80 (value -> VAR .)
    MINUS           reduce using rule 80 (value -> VAR .)
    MULTIPLY        reduce using rule 80 (value -> VAR .)
    DIVIDE          reduce using rule 80 (value -> VAR .)


state 89

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions . returning RIGHT_BR_CURLY
    (109) returning -> . RETURN value SEMICOLON

    RETURN          shift and go to state 117

    returning                      shift and go to state 116

state 90

    (33) instructions -> instruction .
    (34) instructions -> instruction . instructions
    (33) instructions -> . instruction
    (34) instructions -> . instruction instructions
    (35) instruction -> . loop
    (36) instruction -> . if_statement
    (37) instruction -> . assignment
    (38) instruction -> . operation
    (39) instruction -> . empty
    (40) instruction -> . var_declaration
    (41) instruction -> . print
    (42) instruction -> . input
    (50) loop -> . while_loop
    (51) loop -> . for_loop
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (89) assignment -> . VAR EQUAL value SEMICOLON
    (90) assignment -> . VAR EQUAL VAR SEMICOLON
    (91) assignment -> . get_array_element EQUAL value SEMICOLON
    (92) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (86) operation -> . increment
    (87) operation -> . decrement
    (88) operation -> . value operator value SEMICOLON
    (110) empty -> .
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (106) print -> . COUT out SEMICOLON
    (107) input -> . CIN in SEMICOLON
    (43) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (48) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (49) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (83) increment -> . VAR PLUS_PLUS SEMICOLON
    (84) decrement -> . VAR MINUS_MINUS SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (97) array_declaration -> . type get_array_element SEMICOLON
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 33 (instructions -> instruction .)
  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 33 (instructions -> instruction .)
  ! reduce/reduce conflict for BREAK resolved using rule 33 (instructions -> instruction .)
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    RETURN          reduce using rule 33 (instructions -> instruction .)
    RIGHT_BR_CURLY  reduce using rule 33 (instructions -> instruction .)
    BREAK           reduce using rule 33 (instructions -> instruction .)
    IF              shift and go to state 101
    VAR             shift and go to state 88
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    WHILE           shift and go to state 108
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! COUT            [ reduce using rule 110 (empty -> .) ]
  ! CIN             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LONG            [ reduce using rule 110 (empty -> .) ]
  ! SHORT           [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 110 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 110 (empty -> .) ]
  ! TEXT            [ reduce using rule 110 (empty -> .) ]
  ! SIGN            [ reduce using rule 110 (empty -> .) ]
  ! RETURN          [ reduce using rule 110 (empty -> .) ]
  ! RIGHT_BR_CURLY  [ reduce using rule 110 (empty -> .) ]
  ! BREAK           [ reduce using rule 110 (empty -> .) ]

    instruction                    shift and go to state 90
    instructions                   shift and go to state 118
    loop                           shift and go to state 91
    if_statement                   shift and go to state 92
    assignment                     shift and go to state 93
    operation                      shift and go to state 94
    empty                          shift and go to state 95
    var_declaration                shift and go to state 96
    print                          shift and go to state 97
    input                          shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 87
    array_declaration              shift and go to state 70
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 53
    string_value                   shift and go to state 55

state 91

    (35) instruction -> loop .

    IF              reduce using rule 35 (instruction -> loop .)
    VAR             reduce using rule 35 (instruction -> loop .)
    COUT            reduce using rule 35 (instruction -> loop .)
    CIN             reduce using rule 35 (instruction -> loop .)
    WHILE           reduce using rule 35 (instruction -> loop .)
    INT             reduce using rule 35 (instruction -> loop .)
    CHAR            reduce using rule 35 (instruction -> loop .)
    STRING          reduce using rule 35 (instruction -> loop .)
    BOOL            reduce using rule 35 (instruction -> loop .)
    FLOAT           reduce using rule 35 (instruction -> loop .)
    LONG            reduce using rule 35 (instruction -> loop .)
    SHORT           reduce using rule 35 (instruction -> loop .)
    DOUBLE          reduce using rule 35 (instruction -> loop .)
    FOR             reduce using rule 35 (instruction -> loop .)
    INT_NUMBER      reduce using rule 35 (instruction -> loop .)
    FLOAT_NUMBER    reduce using rule 35 (instruction -> loop .)
    TEXT            reduce using rule 35 (instruction -> loop .)
    SIGN            reduce using rule 35 (instruction -> loop .)
    RETURN          reduce using rule 35 (instruction -> loop .)
    RIGHT_BR_CURLY  reduce using rule 35 (instruction -> loop .)
    BREAK           reduce using rule 35 (instruction -> loop .)


state 92

    (36) instruction -> if_statement .

    IF              reduce using rule 36 (instruction -> if_statement .)
    VAR             reduce using rule 36 (instruction -> if_statement .)
    COUT            reduce using rule 36 (instruction -> if_statement .)
    CIN             reduce using rule 36 (instruction -> if_statement .)
    WHILE           reduce using rule 36 (instruction -> if_statement .)
    INT             reduce using rule 36 (instruction -> if_statement .)
    CHAR            reduce using rule 36 (instruction -> if_statement .)
    STRING          reduce using rule 36 (instruction -> if_statement .)
    BOOL            reduce using rule 36 (instruction -> if_statement .)
    FLOAT           reduce using rule 36 (instruction -> if_statement .)
    LONG            reduce using rule 36 (instruction -> if_statement .)
    SHORT           reduce using rule 36 (instruction -> if_statement .)
    DOUBLE          reduce using rule 36 (instruction -> if_statement .)
    FOR             reduce using rule 36 (instruction -> if_statement .)
    INT_NUMBER      reduce using rule 36 (instruction -> if_statement .)
    FLOAT_NUMBER    reduce using rule 36 (instruction -> if_statement .)
    TEXT            reduce using rule 36 (instruction -> if_statement .)
    SIGN            reduce using rule 36 (instruction -> if_statement .)
    RETURN          reduce using rule 36 (instruction -> if_statement .)
    RIGHT_BR_CURLY  reduce using rule 36 (instruction -> if_statement .)
    BREAK           reduce using rule 36 (instruction -> if_statement .)


state 93

    (37) instruction -> assignment .

    IF              reduce using rule 37 (instruction -> assignment .)
    VAR             reduce using rule 37 (instruction -> assignment .)
    COUT            reduce using rule 37 (instruction -> assignment .)
    CIN             reduce using rule 37 (instruction -> assignment .)
    WHILE           reduce using rule 37 (instruction -> assignment .)
    INT             reduce using rule 37 (instruction -> assignment .)
    CHAR            reduce using rule 37 (instruction -> assignment .)
    STRING          reduce using rule 37 (instruction -> assignment .)
    BOOL            reduce using rule 37 (instruction -> assignment .)
    FLOAT           reduce using rule 37 (instruction -> assignment .)
    LONG            reduce using rule 37 (instruction -> assignment .)
    SHORT           reduce using rule 37 (instruction -> assignment .)
    DOUBLE          reduce using rule 37 (instruction -> assignment .)
    FOR             reduce using rule 37 (instruction -> assignment .)
    INT_NUMBER      reduce using rule 37 (instruction -> assignment .)
    FLOAT_NUMBER    reduce using rule 37 (instruction -> assignment .)
    TEXT            reduce using rule 37 (instruction -> assignment .)
    SIGN            reduce using rule 37 (instruction -> assignment .)
    RETURN          reduce using rule 37 (instruction -> assignment .)
    RIGHT_BR_CURLY  reduce using rule 37 (instruction -> assignment .)
    BREAK           reduce using rule 37 (instruction -> assignment .)


state 94

    (38) instruction -> operation .

    IF              reduce using rule 38 (instruction -> operation .)
    VAR             reduce using rule 38 (instruction -> operation .)
    COUT            reduce using rule 38 (instruction -> operation .)
    CIN             reduce using rule 38 (instruction -> operation .)
    WHILE           reduce using rule 38 (instruction -> operation .)
    INT             reduce using rule 38 (instruction -> operation .)
    CHAR            reduce using rule 38 (instruction -> operation .)
    STRING          reduce using rule 38 (instruction -> operation .)
    BOOL            reduce using rule 38 (instruction -> operation .)
    FLOAT           reduce using rule 38 (instruction -> operation .)
    LONG            reduce using rule 38 (instruction -> operation .)
    SHORT           reduce using rule 38 (instruction -> operation .)
    DOUBLE          reduce using rule 38 (instruction -> operation .)
    FOR             reduce using rule 38 (instruction -> operation .)
    INT_NUMBER      reduce using rule 38 (instruction -> operation .)
    FLOAT_NUMBER    reduce using rule 38 (instruction -> operation .)
    TEXT            reduce using rule 38 (instruction -> operation .)
    SIGN            reduce using rule 38 (instruction -> operation .)
    RETURN          reduce using rule 38 (instruction -> operation .)
    RIGHT_BR_CURLY  reduce using rule 38 (instruction -> operation .)
    BREAK           reduce using rule 38 (instruction -> operation .)


state 95

    (39) instruction -> empty .

    IF              reduce using rule 39 (instruction -> empty .)
    VAR             reduce using rule 39 (instruction -> empty .)
    COUT            reduce using rule 39 (instruction -> empty .)
    CIN             reduce using rule 39 (instruction -> empty .)
    WHILE           reduce using rule 39 (instruction -> empty .)
    INT             reduce using rule 39 (instruction -> empty .)
    CHAR            reduce using rule 39 (instruction -> empty .)
    STRING          reduce using rule 39 (instruction -> empty .)
    BOOL            reduce using rule 39 (instruction -> empty .)
    FLOAT           reduce using rule 39 (instruction -> empty .)
    LONG            reduce using rule 39 (instruction -> empty .)
    SHORT           reduce using rule 39 (instruction -> empty .)
    DOUBLE          reduce using rule 39 (instruction -> empty .)
    FOR             reduce using rule 39 (instruction -> empty .)
    INT_NUMBER      reduce using rule 39 (instruction -> empty .)
    FLOAT_NUMBER    reduce using rule 39 (instruction -> empty .)
    TEXT            reduce using rule 39 (instruction -> empty .)
    SIGN            reduce using rule 39 (instruction -> empty .)
    RETURN          reduce using rule 39 (instruction -> empty .)
    RIGHT_BR_CURLY  reduce using rule 39 (instruction -> empty .)
    BREAK           reduce using rule 39 (instruction -> empty .)


state 96

    (40) instruction -> var_declaration .

    IF              reduce using rule 40 (instruction -> var_declaration .)
    VAR             reduce using rule 40 (instruction -> var_declaration .)
    COUT            reduce using rule 40 (instruction -> var_declaration .)
    CIN             reduce using rule 40 (instruction -> var_declaration .)
    WHILE           reduce using rule 40 (instruction -> var_declaration .)
    INT             reduce using rule 40 (instruction -> var_declaration .)
    CHAR            reduce using rule 40 (instruction -> var_declaration .)
    STRING          reduce using rule 40 (instruction -> var_declaration .)
    BOOL            reduce using rule 40 (instruction -> var_declaration .)
    FLOAT           reduce using rule 40 (instruction -> var_declaration .)
    LONG            reduce using rule 40 (instruction -> var_declaration .)
    SHORT           reduce using rule 40 (instruction -> var_declaration .)
    DOUBLE          reduce using rule 40 (instruction -> var_declaration .)
    FOR             reduce using rule 40 (instruction -> var_declaration .)
    INT_NUMBER      reduce using rule 40 (instruction -> var_declaration .)
    FLOAT_NUMBER    reduce using rule 40 (instruction -> var_declaration .)
    TEXT            reduce using rule 40 (instruction -> var_declaration .)
    SIGN            reduce using rule 40 (instruction -> var_declaration .)
    RETURN          reduce using rule 40 (instruction -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 40 (instruction -> var_declaration .)
    BREAK           reduce using rule 40 (instruction -> var_declaration .)


state 97

    (41) instruction -> print .

    IF              reduce using rule 41 (instruction -> print .)
    VAR             reduce using rule 41 (instruction -> print .)
    COUT            reduce using rule 41 (instruction -> print .)
    CIN             reduce using rule 41 (instruction -> print .)
    WHILE           reduce using rule 41 (instruction -> print .)
    INT             reduce using rule 41 (instruction -> print .)
    CHAR            reduce using rule 41 (instruction -> print .)
    STRING          reduce using rule 41 (instruction -> print .)
    BOOL            reduce using rule 41 (instruction -> print .)
    FLOAT           reduce using rule 41 (instruction -> print .)
    LONG            reduce using rule 41 (instruction -> print .)
    SHORT           reduce using rule 41 (instruction -> print .)
    DOUBLE          reduce using rule 41 (instruction -> print .)
    FOR             reduce using rule 41 (instruction -> print .)
    INT_NUMBER      reduce using rule 41 (instruction -> print .)
    FLOAT_NUMBER    reduce using rule 41 (instruction -> print .)
    TEXT            reduce using rule 41 (instruction -> print .)
    SIGN            reduce using rule 41 (instruction -> print .)
    RETURN          reduce using rule 41 (instruction -> print .)
    RIGHT_BR_CURLY  reduce using rule 41 (instruction -> print .)
    BREAK           reduce using rule 41 (instruction -> print .)


state 98

    (42) instruction -> input .

    IF              reduce using rule 42 (instruction -> input .)
    VAR             reduce using rule 42 (instruction -> input .)
    COUT            reduce using rule 42 (instruction -> input .)
    CIN             reduce using rule 42 (instruction -> input .)
    WHILE           reduce using rule 42 (instruction -> input .)
    INT             reduce using rule 42 (instruction -> input .)
    CHAR            reduce using rule 42 (instruction -> input .)
    STRING          reduce using rule 42 (instruction -> input .)
    BOOL            reduce using rule 42 (instruction -> input .)
    FLOAT           reduce using rule 42 (instruction -> input .)
    LONG            reduce using rule 42 (instruction -> input .)
    SHORT           reduce using rule 42 (instruction -> input .)
    DOUBLE          reduce using rule 42 (instruction -> input .)
    FOR             reduce using rule 42 (instruction -> input .)
    INT_NUMBER      reduce using rule 42 (instruction -> input .)
    FLOAT_NUMBER    reduce using rule 42 (instruction -> input .)
    TEXT            reduce using rule 42 (instruction -> input .)
    SIGN            reduce using rule 42 (instruction -> input .)
    RETURN          reduce using rule 42 (instruction -> input .)
    RIGHT_BR_CURLY  reduce using rule 42 (instruction -> input .)
    BREAK           reduce using rule 42 (instruction -> input .)


state 99

    (50) loop -> while_loop .

    IF              reduce using rule 50 (loop -> while_loop .)
    VAR             reduce using rule 50 (loop -> while_loop .)
    COUT            reduce using rule 50 (loop -> while_loop .)
    CIN             reduce using rule 50 (loop -> while_loop .)
    WHILE           reduce using rule 50 (loop -> while_loop .)
    INT             reduce using rule 50 (loop -> while_loop .)
    CHAR            reduce using rule 50 (loop -> while_loop .)
    STRING          reduce using rule 50 (loop -> while_loop .)
    BOOL            reduce using rule 50 (loop -> while_loop .)
    FLOAT           reduce using rule 50 (loop -> while_loop .)
    LONG            reduce using rule 50 (loop -> while_loop .)
    SHORT           reduce using rule 50 (loop -> while_loop .)
    DOUBLE          reduce using rule 50 (loop -> while_loop .)
    FOR             reduce using rule 50 (loop -> while_loop .)
    INT_NUMBER      reduce using rule 50 (loop -> while_loop .)
    FLOAT_NUMBER    reduce using rule 50 (loop -> while_loop .)
    TEXT            reduce using rule 50 (loop -> while_loop .)
    SIGN            reduce using rule 50 (loop -> while_loop .)
    RETURN          reduce using rule 50 (loop -> while_loop .)
    RIGHT_BR_CURLY  reduce using rule 50 (loop -> while_loop .)
    BREAK           reduce using rule 50 (loop -> while_loop .)


state 100

    (51) loop -> for_loop .

    IF              reduce using rule 51 (loop -> for_loop .)
    VAR             reduce using rule 51 (loop -> for_loop .)
    COUT            reduce using rule 51 (loop -> for_loop .)
    CIN             reduce using rule 51 (loop -> for_loop .)
    WHILE           reduce using rule 51 (loop -> for_loop .)
    INT             reduce using rule 51 (loop -> for_loop .)
    CHAR            reduce using rule 51 (loop -> for_loop .)
    STRING          reduce using rule 51 (loop -> for_loop .)
    BOOL            reduce using rule 51 (loop -> for_loop .)
    FLOAT           reduce using rule 51 (loop -> for_loop .)
    LONG            reduce using rule 51 (loop -> for_loop .)
    SHORT           reduce using rule 51 (loop -> for_loop .)
    DOUBLE          reduce using rule 51 (loop -> for_loop .)
    FOR             reduce using rule 51 (loop -> for_loop .)
    INT_NUMBER      reduce using rule 51 (loop -> for_loop .)
    FLOAT_NUMBER    reduce using rule 51 (loop -> for_loop .)
    TEXT            reduce using rule 51 (loop -> for_loop .)
    SIGN            reduce using rule 51 (loop -> for_loop .)
    RETURN          reduce using rule 51 (loop -> for_loop .)
    RIGHT_BR_CURLY  reduce using rule 51 (loop -> for_loop .)
    BREAK           reduce using rule 51 (loop -> for_loop .)


state 101

    (52) if_statement -> IF . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 119


state 102

    (88) operation -> value . operator value SEMICOLON
    (61) operator -> . PLUS
    (62) operator -> . MINUS
    (63) operator -> . MULTIPLY
    (64) operator -> . DIVIDE

    PLUS            shift and go to state 121
    MINUS           shift and go to state 122
    MULTIPLY        shift and go to state 123
    DIVIDE          shift and go to state 124

    operator                       shift and go to state 120

state 103

    (91) assignment -> get_array_element . EQUAL value SEMICOLON
    (92) assignment -> get_array_element . EQUAL VAR SEMICOLON
    (81) value -> get_array_element .

    EQUAL           shift and go to state 125
    PLUS            reduce using rule 81 (value -> get_array_element .)
    MINUS           reduce using rule 81 (value -> get_array_element .)
    MULTIPLY        reduce using rule 81 (value -> get_array_element .)
    DIVIDE          reduce using rule 81 (value -> get_array_element .)


state 104

    (86) operation -> increment .

    IF              reduce using rule 86 (operation -> increment .)
    VAR             reduce using rule 86 (operation -> increment .)
    COUT            reduce using rule 86 (operation -> increment .)
    CIN             reduce using rule 86 (operation -> increment .)
    WHILE           reduce using rule 86 (operation -> increment .)
    INT             reduce using rule 86 (operation -> increment .)
    CHAR            reduce using rule 86 (operation -> increment .)
    STRING          reduce using rule 86 (operation -> increment .)
    BOOL            reduce using rule 86 (operation -> increment .)
    FLOAT           reduce using rule 86 (operation -> increment .)
    LONG            reduce using rule 86 (operation -> increment .)
    SHORT           reduce using rule 86 (operation -> increment .)
    DOUBLE          reduce using rule 86 (operation -> increment .)
    FOR             reduce using rule 86 (operation -> increment .)
    INT_NUMBER      reduce using rule 86 (operation -> increment .)
    FLOAT_NUMBER    reduce using rule 86 (operation -> increment .)
    TEXT            reduce using rule 86 (operation -> increment .)
    SIGN            reduce using rule 86 (operation -> increment .)
    RETURN          reduce using rule 86 (operation -> increment .)
    RIGHT_BR_CURLY  reduce using rule 86 (operation -> increment .)
    BREAK           reduce using rule 86 (operation -> increment .)


state 105

    (87) operation -> decrement .

    IF              reduce using rule 87 (operation -> decrement .)
    VAR             reduce using rule 87 (operation -> decrement .)
    COUT            reduce using rule 87 (operation -> decrement .)
    CIN             reduce using rule 87 (operation -> decrement .)
    WHILE           reduce using rule 87 (operation -> decrement .)
    INT             reduce using rule 87 (operation -> decrement .)
    CHAR            reduce using rule 87 (operation -> decrement .)
    STRING          reduce using rule 87 (operation -> decrement .)
    BOOL            reduce using rule 87 (operation -> decrement .)
    FLOAT           reduce using rule 87 (operation -> decrement .)
    LONG            reduce using rule 87 (operation -> decrement .)
    SHORT           reduce using rule 87 (operation -> decrement .)
    DOUBLE          reduce using rule 87 (operation -> decrement .)
    FOR             reduce using rule 87 (operation -> decrement .)
    INT_NUMBER      reduce using rule 87 (operation -> decrement .)
    FLOAT_NUMBER    reduce using rule 87 (operation -> decrement .)
    TEXT            reduce using rule 87 (operation -> decrement .)
    SIGN            reduce using rule 87 (operation -> decrement .)
    RETURN          reduce using rule 87 (operation -> decrement .)
    RIGHT_BR_CURLY  reduce using rule 87 (operation -> decrement .)
    BREAK           reduce using rule 87 (operation -> decrement .)


state 106

    (106) print -> COUT . out SEMICOLON
    (98) out -> . OUT VAR
    (99) out -> . OUT VAR out
    (100) out -> . OUT TEXT
    (101) out -> . OUT TEXT out
    (102) out -> . OUT ENDL
    (103) out -> . OUT ENDL out

    OUT             shift and go to state 127

    out                            shift and go to state 126

state 107

    (107) input -> CIN . in SEMICOLON
    (104) in -> . IN VAR
    (105) in -> . IN VAR in

    IN              shift and go to state 129

    in                             shift and go to state 128

state 108

    (43) while_loop -> WHILE . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 130


state 109

    (48) for_loop -> for_loop_statement . LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (49) for_loop -> for_loop_statement . LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 131


state 110

    (44) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LEFT_BR         shift and go to state 132


state 111

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 133


state 112

    (93) var_declaration -> type VAR . SEMICOLON
    (95) var_declaration -> type VAR . EQUAL value SEMICOLON
    (96) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (85) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 39
    EQUAL           shift and go to state 40
    LEFT_BR_SQUARED shift and go to state 42


state 113

    (89) assignment -> VAR EQUAL . value SEMICOLON
    (90) assignment -> VAR EQUAL . VAR SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

    VAR             shift and go to state 134
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    value                          shift and go to state 135
    number                         shift and go to state 53
    get_array_element              shift and go to state 54
    string_value                   shift and go to state 55

state 114

    (83) increment -> VAR PLUS_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 136


state 115

    (84) decrement -> VAR MINUS_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 137


state 116

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 138


state 117

    (109) returning -> RETURN . value SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    value                          shift and go to state 139
    number                         shift and go to state 53
    get_array_element              shift and go to state 54
    string_value                   shift and go to state 55

state 118

    (34) instructions -> instruction instructions .

    RETURN          reduce using rule 34 (instructions -> instruction instructions .)
    RIGHT_BR_CURLY  reduce using rule 34 (instructions -> instruction instructions .)
    BREAK           reduce using rule 34 (instructions -> instruction instructions .)


state 119

    (52) if_statement -> IF LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (53) comparisons -> . comparison
    (54) comparisons -> . comparison conjunction comparisons
    (108) comparison -> . value comparator value
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    comparisons                    shift and go to state 141
    comparison                     shift and go to state 142
    value                          shift and go to state 143
    number                         shift and go to state 53
    get_array_element              shift and go to state 54
    string_value                   shift and go to state 55

state 120

    (88) operation -> value operator . value SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    value                          shift and go to state 144
    number                         shift and go to state 53
    get_array_element              shift and go to state 54
    string_value                   shift and go to state 55

state 121

    (61) operator -> PLUS .

    VAR             reduce using rule 61 (operator -> PLUS .)
    INT_NUMBER      reduce using rule 61 (operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 61 (operator -> PLUS .)
    TEXT            reduce using rule 61 (operator -> PLUS .)
    SIGN            reduce using rule 61 (operator -> PLUS .)


state 122

    (62) operator -> MINUS .

    VAR             reduce using rule 62 (operator -> MINUS .)
    INT_NUMBER      reduce using rule 62 (operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 62 (operator -> MINUS .)
    TEXT            reduce using rule 62 (operator -> MINUS .)
    SIGN            reduce using rule 62 (operator -> MINUS .)


state 123

    (63) operator -> MULTIPLY .

    VAR             reduce using rule 63 (operator -> MULTIPLY .)
    INT_NUMBER      reduce using rule 63 (operator -> MULTIPLY .)
    FLOAT_NUMBER    reduce using rule 63 (operator -> MULTIPLY .)
    TEXT            reduce using rule 63 (operator -> MULTIPLY .)
    SIGN            reduce using rule 63 (operator -> MULTIPLY .)


state 124

    (64) operator -> DIVIDE .

    VAR             reduce using rule 64 (operator -> DIVIDE .)
    INT_NUMBER      reduce using rule 64 (operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 64 (operator -> DIVIDE .)
    TEXT            reduce using rule 64 (operator -> DIVIDE .)
    SIGN            reduce using rule 64 (operator -> DIVIDE .)


state 125

    (91) assignment -> get_array_element EQUAL . value SEMICOLON
    (92) assignment -> get_array_element EQUAL . VAR SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

    VAR             shift and go to state 146
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    get_array_element              shift and go to state 54
    value                          shift and go to state 145
    number                         shift and go to state 53
    string_value                   shift and go to state 55

state 126

    (106) print -> COUT out . SEMICOLON

    SEMICOLON       shift and go to state 147


state 127

    (98) out -> OUT . VAR
    (99) out -> OUT . VAR out
    (100) out -> OUT . TEXT
    (101) out -> OUT . TEXT out
    (102) out -> OUT . ENDL
    (103) out -> OUT . ENDL out

    VAR             shift and go to state 148
    TEXT            shift and go to state 149
    ENDL            shift and go to state 150


state 128

    (107) input -> CIN in . SEMICOLON

    SEMICOLON       shift and go to state 151


state 129

    (104) in -> IN . VAR
    (105) in -> IN . VAR in

    VAR             shift and go to state 152


state 130

    (43) while_loop -> WHILE LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (53) comparisons -> . comparison
    (54) comparisons -> . comparison conjunction comparisons
    (108) comparison -> . value comparator value
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    comparisons                    shift and go to state 153
    comparison                     shift and go to state 142
    value                          shift and go to state 143
    number                         shift and go to state 53
    get_array_element              shift and go to state 54
    string_value                   shift and go to state 55

state 131

    (48) for_loop -> for_loop_statement LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (49) for_loop -> for_loop_statement LEFT_BR_CURLY . instructions BREAK SEMICOLON RIGHT_BR_CURLY
    (33) instructions -> . instruction
    (34) instructions -> . instruction instructions
    (35) instruction -> . loop
    (36) instruction -> . if_statement
    (37) instruction -> . assignment
    (38) instruction -> . operation
    (39) instruction -> . empty
    (40) instruction -> . var_declaration
    (41) instruction -> . print
    (42) instruction -> . input
    (50) loop -> . while_loop
    (51) loop -> . for_loop
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (89) assignment -> . VAR EQUAL value SEMICOLON
    (90) assignment -> . VAR EQUAL VAR SEMICOLON
    (91) assignment -> . get_array_element EQUAL value SEMICOLON
    (92) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (86) operation -> . increment
    (87) operation -> . decrement
    (88) operation -> . value operator value SEMICOLON
    (110) empty -> .
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (106) print -> . COUT out SEMICOLON
    (107) input -> . CIN in SEMICOLON
    (43) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (48) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (49) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (83) increment -> . VAR PLUS_PLUS SEMICOLON
    (84) decrement -> . VAR MINUS_MINUS SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (97) array_declaration -> . type get_array_element SEMICOLON
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 88
    RIGHT_BR_CURLY  reduce using rule 110 (empty -> .)
    BREAK           reduce using rule 110 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    WHILE           shift and go to state 108
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! COUT            [ reduce using rule 110 (empty -> .) ]
  ! CIN             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LONG            [ reduce using rule 110 (empty -> .) ]
  ! SHORT           [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 110 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 110 (empty -> .) ]
  ! TEXT            [ reduce using rule 110 (empty -> .) ]
  ! SIGN            [ reduce using rule 110 (empty -> .) ]

    for_loop_statement             shift and go to state 109
    instructions                   shift and go to state 154
    instruction                    shift and go to state 90
    loop                           shift and go to state 91
    if_statement                   shift and go to state 92
    assignment                     shift and go to state 93
    operation                      shift and go to state 94
    empty                          shift and go to state 95
    var_declaration                shift and go to state 96
    print                          shift and go to state 97
    input                          shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 87
    array_declaration              shift and go to state 70
    number                         shift and go to state 53
    string_value                   shift and go to state 55

state 132

    (44) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT             shift and go to state 155


state 133

    (19) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    USING           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CLASS           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    HASH            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VOID            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    $end            reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 19 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 134

    (90) assignment -> VAR EQUAL VAR . SEMICOLON
    (80) value -> VAR .
    (85) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 156
    LEFT_BR_SQUARED shift and go to state 42

  ! SEMICOLON       [ reduce using rule 80 (value -> VAR .) ]


state 135

    (89) assignment -> VAR EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 157


state 136

    (83) increment -> VAR PLUS_PLUS SEMICOLON .

    IF              reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    VAR             reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    COUT            reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CIN             reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    WHILE           reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT             reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CHAR            reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    STRING          reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    BOOL            reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT           reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    LONG            reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    SHORT           reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    DOUBLE          reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FOR             reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT_NUMBER      reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    TEXT            reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    SIGN            reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RETURN          reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)
    BREAK           reduce using rule 83 (increment -> VAR PLUS_PLUS SEMICOLON .)


state 137

    (84) decrement -> VAR MINUS_MINUS SEMICOLON .

    IF              reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    VAR             reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    COUT            reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CIN             reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    WHILE           reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT             reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CHAR            reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    STRING          reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    BOOL            reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT           reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    LONG            reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    SHORT           reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    DOUBLE          reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FOR             reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT_NUMBER      reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    TEXT            reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    SIGN            reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RETURN          reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    BREAK           reduce using rule 84 (decrement -> VAR MINUS_MINUS SEMICOLON .)


state 138

    (18) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .

    USING           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    CLASS           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    HASH            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    VOID            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    INT             reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    CHAR            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    STRING          reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    BOOL            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    LONG            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    SHORT           reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    $end            reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 18 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)


state 139

    (109) returning -> RETURN value . SEMICOLON

    SEMICOLON       shift and go to state 158


state 140

    (80) value -> VAR .
    (85) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       reduce using rule 80 (value -> VAR .)
    LESS            reduce using rule 80 (value -> VAR .)
    LESS_EQUAL      reduce using rule 80 (value -> VAR .)
    GREATER         reduce using rule 80 (value -> VAR .)
    GREATER_EQUAL   reduce using rule 80 (value -> VAR .)
    EQUAL_EQUAL     reduce using rule 80 (value -> VAR .)
    NOT_EQUAL       reduce using rule 80 (value -> VAR .)
    AND             reduce using rule 80 (value -> VAR .)
    OR              reduce using rule 80 (value -> VAR .)
    RIGHT_BR        reduce using rule 80 (value -> VAR .)
    LEFT_BR_SQUARED shift and go to state 42


state 141

    (52) if_statement -> IF LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 159


state 142

    (53) comparisons -> comparison .
    (54) comparisons -> comparison . conjunction comparisons
    (73) conjunction -> . AND
    (74) conjunction -> . OR

    RIGHT_BR        reduce using rule 53 (comparisons -> comparison .)
    AND             shift and go to state 161
    OR              shift and go to state 162

    conjunction                    shift and go to state 160

state 143

    (108) comparison -> value . comparator value
    (55) comparator -> . LESS
    (56) comparator -> . LESS_EQUAL
    (57) comparator -> . GREATER
    (58) comparator -> . GREATER_EQUAL
    (59) comparator -> . EQUAL_EQUAL
    (60) comparator -> . NOT_EQUAL

    LESS            shift and go to state 164
    LESS_EQUAL      shift and go to state 165
    GREATER         shift and go to state 166
    GREATER_EQUAL   shift and go to state 167
    EQUAL_EQUAL     shift and go to state 168
    NOT_EQUAL       shift and go to state 169

    comparator                     shift and go to state 163

state 144

    (88) operation -> value operator value . SEMICOLON

    SEMICOLON       shift and go to state 170


state 145

    (91) assignment -> get_array_element EQUAL value . SEMICOLON

    SEMICOLON       shift and go to state 171


state 146

    (92) assignment -> get_array_element EQUAL VAR . SEMICOLON
    (80) value -> VAR .
    (85) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 172
    LEFT_BR_SQUARED shift and go to state 42

  ! SEMICOLON       [ reduce using rule 80 (value -> VAR .) ]


state 147

    (106) print -> COUT out SEMICOLON .

    IF              reduce using rule 106 (print -> COUT out SEMICOLON .)
    VAR             reduce using rule 106 (print -> COUT out SEMICOLON .)
    COUT            reduce using rule 106 (print -> COUT out SEMICOLON .)
    CIN             reduce using rule 106 (print -> COUT out SEMICOLON .)
    WHILE           reduce using rule 106 (print -> COUT out SEMICOLON .)
    INT             reduce using rule 106 (print -> COUT out SEMICOLON .)
    CHAR            reduce using rule 106 (print -> COUT out SEMICOLON .)
    STRING          reduce using rule 106 (print -> COUT out SEMICOLON .)
    BOOL            reduce using rule 106 (print -> COUT out SEMICOLON .)
    FLOAT           reduce using rule 106 (print -> COUT out SEMICOLON .)
    LONG            reduce using rule 106 (print -> COUT out SEMICOLON .)
    SHORT           reduce using rule 106 (print -> COUT out SEMICOLON .)
    DOUBLE          reduce using rule 106 (print -> COUT out SEMICOLON .)
    FOR             reduce using rule 106 (print -> COUT out SEMICOLON .)
    INT_NUMBER      reduce using rule 106 (print -> COUT out SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 106 (print -> COUT out SEMICOLON .)
    TEXT            reduce using rule 106 (print -> COUT out SEMICOLON .)
    SIGN            reduce using rule 106 (print -> COUT out SEMICOLON .)
    RETURN          reduce using rule 106 (print -> COUT out SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 106 (print -> COUT out SEMICOLON .)
    BREAK           reduce using rule 106 (print -> COUT out SEMICOLON .)


state 148

    (98) out -> OUT VAR .
    (99) out -> OUT VAR . out
    (98) out -> . OUT VAR
    (99) out -> . OUT VAR out
    (100) out -> . OUT TEXT
    (101) out -> . OUT TEXT out
    (102) out -> . OUT ENDL
    (103) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 98 (out -> OUT VAR .)
    OUT             shift and go to state 127

    out                            shift and go to state 173

state 149

    (100) out -> OUT TEXT .
    (101) out -> OUT TEXT . out
    (98) out -> . OUT VAR
    (99) out -> . OUT VAR out
    (100) out -> . OUT TEXT
    (101) out -> . OUT TEXT out
    (102) out -> . OUT ENDL
    (103) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 100 (out -> OUT TEXT .)
    OUT             shift and go to state 127

    out                            shift and go to state 174

state 150

    (102) out -> OUT ENDL .
    (103) out -> OUT ENDL . out
    (98) out -> . OUT VAR
    (99) out -> . OUT VAR out
    (100) out -> . OUT TEXT
    (101) out -> . OUT TEXT out
    (102) out -> . OUT ENDL
    (103) out -> . OUT ENDL out

    SEMICOLON       reduce using rule 102 (out -> OUT ENDL .)
    OUT             shift and go to state 127

    out                            shift and go to state 175

state 151

    (107) input -> CIN in SEMICOLON .

    IF              reduce using rule 107 (input -> CIN in SEMICOLON .)
    VAR             reduce using rule 107 (input -> CIN in SEMICOLON .)
    COUT            reduce using rule 107 (input -> CIN in SEMICOLON .)
    CIN             reduce using rule 107 (input -> CIN in SEMICOLON .)
    WHILE           reduce using rule 107 (input -> CIN in SEMICOLON .)
    INT             reduce using rule 107 (input -> CIN in SEMICOLON .)
    CHAR            reduce using rule 107 (input -> CIN in SEMICOLON .)
    STRING          reduce using rule 107 (input -> CIN in SEMICOLON .)
    BOOL            reduce using rule 107 (input -> CIN in SEMICOLON .)
    FLOAT           reduce using rule 107 (input -> CIN in SEMICOLON .)
    LONG            reduce using rule 107 (input -> CIN in SEMICOLON .)
    SHORT           reduce using rule 107 (input -> CIN in SEMICOLON .)
    DOUBLE          reduce using rule 107 (input -> CIN in SEMICOLON .)
    FOR             reduce using rule 107 (input -> CIN in SEMICOLON .)
    INT_NUMBER      reduce using rule 107 (input -> CIN in SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 107 (input -> CIN in SEMICOLON .)
    TEXT            reduce using rule 107 (input -> CIN in SEMICOLON .)
    SIGN            reduce using rule 107 (input -> CIN in SEMICOLON .)
    RETURN          reduce using rule 107 (input -> CIN in SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 107 (input -> CIN in SEMICOLON .)
    BREAK           reduce using rule 107 (input -> CIN in SEMICOLON .)


state 152

    (104) in -> IN VAR .
    (105) in -> IN VAR . in
    (104) in -> . IN VAR
    (105) in -> . IN VAR in

    SEMICOLON       reduce using rule 104 (in -> IN VAR .)
    IN              shift and go to state 129

    in                             shift and go to state 176

state 153

    (43) while_loop -> WHILE LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 177


state 154

    (48) for_loop -> for_loop_statement LEFT_BR_CURLY instructions . RIGHT_BR_CURLY
    (49) for_loop -> for_loop_statement LEFT_BR_CURLY instructions . BREAK SEMICOLON RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 178
    BREAK           shift and go to state 179


state 155

    (44) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 180


state 156

    (90) assignment -> VAR EQUAL VAR SEMICOLON .

    IF              reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    TEXT            reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    SIGN            reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)
    BREAK           reduce using rule 90 (assignment -> VAR EQUAL VAR SEMICOLON .)


state 157

    (89) assignment -> VAR EQUAL value SEMICOLON .

    IF              reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    COUT            reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    CIN             reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    TEXT            reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    SIGN            reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)
    BREAK           reduce using rule 89 (assignment -> VAR EQUAL value SEMICOLON .)


state 158

    (109) returning -> RETURN value SEMICOLON .

    RIGHT_BR_CURLY  reduce using rule 109 (returning -> RETURN value SEMICOLON .)


state 159

    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 181


state 160

    (54) comparisons -> comparison conjunction . comparisons
    (53) comparisons -> . comparison
    (54) comparisons -> . comparison conjunction comparisons
    (108) comparison -> . value comparator value
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    comparison                     shift and go to state 142
    comparisons                    shift and go to state 182
    value                          shift and go to state 143
    number                         shift and go to state 53
    get_array_element              shift and go to state 54
    string_value                   shift and go to state 55

state 161

    (73) conjunction -> AND .

    VAR             reduce using rule 73 (conjunction -> AND .)
    INT_NUMBER      reduce using rule 73 (conjunction -> AND .)
    FLOAT_NUMBER    reduce using rule 73 (conjunction -> AND .)
    TEXT            reduce using rule 73 (conjunction -> AND .)
    SIGN            reduce using rule 73 (conjunction -> AND .)


state 162

    (74) conjunction -> OR .

    VAR             reduce using rule 74 (conjunction -> OR .)
    INT_NUMBER      reduce using rule 74 (conjunction -> OR .)
    FLOAT_NUMBER    reduce using rule 74 (conjunction -> OR .)
    TEXT            reduce using rule 74 (conjunction -> OR .)
    SIGN            reduce using rule 74 (conjunction -> OR .)


state 163

    (108) comparison -> value comparator . value
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

    VAR             shift and go to state 140
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

    value                          shift and go to state 183
    number                         shift and go to state 53
    get_array_element              shift and go to state 54
    string_value                   shift and go to state 55

state 164

    (55) comparator -> LESS .

    VAR             reduce using rule 55 (comparator -> LESS .)
    INT_NUMBER      reduce using rule 55 (comparator -> LESS .)
    FLOAT_NUMBER    reduce using rule 55 (comparator -> LESS .)
    TEXT            reduce using rule 55 (comparator -> LESS .)
    SIGN            reduce using rule 55 (comparator -> LESS .)


state 165

    (56) comparator -> LESS_EQUAL .

    VAR             reduce using rule 56 (comparator -> LESS_EQUAL .)
    INT_NUMBER      reduce using rule 56 (comparator -> LESS_EQUAL .)
    FLOAT_NUMBER    reduce using rule 56 (comparator -> LESS_EQUAL .)
    TEXT            reduce using rule 56 (comparator -> LESS_EQUAL .)
    SIGN            reduce using rule 56 (comparator -> LESS_EQUAL .)


state 166

    (57) comparator -> GREATER .

    VAR             reduce using rule 57 (comparator -> GREATER .)
    INT_NUMBER      reduce using rule 57 (comparator -> GREATER .)
    FLOAT_NUMBER    reduce using rule 57 (comparator -> GREATER .)
    TEXT            reduce using rule 57 (comparator -> GREATER .)
    SIGN            reduce using rule 57 (comparator -> GREATER .)


state 167

    (58) comparator -> GREATER_EQUAL .

    VAR             reduce using rule 58 (comparator -> GREATER_EQUAL .)
    INT_NUMBER      reduce using rule 58 (comparator -> GREATER_EQUAL .)
    FLOAT_NUMBER    reduce using rule 58 (comparator -> GREATER_EQUAL .)
    TEXT            reduce using rule 58 (comparator -> GREATER_EQUAL .)
    SIGN            reduce using rule 58 (comparator -> GREATER_EQUAL .)


state 168

    (59) comparator -> EQUAL_EQUAL .

    VAR             reduce using rule 59 (comparator -> EQUAL_EQUAL .)
    INT_NUMBER      reduce using rule 59 (comparator -> EQUAL_EQUAL .)
    FLOAT_NUMBER    reduce using rule 59 (comparator -> EQUAL_EQUAL .)
    TEXT            reduce using rule 59 (comparator -> EQUAL_EQUAL .)
    SIGN            reduce using rule 59 (comparator -> EQUAL_EQUAL .)


state 169

    (60) comparator -> NOT_EQUAL .

    VAR             reduce using rule 60 (comparator -> NOT_EQUAL .)
    INT_NUMBER      reduce using rule 60 (comparator -> NOT_EQUAL .)
    FLOAT_NUMBER    reduce using rule 60 (comparator -> NOT_EQUAL .)
    TEXT            reduce using rule 60 (comparator -> NOT_EQUAL .)
    SIGN            reduce using rule 60 (comparator -> NOT_EQUAL .)


state 170

    (88) operation -> value operator value SEMICOLON .

    IF              reduce using rule 88 (operation -> value operator value SEMICOLON .)
    VAR             reduce using rule 88 (operation -> value operator value SEMICOLON .)
    COUT            reduce using rule 88 (operation -> value operator value SEMICOLON .)
    CIN             reduce using rule 88 (operation -> value operator value SEMICOLON .)
    WHILE           reduce using rule 88 (operation -> value operator value SEMICOLON .)
    INT             reduce using rule 88 (operation -> value operator value SEMICOLON .)
    CHAR            reduce using rule 88 (operation -> value operator value SEMICOLON .)
    STRING          reduce using rule 88 (operation -> value operator value SEMICOLON .)
    BOOL            reduce using rule 88 (operation -> value operator value SEMICOLON .)
    FLOAT           reduce using rule 88 (operation -> value operator value SEMICOLON .)
    LONG            reduce using rule 88 (operation -> value operator value SEMICOLON .)
    SHORT           reduce using rule 88 (operation -> value operator value SEMICOLON .)
    DOUBLE          reduce using rule 88 (operation -> value operator value SEMICOLON .)
    FOR             reduce using rule 88 (operation -> value operator value SEMICOLON .)
    INT_NUMBER      reduce using rule 88 (operation -> value operator value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 88 (operation -> value operator value SEMICOLON .)
    TEXT            reduce using rule 88 (operation -> value operator value SEMICOLON .)
    SIGN            reduce using rule 88 (operation -> value operator value SEMICOLON .)
    RETURN          reduce using rule 88 (operation -> value operator value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 88 (operation -> value operator value SEMICOLON .)
    BREAK           reduce using rule 88 (operation -> value operator value SEMICOLON .)


state 171

    (91) assignment -> get_array_element EQUAL value SEMICOLON .

    IF              reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    VAR             reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    COUT            reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    CIN             reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    WHILE           reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    INT             reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    CHAR            reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    STRING          reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    BOOL            reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    LONG            reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    SHORT           reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    DOUBLE          reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FOR             reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    TEXT            reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    SIGN            reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RETURN          reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)
    BREAK           reduce using rule 91 (assignment -> get_array_element EQUAL value SEMICOLON .)


state 172

    (92) assignment -> get_array_element EQUAL VAR SEMICOLON .

    IF              reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    COUT            reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    CIN             reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    INT             reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    DOUBLE          reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    TEXT            reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    SIGN            reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)
    BREAK           reduce using rule 92 (assignment -> get_array_element EQUAL VAR SEMICOLON .)


state 173

    (99) out -> OUT VAR out .

    SEMICOLON       reduce using rule 99 (out -> OUT VAR out .)


state 174

    (101) out -> OUT TEXT out .

    SEMICOLON       reduce using rule 101 (out -> OUT TEXT out .)


state 175

    (103) out -> OUT ENDL out .

    SEMICOLON       reduce using rule 103 (out -> OUT ENDL out .)


state 176

    (105) in -> IN VAR in .

    SEMICOLON       reduce using rule 105 (in -> IN VAR in .)


state 177

    (43) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 184


state 178

    (48) for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BREAK           reduce using rule 48 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 179

    (49) for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK . SEMICOLON RIGHT_BR_CURLY

    SEMICOLON       shift and go to state 185


state 180

    (44) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    EQUAL           shift and go to state 186


state 181

    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (33) instructions -> . instruction
    (34) instructions -> . instruction instructions
    (35) instruction -> . loop
    (36) instruction -> . if_statement
    (37) instruction -> . assignment
    (38) instruction -> . operation
    (39) instruction -> . empty
    (40) instruction -> . var_declaration
    (41) instruction -> . print
    (42) instruction -> . input
    (50) loop -> . while_loop
    (51) loop -> . for_loop
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (89) assignment -> . VAR EQUAL value SEMICOLON
    (90) assignment -> . VAR EQUAL VAR SEMICOLON
    (91) assignment -> . get_array_element EQUAL value SEMICOLON
    (92) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (86) operation -> . increment
    (87) operation -> . decrement
    (88) operation -> . value operator value SEMICOLON
    (110) empty -> .
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (106) print -> . COUT out SEMICOLON
    (107) input -> . CIN in SEMICOLON
    (43) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (48) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (49) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (83) increment -> . VAR PLUS_PLUS SEMICOLON
    (84) decrement -> . VAR MINUS_MINUS SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (97) array_declaration -> . type get_array_element SEMICOLON
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 88
    RIGHT_BR_CURLY  reduce using rule 110 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    WHILE           shift and go to state 108
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! COUT            [ reduce using rule 110 (empty -> .) ]
  ! CIN             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LONG            [ reduce using rule 110 (empty -> .) ]
  ! SHORT           [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 110 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 110 (empty -> .) ]
  ! TEXT            [ reduce using rule 110 (empty -> .) ]
  ! SIGN            [ reduce using rule 110 (empty -> .) ]

    instructions                   shift and go to state 187
    instruction                    shift and go to state 90
    loop                           shift and go to state 91
    if_statement                   shift and go to state 92
    assignment                     shift and go to state 93
    operation                      shift and go to state 94
    empty                          shift and go to state 95
    var_declaration                shift and go to state 96
    print                          shift and go to state 97
    input                          shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 87
    array_declaration              shift and go to state 70
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 53
    string_value                   shift and go to state 55

state 182

    (54) comparisons -> comparison conjunction comparisons .

    RIGHT_BR        reduce using rule 54 (comparisons -> comparison conjunction comparisons .)


state 183

    (108) comparison -> value comparator value .

    AND             reduce using rule 108 (comparison -> value comparator value .)
    OR              reduce using rule 108 (comparison -> value comparator value .)
    RIGHT_BR        reduce using rule 108 (comparison -> value comparator value .)


state 184

    (43) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (33) instructions -> . instruction
    (34) instructions -> . instruction instructions
    (35) instruction -> . loop
    (36) instruction -> . if_statement
    (37) instruction -> . assignment
    (38) instruction -> . operation
    (39) instruction -> . empty
    (40) instruction -> . var_declaration
    (41) instruction -> . print
    (42) instruction -> . input
    (50) loop -> . while_loop
    (51) loop -> . for_loop
    (52) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (89) assignment -> . VAR EQUAL value SEMICOLON
    (90) assignment -> . VAR EQUAL VAR SEMICOLON
    (91) assignment -> . get_array_element EQUAL value SEMICOLON
    (92) assignment -> . get_array_element EQUAL VAR SEMICOLON
    (86) operation -> . increment
    (87) operation -> . decrement
    (88) operation -> . value operator value SEMICOLON
    (110) empty -> .
    (93) var_declaration -> . type VAR SEMICOLON
    (94) var_declaration -> . array_declaration
    (95) var_declaration -> . type VAR EQUAL value SEMICOLON
    (96) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (106) print -> . COUT out SEMICOLON
    (107) input -> . CIN in SEMICOLON
    (43) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (48) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (49) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY
    (85) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
    (83) increment -> . VAR PLUS_PLUS SEMICOLON
    (84) decrement -> . VAR MINUS_MINUS SEMICOLON
    (79) value -> . number
    (80) value -> . VAR
    (81) value -> . get_array_element
    (82) value -> . string_value
    (65) type -> . INT
    (66) type -> . CHAR
    (67) type -> . STRING
    (68) type -> . BOOL
    (69) type -> . FLOAT
    (70) type -> . LONG
    (71) type -> . SHORT
    (72) type -> . DOUBLE
    (97) array_declaration -> . type get_array_element SEMICOLON
    (44) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (77) number -> . INT_NUMBER
    (78) number -> . FLOAT_NUMBER
    (75) string_value -> . TEXT
    (76) string_value -> . SIGN

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for COUT resolved as shift
  ! shift/reduce conflict for CIN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
  ! shift/reduce conflict for TEXT resolved as shift
  ! shift/reduce conflict for SIGN resolved as shift
    IF              shift and go to state 101
    VAR             shift and go to state 88
    RIGHT_BR_CURLY  reduce using rule 110 (empty -> .)
    COUT            shift and go to state 106
    CIN             shift and go to state 107
    WHILE           shift and go to state 108
    INT             shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    FLOAT           shift and go to state 23
    LONG            shift and go to state 24
    SHORT           shift and go to state 25
    DOUBLE          shift and go to state 26
    FOR             shift and go to state 110
    INT_NUMBER      shift and go to state 56
    FLOAT_NUMBER    shift and go to state 57
    TEXT            shift and go to state 58
    SIGN            shift and go to state 59

  ! IF              [ reduce using rule 110 (empty -> .) ]
  ! VAR             [ reduce using rule 110 (empty -> .) ]
  ! COUT            [ reduce using rule 110 (empty -> .) ]
  ! CIN             [ reduce using rule 110 (empty -> .) ]
  ! WHILE           [ reduce using rule 110 (empty -> .) ]
  ! INT             [ reduce using rule 110 (empty -> .) ]
  ! CHAR            [ reduce using rule 110 (empty -> .) ]
  ! STRING          [ reduce using rule 110 (empty -> .) ]
  ! BOOL            [ reduce using rule 110 (empty -> .) ]
  ! FLOAT           [ reduce using rule 110 (empty -> .) ]
  ! LONG            [ reduce using rule 110 (empty -> .) ]
  ! SHORT           [ reduce using rule 110 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 110 (empty -> .) ]
  ! FOR             [ reduce using rule 110 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 110 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 110 (empty -> .) ]
  ! TEXT            [ reduce using rule 110 (empty -> .) ]
  ! SIGN            [ reduce using rule 110 (empty -> .) ]

    instructions                   shift and go to state 188
    instruction                    shift and go to state 90
    loop                           shift and go to state 91
    if_statement                   shift and go to state 92
    assignment                     shift and go to state 93
    operation                      shift and go to state 94
    empty                          shift and go to state 95
    var_declaration                shift and go to state 96
    print                          shift and go to state 97
    input                          shift and go to state 98
    while_loop                     shift and go to state 99
    for_loop                       shift and go to state 100
    value                          shift and go to state 102
    get_array_element              shift and go to state 103
    increment                      shift and go to state 104
    decrement                      shift and go to state 105
    type                           shift and go to state 87
    array_declaration              shift and go to state 70
    for_loop_statement             shift and go to state 109
    number                         shift and go to state 53
    string_value                   shift and go to state 55

state 185

    (49) for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 189


state 186

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 190


state 187

    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 191


state 188

    (43) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 192


state 189

    (49) for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .

    IF              reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    VAR             reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    COUT            reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    CIN             reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    WHILE           reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    INT             reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    CHAR            reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    STRING          reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    BOOL            reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    LONG            reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    SHORT           reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    FOR             reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    TEXT            reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    SIGN            reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    RETURN          reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)
    BREAK           reduce using rule 49 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY .)


state 190

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 193


state 191

    (52) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BREAK           reduce using rule 52 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 192

    (43) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    COUT            reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CIN             reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    DOUBLE          reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    TEXT            reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SIGN            reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BREAK           reduce using rule 43 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 193

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 194


state 194

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR
    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR
    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    LESS            shift and go to state 195
    LESS_EQUAL      shift and go to state 196
    GREATER         shift and go to state 197
    GREATER_EQUAL   shift and go to state 198


state 195

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 199


state 196

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL . INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 200


state 197

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 201


state 198

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL . INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 202


state 199

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 203


state 200

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER . SEMICOLON VAR PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 204


state 201

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 205


state 202

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER . SEMICOLON VAR MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 206


state 203

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 207


state 204

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON . VAR PLUS_PLUS RIGHT_BR

    VAR             shift and go to state 208


state 205

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 209


state 206

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON . VAR MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 210


state 207

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 211


state 208

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 212


state 209

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 213


state 210

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 214


state 211

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 215


state 212

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 216


state 213

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 217


state 214

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 218


state 215

    (44) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 44 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 216

    (45) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 45 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR .)


state 217

    (46) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 46 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)


state 218

    (47) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 47 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for USING in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for HASH in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for LONG in state 0 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for USING in state 5 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 5 resolved as shift
WARNING: shift/reduce conflict for HASH in state 5 resolved as shift
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for LONG in state 5 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 5 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 5 resolved as shift
WARNING: shift/reduce conflict for USING in state 6 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 6 resolved as shift
WARNING: shift/reduce conflict for HASH in state 6 resolved as shift
WARNING: shift/reduce conflict for VOID in state 6 resolved as shift
WARNING: shift/reduce conflict for INT in state 6 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 6 resolved as shift
WARNING: shift/reduce conflict for STRING in state 6 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 6 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 6 resolved as shift
WARNING: shift/reduce conflict for LONG in state 6 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 6 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 6 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 51 resolved as shift
WARNING: shift/reduce conflict for IF in state 83 resolved as shift
WARNING: shift/reduce conflict for VAR in state 83 resolved as shift
WARNING: shift/reduce conflict for COUT in state 83 resolved as shift
WARNING: shift/reduce conflict for CIN in state 83 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 83 resolved as shift
WARNING: shift/reduce conflict for INT in state 83 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 83 resolved as shift
WARNING: shift/reduce conflict for STRING in state 83 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 83 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 83 resolved as shift
WARNING: shift/reduce conflict for LONG in state 83 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 83 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 83 resolved as shift
WARNING: shift/reduce conflict for FOR in state 83 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 83 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 83 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 83 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 83 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for VAR in state 84 resolved as shift
WARNING: shift/reduce conflict for COUT in state 84 resolved as shift
WARNING: shift/reduce conflict for CIN in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for INT in state 84 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 84 resolved as shift
WARNING: shift/reduce conflict for STRING in state 84 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 84 resolved as shift
WARNING: shift/reduce conflict for LONG in state 84 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 84 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 84 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 84 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 90 resolved as shift
WARNING: shift/reduce conflict for VAR in state 90 resolved as shift
WARNING: shift/reduce conflict for COUT in state 90 resolved as shift
WARNING: shift/reduce conflict for CIN in state 90 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 90 resolved as shift
WARNING: shift/reduce conflict for INT in state 90 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 90 resolved as shift
WARNING: shift/reduce conflict for STRING in state 90 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 90 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 90 resolved as shift
WARNING: shift/reduce conflict for LONG in state 90 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 90 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 90 resolved as shift
WARNING: shift/reduce conflict for FOR in state 90 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 90 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 90 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 90 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 90 resolved as shift
WARNING: shift/reduce conflict for IF in state 131 resolved as shift
WARNING: shift/reduce conflict for VAR in state 131 resolved as shift
WARNING: shift/reduce conflict for COUT in state 131 resolved as shift
WARNING: shift/reduce conflict for CIN in state 131 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 131 resolved as shift
WARNING: shift/reduce conflict for INT in state 131 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 131 resolved as shift
WARNING: shift/reduce conflict for STRING in state 131 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 131 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 131 resolved as shift
WARNING: shift/reduce conflict for LONG in state 131 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 131 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 131 resolved as shift
WARNING: shift/reduce conflict for FOR in state 131 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 131 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 131 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 131 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 131 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 134 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 146 resolved as shift
WARNING: shift/reduce conflict for IF in state 181 resolved as shift
WARNING: shift/reduce conflict for VAR in state 181 resolved as shift
WARNING: shift/reduce conflict for COUT in state 181 resolved as shift
WARNING: shift/reduce conflict for CIN in state 181 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 181 resolved as shift
WARNING: shift/reduce conflict for INT in state 181 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 181 resolved as shift
WARNING: shift/reduce conflict for STRING in state 181 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 181 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 181 resolved as shift
WARNING: shift/reduce conflict for LONG in state 181 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 181 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 181 resolved as shift
WARNING: shift/reduce conflict for FOR in state 181 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 181 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 181 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 181 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 181 resolved as shift
WARNING: shift/reduce conflict for IF in state 184 resolved as shift
WARNING: shift/reduce conflict for VAR in state 184 resolved as shift
WARNING: shift/reduce conflict for COUT in state 184 resolved as shift
WARNING: shift/reduce conflict for CIN in state 184 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 184 resolved as shift
WARNING: shift/reduce conflict for INT in state 184 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 184 resolved as shift
WARNING: shift/reduce conflict for STRING in state 184 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 184 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 184 resolved as shift
WARNING: shift/reduce conflict for LONG in state 184 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 184 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 184 resolved as shift
WARNING: shift/reduce conflict for FOR in state 184 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 184 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 184 resolved as shift
WARNING: shift/reduce conflict for TEXT in state 184 resolved as shift
WARNING: shift/reduce conflict for SIGN in state 184 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> empty)
WARNING: rejected rule (program_components -> empty) in state 4
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> empty)
WARNING: rejected rule (program_component -> empty) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (program_components -> program_component)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 11 resolved using rule (program_component -> array_declaration)
WARNING: rejected rule (var_declaration -> array_declaration) in state 11
WARNING: reduce/reduce conflict in state 28 resolved using rule (program_components -> empty)
WARNING: rejected rule (program_component -> empty) in state 28
WARNING: reduce/reduce conflict in state 66 resolved using rule (class_declarations -> class_declaration)
WARNING: rejected rule (empty -> <empty>) in state 66
WARNING: reduce/reduce conflict in state 90 resolved using rule (instructions -> instruction)
WARNING: rejected rule (empty -> <empty>) in state 90
