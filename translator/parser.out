Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CIN
    COMMENT
    COUT
    DOUBLE
    ELSE
    ENDL
    FALSE
    ID
    IN
    OUT
    TRUE

Grammar

Rule 0     S' -> start_symbol
Rule 1     start_symbol -> program
Rule 2     program -> program_components
Rule 3     program -> empty
Rule 4     program_components -> program_component
Rule 5     program_components -> program_component program_components
Rule 6     program_components -> empty
Rule 7     program_component -> function_definition
Rule 8     program_component -> class_definition
Rule 9     program_component -> including
Rule 10    program_component -> var_declaration
Rule 11    program_component -> array_declaration
Rule 12    program_component -> empty
Rule 13    using_namespace_std -> USING NAMESPACE STD SEMICOLON
Rule 14    including -> HASH INCLUDE LIBRARY
Rule 15    function_definition -> type_function_definition
Rule 16    function_definition -> void_function_definition
Rule 17    type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
Rule 18    void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 19    function_var_declaration -> type VAR
Rule 20    function_var_declaration -> type VAR COMMA function_var_declaration
Rule 21    function_var_declaration -> empty
Rule 22    class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON
Rule 23    protection_level -> PUBLIC
Rule 24    protection_level -> PRIVATE
Rule 25    protection_level -> PROTECTED
Rule 26    class_declaration -> var_declaration
Rule 27    class_declaration -> function_definition
Rule 28    class_declarations -> class_declaration
Rule 29    class_declarations -> class_declaration class_declarations
Rule 30    instructions -> instruction
Rule 31    instructions -> instruction instructions
Rule 32    instruction -> loop
Rule 33    instruction -> if_statement
Rule 34    instruction -> assignment
Rule 35    instruction -> operation
Rule 36    instruction -> empty
Rule 37    instruction -> var_declaration
Rule 38    while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 39    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
Rule 40    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
Rule 41    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
Rule 42    for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
Rule 43    for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 44    loop -> while_loop
Rule 45    loop -> for_loop
Rule 46    if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
Rule 47    comparisons -> comparison
Rule 48    comparisons -> comparison conjunction comparisons
Rule 49    comparator -> LESS
Rule 50    comparator -> LESS_EQUAL
Rule 51    comparator -> GREATER
Rule 52    comparator -> GREATER_EQUAL
Rule 53    comparator -> EQUAL_EQUAL
Rule 54    comparator -> NOT_EQUAL
Rule 55    operator -> PLUS
Rule 56    operator -> MINUS
Rule 57    operator -> MULTIPLY
Rule 58    operator -> DIVIDE
Rule 59    type -> INT
Rule 60    type -> CHAR
Rule 61    type -> STRING
Rule 62    type -> BOOL
Rule 63    type -> FLOAT
Rule 64    type -> LONG
Rule 65    type -> SHORT
Rule 66    conjunction -> AND
Rule 67    conjunction -> OR
Rule 68    string_value -> TEXT
Rule 69    string_value -> SIGN
Rule 70    number -> INT_NUMBER
Rule 71    number -> FLOAT_NUMBER
Rule 72    value -> number
Rule 73    value -> value
Rule 74    increment -> VAR PLUS_PLUS SEMICOLON
Rule 75    decrement -> VAR MINUS_MINUS SEMICOLON
Rule 76    get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED
Rule 77    operation -> increment
Rule 78    operation -> decrement
Rule 79    operation -> value operator value SEMICOLON
Rule 80    assignment -> VAR EQUAL value SEMICOLON
Rule 81    assignment -> VAR EQUAL VAR SEMICOLON
Rule 82    var_declaration -> type VAR SEMICOLON
Rule 83    var_declaration -> array_declaration
Rule 84    var_declaration -> type VAR EQUAL value SEMICOLON
Rule 85    var_declaration -> type VAR EQUAL VAR SEMICOLON
Rule 86    array_declaration -> type get_array_element SEMICOLON
Rule 87    comparison -> value comparator value
Rule 88    returning -> RETURN value SEMICOLON
Rule 89    empty -> <empty>

Terminals, with rules where they appear

AND                  : 66
BOOL                 : 62
BREAK                : 
CHAR                 : 60
CIN                  : 
CLASS                : 22
COLON                : 22
COMMA                : 20
COMMENT              : 
COUT                 : 
DIVIDE               : 58
DOUBLE               : 
ELSE                 : 
ENDL                 : 
EQUAL                : 39 40 41 42 80 81 84 85
EQUAL_EQUAL          : 53
FALSE                : 
FLOAT                : 63
FLOAT_NUMBER         : 71
FOR                  : 39 40 41 42
GREATER              : 41 51
GREATER_EQUAL        : 42 52
HASH                 : 14
ID                   : 
IF                   : 46
IN                   : 
INCLUDE              : 14
INT                  : 39 40 41 42 59
INT_NUMBER           : 39 39 40 40 41 41 42 42 70 76
LEFT_BR              : 17 18 38 39 40 41 42 46
LEFT_BR_CURLY        : 17 18 22 38 43 46
LEFT_BR_SQUARED      : 76
LESS                 : 39 49
LESS_EQUAL           : 40 50
LIBRARY              : 14
LONG                 : 64
MINUS                : 56
MINUS_MINUS          : 41 42 75
MULTIPLY             : 57
NAMESPACE            : 13
NOT_EQUAL            : 54
OR                   : 67
OUT                  : 
PLUS                 : 55
PLUS_PLUS            : 39 40 74
PRIVATE              : 24
PROTECTED            : 25
PUBLIC               : 23
RETURN               : 88
RIGHT_BR             : 17 18 38 39 40 41 42 46
RIGHT_BR_CURLY       : 17 18 22 38 43 46
RIGHT_BR_SQUARED     : 76
SEMICOLON            : 13 22 39 39 40 40 41 41 42 42 74 75 79 80 81 82 84 85 86 88
SHORT                : 65
SIGN                 : 69
STD                  : 13
STRING               : 22 61
TEXT                 : 68
TRUE                 : 
USING                : 13
VAR                  : 17 18 19 20 39 39 40 40 41 41 42 42 74 75 76 80 81 81 82 84 85 85
VOID                 : 18
WHILE                : 38
error                : 

Nonterminals, with rules where they appear

array_declaration    : 11 83
assignment           : 34
class_declaration    : 28 29
class_declarations   : 22 29
class_definition     : 8
comparator           : 87
comparison           : 47 48
comparisons          : 38 46 48
conjunction          : 48
decrement            : 78
empty                : 3 6 12 21 36
for_loop             : 45
for_loop_statement   : 43
function_definition  : 7 27
function_var_declaration : 17 18 20
get_array_element    : 86
if_statement         : 33
including            : 9
increment            : 77
instruction          : 30 31
instructions         : 17 18 31 38 43 46
loop                 : 32
number               : 72
operation            : 35
operator             : 79
program              : 1
program_component    : 4 5
program_components   : 2 5
protection_level     : 22
returning            : 17
start_symbol         : 0
string_value         : 
type                 : 17 19 20 82 84 85 86
type_function_definition : 15
using_namespace_std  : 
value                : 73 79 79 80 84 87 87 88
var_declaration      : 10 26 37
void_function_definition : 16
while_loop           : 44

Parsing method: LALR

state 0

    (0) S' -> . start_symbol
    (1) start_symbol -> . program
    (2) program -> . program_components
    (3) program -> . empty
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_components -> . empty
    (89) empty -> .
    (7) program_component -> . function_definition
    (8) program_component -> . class_definition
    (9) program_component -> . including
    (10) program_component -> . var_declaration
    (11) program_component -> . array_declaration
    (12) program_component -> . empty
    (15) function_definition -> . type_function_definition
    (16) function_definition -> . void_function_definition
    (22) class_definition -> . CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON
    (14) including -> . HASH INCLUDE LIBRARY
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (86) array_declaration -> . type get_array_element SEMICOLON
    (17) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (18) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
    $end            reduce using rule 89 (empty -> .)
    CLASS           shift and go to state 13
    HASH            shift and go to state 15
    VOID            shift and go to state 17
    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23

  ! CLASS           [ reduce using rule 89 (empty -> .) ]
  ! HASH            [ reduce using rule 89 (empty -> .) ]
  ! VOID            [ reduce using rule 89 (empty -> .) ]
  ! INT             [ reduce using rule 89 (empty -> .) ]
  ! CHAR            [ reduce using rule 89 (empty -> .) ]
  ! STRING          [ reduce using rule 89 (empty -> .) ]
  ! BOOL            [ reduce using rule 89 (empty -> .) ]
  ! FLOAT           [ reduce using rule 89 (empty -> .) ]
  ! LONG            [ reduce using rule 89 (empty -> .) ]
  ! SHORT           [ reduce using rule 89 (empty -> .) ]

    start_symbol                   shift and go to state 1
    program                        shift and go to state 2
    program_components             shift and go to state 3
    empty                          shift and go to state 4
    program_component              shift and go to state 5
    function_definition            shift and go to state 6
    class_definition               shift and go to state 7
    including                      shift and go to state 8
    var_declaration                shift and go to state 9
    array_declaration              shift and go to state 10
    type_function_definition       shift and go to state 11
    void_function_definition       shift and go to state 12
    type                           shift and go to state 16

state 1

    (0) S' -> start_symbol .



state 2

    (1) start_symbol -> program .

    $end            reduce using rule 1 (start_symbol -> program .)


state 3

    (2) program -> program_components .

    $end            reduce using rule 2 (program -> program_components .)


state 4

    (3) program -> empty .
    (6) program_components -> empty .
    (12) program_component -> empty .

  ! reduce/reduce conflict for $end resolved using rule 3 (program -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 3 (program -> empty .)
    $end            reduce using rule 3 (program -> empty .)
    CLASS           reduce using rule 12 (program_component -> empty .)
    HASH            reduce using rule 12 (program_component -> empty .)
    VOID            reduce using rule 12 (program_component -> empty .)
    INT             reduce using rule 12 (program_component -> empty .)
    CHAR            reduce using rule 12 (program_component -> empty .)
    STRING          reduce using rule 12 (program_component -> empty .)
    BOOL            reduce using rule 12 (program_component -> empty .)
    FLOAT           reduce using rule 12 (program_component -> empty .)
    LONG            reduce using rule 12 (program_component -> empty .)
    SHORT           reduce using rule 12 (program_component -> empty .)

  ! $end            [ reduce using rule 6 (program_components -> empty .) ]
  ! $end            [ reduce using rule 12 (program_component -> empty .) ]


state 5

    (4) program_components -> program_component .
    (5) program_components -> program_component . program_components
    (4) program_components -> . program_component
    (5) program_components -> . program_component program_components
    (6) program_components -> . empty
    (7) program_component -> . function_definition
    (8) program_component -> . class_definition
    (9) program_component -> . including
    (10) program_component -> . var_declaration
    (11) program_component -> . array_declaration
    (12) program_component -> . empty
    (89) empty -> .
    (15) function_definition -> . type_function_definition
    (16) function_definition -> . void_function_definition
    (22) class_definition -> . CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON
    (14) including -> . HASH INCLUDE LIBRARY
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (86) array_declaration -> . type get_array_element SEMICOLON
    (17) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (18) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT

  ! reduce/reduce conflict for $end resolved using rule 4 (program_components -> program_component .)
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for HASH resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
    $end            reduce using rule 4 (program_components -> program_component .)
    CLASS           shift and go to state 13
    HASH            shift and go to state 15
    VOID            shift and go to state 17
    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23

  ! $end            [ reduce using rule 89 (empty -> .) ]
  ! CLASS           [ reduce using rule 89 (empty -> .) ]
  ! HASH            [ reduce using rule 89 (empty -> .) ]
  ! VOID            [ reduce using rule 89 (empty -> .) ]
  ! INT             [ reduce using rule 89 (empty -> .) ]
  ! CHAR            [ reduce using rule 89 (empty -> .) ]
  ! STRING          [ reduce using rule 89 (empty -> .) ]
  ! BOOL            [ reduce using rule 89 (empty -> .) ]
  ! FLOAT           [ reduce using rule 89 (empty -> .) ]
  ! LONG            [ reduce using rule 89 (empty -> .) ]
  ! SHORT           [ reduce using rule 89 (empty -> .) ]

    program_component              shift and go to state 5
    program_components             shift and go to state 24
    empty                          shift and go to state 25
    function_definition            shift and go to state 6
    class_definition               shift and go to state 7
    including                      shift and go to state 8
    var_declaration                shift and go to state 9
    array_declaration              shift and go to state 10
    type_function_definition       shift and go to state 11
    void_function_definition       shift and go to state 12
    type                           shift and go to state 16

state 6

    (7) program_component -> function_definition .

    CLASS           reduce using rule 7 (program_component -> function_definition .)
    HASH            reduce using rule 7 (program_component -> function_definition .)
    VOID            reduce using rule 7 (program_component -> function_definition .)
    INT             reduce using rule 7 (program_component -> function_definition .)
    CHAR            reduce using rule 7 (program_component -> function_definition .)
    STRING          reduce using rule 7 (program_component -> function_definition .)
    BOOL            reduce using rule 7 (program_component -> function_definition .)
    FLOAT           reduce using rule 7 (program_component -> function_definition .)
    LONG            reduce using rule 7 (program_component -> function_definition .)
    SHORT           reduce using rule 7 (program_component -> function_definition .)
    $end            reduce using rule 7 (program_component -> function_definition .)


state 7

    (8) program_component -> class_definition .

    CLASS           reduce using rule 8 (program_component -> class_definition .)
    HASH            reduce using rule 8 (program_component -> class_definition .)
    VOID            reduce using rule 8 (program_component -> class_definition .)
    INT             reduce using rule 8 (program_component -> class_definition .)
    CHAR            reduce using rule 8 (program_component -> class_definition .)
    STRING          reduce using rule 8 (program_component -> class_definition .)
    BOOL            reduce using rule 8 (program_component -> class_definition .)
    FLOAT           reduce using rule 8 (program_component -> class_definition .)
    LONG            reduce using rule 8 (program_component -> class_definition .)
    SHORT           reduce using rule 8 (program_component -> class_definition .)
    $end            reduce using rule 8 (program_component -> class_definition .)


state 8

    (9) program_component -> including .

    CLASS           reduce using rule 9 (program_component -> including .)
    HASH            reduce using rule 9 (program_component -> including .)
    VOID            reduce using rule 9 (program_component -> including .)
    INT             reduce using rule 9 (program_component -> including .)
    CHAR            reduce using rule 9 (program_component -> including .)
    STRING          reduce using rule 9 (program_component -> including .)
    BOOL            reduce using rule 9 (program_component -> including .)
    FLOAT           reduce using rule 9 (program_component -> including .)
    LONG            reduce using rule 9 (program_component -> including .)
    SHORT           reduce using rule 9 (program_component -> including .)
    $end            reduce using rule 9 (program_component -> including .)


state 9

    (10) program_component -> var_declaration .

    CLASS           reduce using rule 10 (program_component -> var_declaration .)
    HASH            reduce using rule 10 (program_component -> var_declaration .)
    VOID            reduce using rule 10 (program_component -> var_declaration .)
    INT             reduce using rule 10 (program_component -> var_declaration .)
    CHAR            reduce using rule 10 (program_component -> var_declaration .)
    STRING          reduce using rule 10 (program_component -> var_declaration .)
    BOOL            reduce using rule 10 (program_component -> var_declaration .)
    FLOAT           reduce using rule 10 (program_component -> var_declaration .)
    LONG            reduce using rule 10 (program_component -> var_declaration .)
    SHORT           reduce using rule 10 (program_component -> var_declaration .)
    $end            reduce using rule 10 (program_component -> var_declaration .)


state 10

    (11) program_component -> array_declaration .
    (83) var_declaration -> array_declaration .

  ! reduce/reduce conflict for CLASS resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for HASH resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for VOID resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for INT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for CHAR resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for STRING resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for BOOL resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for FLOAT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for LONG resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for SHORT resolved using rule 11 (program_component -> array_declaration .)
  ! reduce/reduce conflict for $end resolved using rule 11 (program_component -> array_declaration .)
    CLASS           reduce using rule 11 (program_component -> array_declaration .)
    HASH            reduce using rule 11 (program_component -> array_declaration .)
    VOID            reduce using rule 11 (program_component -> array_declaration .)
    INT             reduce using rule 11 (program_component -> array_declaration .)
    CHAR            reduce using rule 11 (program_component -> array_declaration .)
    STRING          reduce using rule 11 (program_component -> array_declaration .)
    BOOL            reduce using rule 11 (program_component -> array_declaration .)
    FLOAT           reduce using rule 11 (program_component -> array_declaration .)
    LONG            reduce using rule 11 (program_component -> array_declaration .)
    SHORT           reduce using rule 11 (program_component -> array_declaration .)
    $end            reduce using rule 11 (program_component -> array_declaration .)

  ! CLASS           [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! HASH            [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! VOID            [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! INT             [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! CHAR            [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! STRING          [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! BOOL            [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! FLOAT           [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! LONG            [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! SHORT           [ reduce using rule 83 (var_declaration -> array_declaration .) ]
  ! $end            [ reduce using rule 83 (var_declaration -> array_declaration .) ]


state 11

    (15) function_definition -> type_function_definition .

    CLASS           reduce using rule 15 (function_definition -> type_function_definition .)
    HASH            reduce using rule 15 (function_definition -> type_function_definition .)
    VOID            reduce using rule 15 (function_definition -> type_function_definition .)
    INT             reduce using rule 15 (function_definition -> type_function_definition .)
    CHAR            reduce using rule 15 (function_definition -> type_function_definition .)
    STRING          reduce using rule 15 (function_definition -> type_function_definition .)
    BOOL            reduce using rule 15 (function_definition -> type_function_definition .)
    FLOAT           reduce using rule 15 (function_definition -> type_function_definition .)
    LONG            reduce using rule 15 (function_definition -> type_function_definition .)
    SHORT           reduce using rule 15 (function_definition -> type_function_definition .)
    $end            reduce using rule 15 (function_definition -> type_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 15 (function_definition -> type_function_definition .)


state 12

    (16) function_definition -> void_function_definition .

    CLASS           reduce using rule 16 (function_definition -> void_function_definition .)
    HASH            reduce using rule 16 (function_definition -> void_function_definition .)
    VOID            reduce using rule 16 (function_definition -> void_function_definition .)
    INT             reduce using rule 16 (function_definition -> void_function_definition .)
    CHAR            reduce using rule 16 (function_definition -> void_function_definition .)
    STRING          reduce using rule 16 (function_definition -> void_function_definition .)
    BOOL            reduce using rule 16 (function_definition -> void_function_definition .)
    FLOAT           reduce using rule 16 (function_definition -> void_function_definition .)
    LONG            reduce using rule 16 (function_definition -> void_function_definition .)
    SHORT           reduce using rule 16 (function_definition -> void_function_definition .)
    $end            reduce using rule 16 (function_definition -> void_function_definition .)
    RIGHT_BR_CURLY  reduce using rule 16 (function_definition -> void_function_definition .)


state 13

    (22) class_definition -> CLASS . STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON

    STRING          shift and go to state 26


state 14

    (61) type -> STRING .

    VAR             reduce using rule 61 (type -> STRING .)


state 15

    (14) including -> HASH . INCLUDE LIBRARY

    INCLUDE         shift and go to state 27


state 16

    (82) var_declaration -> type . VAR SEMICOLON
    (84) var_declaration -> type . VAR EQUAL value SEMICOLON
    (85) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (86) array_declaration -> type . get_array_element SEMICOLON
    (17) type_function_definition -> type . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (76) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    VAR             shift and go to state 28

    get_array_element              shift and go to state 29

state 17

    (18) void_function_definition -> VOID . VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    VAR             shift and go to state 30


state 18

    (59) type -> INT .

    VAR             reduce using rule 59 (type -> INT .)


state 19

    (60) type -> CHAR .

    VAR             reduce using rule 60 (type -> CHAR .)


state 20

    (62) type -> BOOL .

    VAR             reduce using rule 62 (type -> BOOL .)


state 21

    (63) type -> FLOAT .

    VAR             reduce using rule 63 (type -> FLOAT .)


state 22

    (64) type -> LONG .

    VAR             reduce using rule 64 (type -> LONG .)


state 23

    (65) type -> SHORT .

    VAR             reduce using rule 65 (type -> SHORT .)


state 24

    (5) program_components -> program_component program_components .

    $end            reduce using rule 5 (program_components -> program_component program_components .)


state 25

    (6) program_components -> empty .
    (12) program_component -> empty .

  ! reduce/reduce conflict for $end resolved using rule 6 (program_components -> empty .)
    $end            reduce using rule 6 (program_components -> empty .)
    CLASS           reduce using rule 12 (program_component -> empty .)
    HASH            reduce using rule 12 (program_component -> empty .)
    VOID            reduce using rule 12 (program_component -> empty .)
    INT             reduce using rule 12 (program_component -> empty .)
    CHAR            reduce using rule 12 (program_component -> empty .)
    STRING          reduce using rule 12 (program_component -> empty .)
    BOOL            reduce using rule 12 (program_component -> empty .)
    FLOAT           reduce using rule 12 (program_component -> empty .)
    LONG            reduce using rule 12 (program_component -> empty .)
    SHORT           reduce using rule 12 (program_component -> empty .)

  ! $end            [ reduce using rule 12 (program_component -> empty .) ]


state 26

    (22) class_definition -> CLASS STRING . LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON

    LEFT_BR_CURLY   shift and go to state 31


state 27

    (14) including -> HASH INCLUDE . LIBRARY

    LIBRARY         shift and go to state 32


state 28

    (82) var_declaration -> type VAR . SEMICOLON
    (84) var_declaration -> type VAR . EQUAL value SEMICOLON
    (85) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (17) type_function_definition -> type VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (76) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 33
    EQUAL           shift and go to state 34
    LEFT_BR         shift and go to state 35
    LEFT_BR_SQUARED shift and go to state 36


state 29

    (86) array_declaration -> type get_array_element . SEMICOLON

    SEMICOLON       shift and go to state 37


state 30

    (18) void_function_definition -> VOID VAR . LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 38


state 31

    (22) class_definition -> CLASS STRING LEFT_BR_CURLY . protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON
    (23) protection_level -> . PUBLIC
    (24) protection_level -> . PRIVATE
    (25) protection_level -> . PROTECTED

    PUBLIC          shift and go to state 40
    PRIVATE         shift and go to state 41
    PROTECTED       shift and go to state 42

    protection_level               shift and go to state 39

state 32

    (14) including -> HASH INCLUDE LIBRARY .

    CLASS           reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    HASH            reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    VOID            reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    INT             reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    CHAR            reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    STRING          reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    BOOL            reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    FLOAT           reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    LONG            reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    SHORT           reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)
    $end            reduce using rule 14 (including -> HASH INCLUDE LIBRARY .)


state 33

    (82) var_declaration -> type VAR SEMICOLON .

    CLASS           reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    HASH            reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    VOID            reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    INT             reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    CHAR            reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    STRING          reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    BOOL            reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    FLOAT           reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    LONG            reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    SHORT           reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    $end            reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    IF              reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    VAR             reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    WHILE           reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    FOR             reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)
    RETURN          reduce using rule 82 (var_declaration -> type VAR SEMICOLON .)


state 34

    (84) var_declaration -> type VAR EQUAL . value SEMICOLON
    (85) var_declaration -> type VAR EQUAL . VAR SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

    VAR             shift and go to state 43
    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

    value                          shift and go to state 44
    number                         shift and go to state 45

state 35

    (17) type_function_definition -> type VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (19) function_var_declaration -> . type VAR
    (20) function_var_declaration -> . type VAR COMMA function_var_declaration
    (21) function_var_declaration -> . empty
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (89) empty -> .

    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    RIGHT_BR        reduce using rule 89 (empty -> .)

    type                           shift and go to state 48
    function_var_declaration       shift and go to state 49
    empty                          shift and go to state 50

state 36

    (76) get_array_element -> VAR LEFT_BR_SQUARED . INT_NUMBER RIGHT_BR_SQUARED

    INT_NUMBER      shift and go to state 51


state 37

    (86) array_declaration -> type get_array_element SEMICOLON .

    CLASS           reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    HASH            reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    VOID            reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    INT             reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    CHAR            reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    STRING          reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    BOOL            reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT           reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    LONG            reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    SHORT           reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    $end            reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    IF              reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    VAR             reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    WHILE           reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    FOR             reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    INT_NUMBER      reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)
    RETURN          reduce using rule 86 (array_declaration -> type get_array_element SEMICOLON .)


state 38

    (18) void_function_definition -> VOID VAR LEFT_BR . function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (19) function_var_declaration -> . type VAR
    (20) function_var_declaration -> . type VAR COMMA function_var_declaration
    (21) function_var_declaration -> . empty
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (89) empty -> .

    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    RIGHT_BR        reduce using rule 89 (empty -> .)

    function_var_declaration       shift and go to state 52
    type                           shift and go to state 48
    empty                          shift and go to state 50

state 39

    (22) class_definition -> CLASS STRING LEFT_BR_CURLY protection_level . COLON class_declarations RIGHT_BR_CURLY SEMICOLON

    COLON           shift and go to state 53


state 40

    (23) protection_level -> PUBLIC .

    COLON           reduce using rule 23 (protection_level -> PUBLIC .)


state 41

    (24) protection_level -> PRIVATE .

    COLON           reduce using rule 24 (protection_level -> PRIVATE .)


state 42

    (25) protection_level -> PROTECTED .

    COLON           reduce using rule 25 (protection_level -> PROTECTED .)


state 43

    (85) var_declaration -> type VAR EQUAL VAR . SEMICOLON

    SEMICOLON       shift and go to state 54


state 44

    (84) var_declaration -> type VAR EQUAL value . SEMICOLON
    (73) value -> value .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 55

  ! SEMICOLON       [ reduce using rule 73 (value -> value .) ]


state 45

    (72) value -> number .

    SEMICOLON       reduce using rule 72 (value -> number .)
    PLUS            reduce using rule 72 (value -> number .)
    MINUS           reduce using rule 72 (value -> number .)
    MULTIPLY        reduce using rule 72 (value -> number .)
    DIVIDE          reduce using rule 72 (value -> number .)
    LESS            reduce using rule 72 (value -> number .)
    LESS_EQUAL      reduce using rule 72 (value -> number .)
    GREATER         reduce using rule 72 (value -> number .)
    GREATER_EQUAL   reduce using rule 72 (value -> number .)
    EQUAL_EQUAL     reduce using rule 72 (value -> number .)
    NOT_EQUAL       reduce using rule 72 (value -> number .)
    AND             reduce using rule 72 (value -> number .)
    OR              reduce using rule 72 (value -> number .)
    RIGHT_BR        reduce using rule 72 (value -> number .)


state 46

    (70) number -> INT_NUMBER .

    SEMICOLON       reduce using rule 70 (number -> INT_NUMBER .)
    PLUS            reduce using rule 70 (number -> INT_NUMBER .)
    MINUS           reduce using rule 70 (number -> INT_NUMBER .)
    MULTIPLY        reduce using rule 70 (number -> INT_NUMBER .)
    DIVIDE          reduce using rule 70 (number -> INT_NUMBER .)
    LESS            reduce using rule 70 (number -> INT_NUMBER .)
    LESS_EQUAL      reduce using rule 70 (number -> INT_NUMBER .)
    GREATER         reduce using rule 70 (number -> INT_NUMBER .)
    GREATER_EQUAL   reduce using rule 70 (number -> INT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 70 (number -> INT_NUMBER .)
    NOT_EQUAL       reduce using rule 70 (number -> INT_NUMBER .)
    AND             reduce using rule 70 (number -> INT_NUMBER .)
    OR              reduce using rule 70 (number -> INT_NUMBER .)
    RIGHT_BR        reduce using rule 70 (number -> INT_NUMBER .)


state 47

    (71) number -> FLOAT_NUMBER .

    SEMICOLON       reduce using rule 71 (number -> FLOAT_NUMBER .)
    PLUS            reduce using rule 71 (number -> FLOAT_NUMBER .)
    MINUS           reduce using rule 71 (number -> FLOAT_NUMBER .)
    MULTIPLY        reduce using rule 71 (number -> FLOAT_NUMBER .)
    DIVIDE          reduce using rule 71 (number -> FLOAT_NUMBER .)
    LESS            reduce using rule 71 (number -> FLOAT_NUMBER .)
    LESS_EQUAL      reduce using rule 71 (number -> FLOAT_NUMBER .)
    GREATER         reduce using rule 71 (number -> FLOAT_NUMBER .)
    GREATER_EQUAL   reduce using rule 71 (number -> FLOAT_NUMBER .)
    EQUAL_EQUAL     reduce using rule 71 (number -> FLOAT_NUMBER .)
    NOT_EQUAL       reduce using rule 71 (number -> FLOAT_NUMBER .)
    AND             reduce using rule 71 (number -> FLOAT_NUMBER .)
    OR              reduce using rule 71 (number -> FLOAT_NUMBER .)
    RIGHT_BR        reduce using rule 71 (number -> FLOAT_NUMBER .)


state 48

    (19) function_var_declaration -> type . VAR
    (20) function_var_declaration -> type . VAR COMMA function_var_declaration

    VAR             shift and go to state 56


state 49

    (17) type_function_definition -> type VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 57


state 50

    (21) function_var_declaration -> empty .

    RIGHT_BR        reduce using rule 21 (function_var_declaration -> empty .)


state 51

    (76) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER . RIGHT_BR_SQUARED

    RIGHT_BR_SQUARED shift and go to state 58


state 52

    (18) void_function_definition -> VOID VAR LEFT_BR function_var_declaration . RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 59


state 53

    (22) class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON . class_declarations RIGHT_BR_CURLY SEMICOLON
    (28) class_declarations -> . class_declaration
    (29) class_declarations -> . class_declaration class_declarations
    (26) class_declaration -> . var_declaration
    (27) class_declaration -> . function_definition
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (15) function_definition -> . type_function_definition
    (16) function_definition -> . void_function_definition
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (86) array_declaration -> . type get_array_element SEMICOLON
    (17) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (18) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    VOID            shift and go to state 17

    class_declarations             shift and go to state 60
    class_declaration              shift and go to state 61
    var_declaration                shift and go to state 62
    function_definition            shift and go to state 63
    type                           shift and go to state 16
    array_declaration              shift and go to state 64
    type_function_definition       shift and go to state 11
    void_function_definition       shift and go to state 12

state 54

    (85) var_declaration -> type VAR EQUAL VAR SEMICOLON .

    CLASS           reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    HASH            reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VOID            reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    $end            reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    IF              reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 85 (var_declaration -> type VAR EQUAL VAR SEMICOLON .)


state 55

    (84) var_declaration -> type VAR EQUAL value SEMICOLON .

    CLASS           reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    HASH            reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VOID            reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    $end            reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    IF              reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 84 (var_declaration -> type VAR EQUAL value SEMICOLON .)


state 56

    (19) function_var_declaration -> type VAR .
    (20) function_var_declaration -> type VAR . COMMA function_var_declaration

    RIGHT_BR        reduce using rule 19 (function_var_declaration -> type VAR .)
    COMMA           shift and go to state 65


state 57

    (17) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 66


state 58

    (76) get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .

    SEMICOLON       reduce using rule 76 (get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED .)


state 59

    (18) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 67


state 60

    (22) class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations . RIGHT_BR_CURLY SEMICOLON

    RIGHT_BR_CURLY  shift and go to state 68


state 61

    (28) class_declarations -> class_declaration .
    (29) class_declarations -> class_declaration . class_declarations
    (28) class_declarations -> . class_declaration
    (29) class_declarations -> . class_declaration class_declarations
    (26) class_declaration -> . var_declaration
    (27) class_declaration -> . function_definition
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (15) function_definition -> . type_function_definition
    (16) function_definition -> . void_function_definition
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (86) array_declaration -> . type get_array_element SEMICOLON
    (17) type_function_definition -> . type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY
    (18) void_function_definition -> . VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR_CURLY  reduce using rule 28 (class_declarations -> class_declaration .)
    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    VOID            shift and go to state 17

    class_declaration              shift and go to state 61
    class_declarations             shift and go to state 69
    var_declaration                shift and go to state 62
    function_definition            shift and go to state 63
    type                           shift and go to state 16
    array_declaration              shift and go to state 64
    type_function_definition       shift and go to state 11
    void_function_definition       shift and go to state 12

state 62

    (26) class_declaration -> var_declaration .

    INT             reduce using rule 26 (class_declaration -> var_declaration .)
    CHAR            reduce using rule 26 (class_declaration -> var_declaration .)
    STRING          reduce using rule 26 (class_declaration -> var_declaration .)
    BOOL            reduce using rule 26 (class_declaration -> var_declaration .)
    FLOAT           reduce using rule 26 (class_declaration -> var_declaration .)
    LONG            reduce using rule 26 (class_declaration -> var_declaration .)
    SHORT           reduce using rule 26 (class_declaration -> var_declaration .)
    VOID            reduce using rule 26 (class_declaration -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 26 (class_declaration -> var_declaration .)


state 63

    (27) class_declaration -> function_definition .

    INT             reduce using rule 27 (class_declaration -> function_definition .)
    CHAR            reduce using rule 27 (class_declaration -> function_definition .)
    STRING          reduce using rule 27 (class_declaration -> function_definition .)
    BOOL            reduce using rule 27 (class_declaration -> function_definition .)
    FLOAT           reduce using rule 27 (class_declaration -> function_definition .)
    LONG            reduce using rule 27 (class_declaration -> function_definition .)
    SHORT           reduce using rule 27 (class_declaration -> function_definition .)
    VOID            reduce using rule 27 (class_declaration -> function_definition .)
    RIGHT_BR_CURLY  reduce using rule 27 (class_declaration -> function_definition .)


state 64

    (83) var_declaration -> array_declaration .

    INT             reduce using rule 83 (var_declaration -> array_declaration .)
    CHAR            reduce using rule 83 (var_declaration -> array_declaration .)
    STRING          reduce using rule 83 (var_declaration -> array_declaration .)
    BOOL            reduce using rule 83 (var_declaration -> array_declaration .)
    FLOAT           reduce using rule 83 (var_declaration -> array_declaration .)
    LONG            reduce using rule 83 (var_declaration -> array_declaration .)
    SHORT           reduce using rule 83 (var_declaration -> array_declaration .)
    VOID            reduce using rule 83 (var_declaration -> array_declaration .)
    RIGHT_BR_CURLY  reduce using rule 83 (var_declaration -> array_declaration .)
    IF              reduce using rule 83 (var_declaration -> array_declaration .)
    VAR             reduce using rule 83 (var_declaration -> array_declaration .)
    WHILE           reduce using rule 83 (var_declaration -> array_declaration .)
    FOR             reduce using rule 83 (var_declaration -> array_declaration .)
    INT_NUMBER      reduce using rule 83 (var_declaration -> array_declaration .)
    FLOAT_NUMBER    reduce using rule 83 (var_declaration -> array_declaration .)
    RETURN          reduce using rule 83 (var_declaration -> array_declaration .)


state 65

    (20) function_var_declaration -> type VAR COMMA . function_var_declaration
    (19) function_var_declaration -> . type VAR
    (20) function_var_declaration -> . type VAR COMMA function_var_declaration
    (21) function_var_declaration -> . empty
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (89) empty -> .

    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    RIGHT_BR        reduce using rule 89 (empty -> .)

    type                           shift and go to state 48
    function_var_declaration       shift and go to state 70
    empty                          shift and go to state 50

state 66

    (17) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . instructions returning RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (44) loop -> . while_loop
    (45) loop -> . for_loop
    (46) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) assignment -> . VAR EQUAL value SEMICOLON
    (81) assignment -> . VAR EQUAL VAR SEMICOLON
    (77) operation -> . increment
    (78) operation -> . decrement
    (79) operation -> . value operator value SEMICOLON
    (89) empty -> .
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (38) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (43) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (74) increment -> . VAR PLUS_PLUS SEMICOLON
    (75) decrement -> . VAR MINUS_MINUS SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (86) array_declaration -> . type get_array_element SEMICOLON
    (39) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
    IF              shift and go to state 83
    VAR             shift and go to state 72
    RETURN          reduce using rule 89 (empty -> .)
    WHILE           shift and go to state 87
    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    FOR             shift and go to state 89
    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! VAR             [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! INT             [ reduce using rule 89 (empty -> .) ]
  ! CHAR            [ reduce using rule 89 (empty -> .) ]
  ! STRING          [ reduce using rule 89 (empty -> .) ]
  ! BOOL            [ reduce using rule 89 (empty -> .) ]
  ! FLOAT           [ reduce using rule 89 (empty -> .) ]
  ! LONG            [ reduce using rule 89 (empty -> .) ]
  ! SHORT           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 89 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 89 (empty -> .) ]

    type                           shift and go to state 71
    instructions                   shift and go to state 73
    instruction                    shift and go to state 74
    loop                           shift and go to state 75
    if_statement                   shift and go to state 76
    assignment                     shift and go to state 77
    operation                      shift and go to state 78
    empty                          shift and go to state 79
    var_declaration                shift and go to state 80
    while_loop                     shift and go to state 81
    for_loop                       shift and go to state 82
    value                          shift and go to state 84
    increment                      shift and go to state 85
    decrement                      shift and go to state 86
    array_declaration              shift and go to state 64
    for_loop_statement             shift and go to state 88
    number                         shift and go to state 45

state 67

    (18) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (44) loop -> . while_loop
    (45) loop -> . for_loop
    (46) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) assignment -> . VAR EQUAL value SEMICOLON
    (81) assignment -> . VAR EQUAL VAR SEMICOLON
    (77) operation -> . increment
    (78) operation -> . decrement
    (79) operation -> . value operator value SEMICOLON
    (89) empty -> .
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (38) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (43) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (74) increment -> . VAR PLUS_PLUS SEMICOLON
    (75) decrement -> . VAR MINUS_MINUS SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (86) array_declaration -> . type get_array_element SEMICOLON
    (39) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
    IF              shift and go to state 83
    VAR             shift and go to state 72
    RIGHT_BR_CURLY  reduce using rule 89 (empty -> .)
    WHILE           shift and go to state 87
    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    FOR             shift and go to state 89
    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! VAR             [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! INT             [ reduce using rule 89 (empty -> .) ]
  ! CHAR            [ reduce using rule 89 (empty -> .) ]
  ! STRING          [ reduce using rule 89 (empty -> .) ]
  ! BOOL            [ reduce using rule 89 (empty -> .) ]
  ! FLOAT           [ reduce using rule 89 (empty -> .) ]
  ! LONG            [ reduce using rule 89 (empty -> .) ]
  ! SHORT           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 89 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 89 (empty -> .) ]

    instructions                   shift and go to state 90
    instruction                    shift and go to state 74
    loop                           shift and go to state 75
    if_statement                   shift and go to state 76
    assignment                     shift and go to state 77
    operation                      shift and go to state 78
    empty                          shift and go to state 79
    var_declaration                shift and go to state 80
    while_loop                     shift and go to state 81
    for_loop                       shift and go to state 82
    value                          shift and go to state 84
    increment                      shift and go to state 85
    decrement                      shift and go to state 86
    type                           shift and go to state 71
    array_declaration              shift and go to state 64
    for_loop_statement             shift and go to state 88
    number                         shift and go to state 45

state 68

    (22) class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY . SEMICOLON

    SEMICOLON       shift and go to state 91


state 69

    (29) class_declarations -> class_declaration class_declarations .

    RIGHT_BR_CURLY  reduce using rule 29 (class_declarations -> class_declaration class_declarations .)


state 70

    (20) function_var_declaration -> type VAR COMMA function_var_declaration .

    RIGHT_BR        reduce using rule 20 (function_var_declaration -> type VAR COMMA function_var_declaration .)


state 71

    (82) var_declaration -> type . VAR SEMICOLON
    (84) var_declaration -> type . VAR EQUAL value SEMICOLON
    (85) var_declaration -> type . VAR EQUAL VAR SEMICOLON
    (86) array_declaration -> type . get_array_element SEMICOLON
    (76) get_array_element -> . VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    VAR             shift and go to state 92

    get_array_element              shift and go to state 29

state 72

    (80) assignment -> VAR . EQUAL value SEMICOLON
    (81) assignment -> VAR . EQUAL VAR SEMICOLON
    (74) increment -> VAR . PLUS_PLUS SEMICOLON
    (75) decrement -> VAR . MINUS_MINUS SEMICOLON

    EQUAL           shift and go to state 93
    PLUS_PLUS       shift and go to state 94
    MINUS_MINUS     shift and go to state 95


state 73

    (17) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions . returning RIGHT_BR_CURLY
    (88) returning -> . RETURN value SEMICOLON

    RETURN          shift and go to state 97

    returning                      shift and go to state 96

state 74

    (30) instructions -> instruction .
    (31) instructions -> instruction . instructions
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (44) loop -> . while_loop
    (45) loop -> . for_loop
    (46) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) assignment -> . VAR EQUAL value SEMICOLON
    (81) assignment -> . VAR EQUAL VAR SEMICOLON
    (77) operation -> . increment
    (78) operation -> . decrement
    (79) operation -> . value operator value SEMICOLON
    (89) empty -> .
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (38) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (43) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (74) increment -> . VAR PLUS_PLUS SEMICOLON
    (75) decrement -> . VAR MINUS_MINUS SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (86) array_declaration -> . type get_array_element SEMICOLON
    (39) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! reduce/reduce conflict for RETURN resolved using rule 30 (instructions -> instruction .)
  ! reduce/reduce conflict for RIGHT_BR_CURLY resolved using rule 30 (instructions -> instruction .)
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
    RETURN          reduce using rule 30 (instructions -> instruction .)
    RIGHT_BR_CURLY  reduce using rule 30 (instructions -> instruction .)
    IF              shift and go to state 83
    VAR             shift and go to state 72
    WHILE           shift and go to state 87
    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    FOR             shift and go to state 89
    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! VAR             [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! INT             [ reduce using rule 89 (empty -> .) ]
  ! CHAR            [ reduce using rule 89 (empty -> .) ]
  ! STRING          [ reduce using rule 89 (empty -> .) ]
  ! BOOL            [ reduce using rule 89 (empty -> .) ]
  ! FLOAT           [ reduce using rule 89 (empty -> .) ]
  ! LONG            [ reduce using rule 89 (empty -> .) ]
  ! SHORT           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 89 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 89 (empty -> .) ]
  ! RETURN          [ reduce using rule 89 (empty -> .) ]
  ! RIGHT_BR_CURLY  [ reduce using rule 89 (empty -> .) ]

    instruction                    shift and go to state 74
    instructions                   shift and go to state 98
    loop                           shift and go to state 75
    if_statement                   shift and go to state 76
    assignment                     shift and go to state 77
    operation                      shift and go to state 78
    empty                          shift and go to state 79
    var_declaration                shift and go to state 80
    while_loop                     shift and go to state 81
    for_loop                       shift and go to state 82
    value                          shift and go to state 84
    increment                      shift and go to state 85
    decrement                      shift and go to state 86
    type                           shift and go to state 71
    array_declaration              shift and go to state 64
    for_loop_statement             shift and go to state 88
    number                         shift and go to state 45

state 75

    (32) instruction -> loop .

    IF              reduce using rule 32 (instruction -> loop .)
    VAR             reduce using rule 32 (instruction -> loop .)
    WHILE           reduce using rule 32 (instruction -> loop .)
    INT             reduce using rule 32 (instruction -> loop .)
    CHAR            reduce using rule 32 (instruction -> loop .)
    STRING          reduce using rule 32 (instruction -> loop .)
    BOOL            reduce using rule 32 (instruction -> loop .)
    FLOAT           reduce using rule 32 (instruction -> loop .)
    LONG            reduce using rule 32 (instruction -> loop .)
    SHORT           reduce using rule 32 (instruction -> loop .)
    FOR             reduce using rule 32 (instruction -> loop .)
    INT_NUMBER      reduce using rule 32 (instruction -> loop .)
    FLOAT_NUMBER    reduce using rule 32 (instruction -> loop .)
    RETURN          reduce using rule 32 (instruction -> loop .)
    RIGHT_BR_CURLY  reduce using rule 32 (instruction -> loop .)


state 76

    (33) instruction -> if_statement .

    IF              reduce using rule 33 (instruction -> if_statement .)
    VAR             reduce using rule 33 (instruction -> if_statement .)
    WHILE           reduce using rule 33 (instruction -> if_statement .)
    INT             reduce using rule 33 (instruction -> if_statement .)
    CHAR            reduce using rule 33 (instruction -> if_statement .)
    STRING          reduce using rule 33 (instruction -> if_statement .)
    BOOL            reduce using rule 33 (instruction -> if_statement .)
    FLOAT           reduce using rule 33 (instruction -> if_statement .)
    LONG            reduce using rule 33 (instruction -> if_statement .)
    SHORT           reduce using rule 33 (instruction -> if_statement .)
    FOR             reduce using rule 33 (instruction -> if_statement .)
    INT_NUMBER      reduce using rule 33 (instruction -> if_statement .)
    FLOAT_NUMBER    reduce using rule 33 (instruction -> if_statement .)
    RETURN          reduce using rule 33 (instruction -> if_statement .)
    RIGHT_BR_CURLY  reduce using rule 33 (instruction -> if_statement .)


state 77

    (34) instruction -> assignment .

    IF              reduce using rule 34 (instruction -> assignment .)
    VAR             reduce using rule 34 (instruction -> assignment .)
    WHILE           reduce using rule 34 (instruction -> assignment .)
    INT             reduce using rule 34 (instruction -> assignment .)
    CHAR            reduce using rule 34 (instruction -> assignment .)
    STRING          reduce using rule 34 (instruction -> assignment .)
    BOOL            reduce using rule 34 (instruction -> assignment .)
    FLOAT           reduce using rule 34 (instruction -> assignment .)
    LONG            reduce using rule 34 (instruction -> assignment .)
    SHORT           reduce using rule 34 (instruction -> assignment .)
    FOR             reduce using rule 34 (instruction -> assignment .)
    INT_NUMBER      reduce using rule 34 (instruction -> assignment .)
    FLOAT_NUMBER    reduce using rule 34 (instruction -> assignment .)
    RETURN          reduce using rule 34 (instruction -> assignment .)
    RIGHT_BR_CURLY  reduce using rule 34 (instruction -> assignment .)


state 78

    (35) instruction -> operation .

    IF              reduce using rule 35 (instruction -> operation .)
    VAR             reduce using rule 35 (instruction -> operation .)
    WHILE           reduce using rule 35 (instruction -> operation .)
    INT             reduce using rule 35 (instruction -> operation .)
    CHAR            reduce using rule 35 (instruction -> operation .)
    STRING          reduce using rule 35 (instruction -> operation .)
    BOOL            reduce using rule 35 (instruction -> operation .)
    FLOAT           reduce using rule 35 (instruction -> operation .)
    LONG            reduce using rule 35 (instruction -> operation .)
    SHORT           reduce using rule 35 (instruction -> operation .)
    FOR             reduce using rule 35 (instruction -> operation .)
    INT_NUMBER      reduce using rule 35 (instruction -> operation .)
    FLOAT_NUMBER    reduce using rule 35 (instruction -> operation .)
    RETURN          reduce using rule 35 (instruction -> operation .)
    RIGHT_BR_CURLY  reduce using rule 35 (instruction -> operation .)


state 79

    (36) instruction -> empty .

    IF              reduce using rule 36 (instruction -> empty .)
    VAR             reduce using rule 36 (instruction -> empty .)
    WHILE           reduce using rule 36 (instruction -> empty .)
    INT             reduce using rule 36 (instruction -> empty .)
    CHAR            reduce using rule 36 (instruction -> empty .)
    STRING          reduce using rule 36 (instruction -> empty .)
    BOOL            reduce using rule 36 (instruction -> empty .)
    FLOAT           reduce using rule 36 (instruction -> empty .)
    LONG            reduce using rule 36 (instruction -> empty .)
    SHORT           reduce using rule 36 (instruction -> empty .)
    FOR             reduce using rule 36 (instruction -> empty .)
    INT_NUMBER      reduce using rule 36 (instruction -> empty .)
    FLOAT_NUMBER    reduce using rule 36 (instruction -> empty .)
    RETURN          reduce using rule 36 (instruction -> empty .)
    RIGHT_BR_CURLY  reduce using rule 36 (instruction -> empty .)


state 80

    (37) instruction -> var_declaration .

    IF              reduce using rule 37 (instruction -> var_declaration .)
    VAR             reduce using rule 37 (instruction -> var_declaration .)
    WHILE           reduce using rule 37 (instruction -> var_declaration .)
    INT             reduce using rule 37 (instruction -> var_declaration .)
    CHAR            reduce using rule 37 (instruction -> var_declaration .)
    STRING          reduce using rule 37 (instruction -> var_declaration .)
    BOOL            reduce using rule 37 (instruction -> var_declaration .)
    FLOAT           reduce using rule 37 (instruction -> var_declaration .)
    LONG            reduce using rule 37 (instruction -> var_declaration .)
    SHORT           reduce using rule 37 (instruction -> var_declaration .)
    FOR             reduce using rule 37 (instruction -> var_declaration .)
    INT_NUMBER      reduce using rule 37 (instruction -> var_declaration .)
    FLOAT_NUMBER    reduce using rule 37 (instruction -> var_declaration .)
    RETURN          reduce using rule 37 (instruction -> var_declaration .)
    RIGHT_BR_CURLY  reduce using rule 37 (instruction -> var_declaration .)


state 81

    (44) loop -> while_loop .

    IF              reduce using rule 44 (loop -> while_loop .)
    VAR             reduce using rule 44 (loop -> while_loop .)
    WHILE           reduce using rule 44 (loop -> while_loop .)
    INT             reduce using rule 44 (loop -> while_loop .)
    CHAR            reduce using rule 44 (loop -> while_loop .)
    STRING          reduce using rule 44 (loop -> while_loop .)
    BOOL            reduce using rule 44 (loop -> while_loop .)
    FLOAT           reduce using rule 44 (loop -> while_loop .)
    LONG            reduce using rule 44 (loop -> while_loop .)
    SHORT           reduce using rule 44 (loop -> while_loop .)
    FOR             reduce using rule 44 (loop -> while_loop .)
    INT_NUMBER      reduce using rule 44 (loop -> while_loop .)
    FLOAT_NUMBER    reduce using rule 44 (loop -> while_loop .)
    RETURN          reduce using rule 44 (loop -> while_loop .)
    RIGHT_BR_CURLY  reduce using rule 44 (loop -> while_loop .)


state 82

    (45) loop -> for_loop .

    IF              reduce using rule 45 (loop -> for_loop .)
    VAR             reduce using rule 45 (loop -> for_loop .)
    WHILE           reduce using rule 45 (loop -> for_loop .)
    INT             reduce using rule 45 (loop -> for_loop .)
    CHAR            reduce using rule 45 (loop -> for_loop .)
    STRING          reduce using rule 45 (loop -> for_loop .)
    BOOL            reduce using rule 45 (loop -> for_loop .)
    FLOAT           reduce using rule 45 (loop -> for_loop .)
    LONG            reduce using rule 45 (loop -> for_loop .)
    SHORT           reduce using rule 45 (loop -> for_loop .)
    FOR             reduce using rule 45 (loop -> for_loop .)
    INT_NUMBER      reduce using rule 45 (loop -> for_loop .)
    FLOAT_NUMBER    reduce using rule 45 (loop -> for_loop .)
    RETURN          reduce using rule 45 (loop -> for_loop .)
    RIGHT_BR_CURLY  reduce using rule 45 (loop -> for_loop .)


state 83

    (46) if_statement -> IF . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 99


state 84

    (79) operation -> value . operator value SEMICOLON
    (73) value -> value .
    (55) operator -> . PLUS
    (56) operator -> . MINUS
    (57) operator -> . MULTIPLY
    (58) operator -> . DIVIDE

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102
    MULTIPLY        shift and go to state 103
    DIVIDE          shift and go to state 104

  ! PLUS            [ reduce using rule 73 (value -> value .) ]
  ! MINUS           [ reduce using rule 73 (value -> value .) ]
  ! MULTIPLY        [ reduce using rule 73 (value -> value .) ]
  ! DIVIDE          [ reduce using rule 73 (value -> value .) ]

    operator                       shift and go to state 100

state 85

    (77) operation -> increment .

    IF              reduce using rule 77 (operation -> increment .)
    VAR             reduce using rule 77 (operation -> increment .)
    WHILE           reduce using rule 77 (operation -> increment .)
    INT             reduce using rule 77 (operation -> increment .)
    CHAR            reduce using rule 77 (operation -> increment .)
    STRING          reduce using rule 77 (operation -> increment .)
    BOOL            reduce using rule 77 (operation -> increment .)
    FLOAT           reduce using rule 77 (operation -> increment .)
    LONG            reduce using rule 77 (operation -> increment .)
    SHORT           reduce using rule 77 (operation -> increment .)
    FOR             reduce using rule 77 (operation -> increment .)
    INT_NUMBER      reduce using rule 77 (operation -> increment .)
    FLOAT_NUMBER    reduce using rule 77 (operation -> increment .)
    RETURN          reduce using rule 77 (operation -> increment .)
    RIGHT_BR_CURLY  reduce using rule 77 (operation -> increment .)


state 86

    (78) operation -> decrement .

    IF              reduce using rule 78 (operation -> decrement .)
    VAR             reduce using rule 78 (operation -> decrement .)
    WHILE           reduce using rule 78 (operation -> decrement .)
    INT             reduce using rule 78 (operation -> decrement .)
    CHAR            reduce using rule 78 (operation -> decrement .)
    STRING          reduce using rule 78 (operation -> decrement .)
    BOOL            reduce using rule 78 (operation -> decrement .)
    FLOAT           reduce using rule 78 (operation -> decrement .)
    LONG            reduce using rule 78 (operation -> decrement .)
    SHORT           reduce using rule 78 (operation -> decrement .)
    FOR             reduce using rule 78 (operation -> decrement .)
    INT_NUMBER      reduce using rule 78 (operation -> decrement .)
    FLOAT_NUMBER    reduce using rule 78 (operation -> decrement .)
    RETURN          reduce using rule 78 (operation -> decrement .)
    RIGHT_BR_CURLY  reduce using rule 78 (operation -> decrement .)


state 87

    (38) while_loop -> WHILE . LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR         shift and go to state 105


state 88

    (43) for_loop -> for_loop_statement . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 106


state 89

    (39) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> FOR . LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    LEFT_BR         shift and go to state 107


state 90

    (18) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 108


state 91

    (22) class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .

    CLASS           reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    HASH            reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    VOID            reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    INT             reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    CHAR            reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    STRING          reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    BOOL            reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    FLOAT           reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    LONG            reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    SHORT           reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)
    $end            reduce using rule 22 (class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON .)


state 92

    (82) var_declaration -> type VAR . SEMICOLON
    (84) var_declaration -> type VAR . EQUAL value SEMICOLON
    (85) var_declaration -> type VAR . EQUAL VAR SEMICOLON
    (76) get_array_element -> VAR . LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED

    SEMICOLON       shift and go to state 33
    EQUAL           shift and go to state 34
    LEFT_BR_SQUARED shift and go to state 36


state 93

    (80) assignment -> VAR EQUAL . value SEMICOLON
    (81) assignment -> VAR EQUAL . VAR SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

    VAR             shift and go to state 109
    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

    value                          shift and go to state 110
    number                         shift and go to state 45

state 94

    (74) increment -> VAR PLUS_PLUS . SEMICOLON

    SEMICOLON       shift and go to state 111


state 95

    (75) decrement -> VAR MINUS_MINUS . SEMICOLON

    SEMICOLON       shift and go to state 112


state 96

    (17) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 113


state 97

    (88) returning -> RETURN . value SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

    value                          shift and go to state 114
    number                         shift and go to state 45

state 98

    (31) instructions -> instruction instructions .

    RETURN          reduce using rule 31 (instructions -> instruction instructions .)
    RIGHT_BR_CURLY  reduce using rule 31 (instructions -> instruction instructions .)


state 99

    (46) if_statement -> IF LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (47) comparisons -> . comparison
    (48) comparisons -> . comparison conjunction comparisons
    (87) comparison -> . value comparator value
    (72) value -> . number
    (73) value -> . value
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

    comparisons                    shift and go to state 115
    comparison                     shift and go to state 116
    value                          shift and go to state 117
    number                         shift and go to state 45

state 100

    (79) operation -> value operator . value SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

    value                          shift and go to state 118
    number                         shift and go to state 45

state 101

    (55) operator -> PLUS .

    INT_NUMBER      reduce using rule 55 (operator -> PLUS .)
    FLOAT_NUMBER    reduce using rule 55 (operator -> PLUS .)


state 102

    (56) operator -> MINUS .

    INT_NUMBER      reduce using rule 56 (operator -> MINUS .)
    FLOAT_NUMBER    reduce using rule 56 (operator -> MINUS .)


state 103

    (57) operator -> MULTIPLY .

    INT_NUMBER      reduce using rule 57 (operator -> MULTIPLY .)
    FLOAT_NUMBER    reduce using rule 57 (operator -> MULTIPLY .)


state 104

    (58) operator -> DIVIDE .

    INT_NUMBER      reduce using rule 58 (operator -> DIVIDE .)
    FLOAT_NUMBER    reduce using rule 58 (operator -> DIVIDE .)


state 105

    (38) while_loop -> WHILE LEFT_BR . comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (47) comparisons -> . comparison
    (48) comparisons -> . comparison conjunction comparisons
    (87) comparison -> . value comparator value
    (72) value -> . number
    (73) value -> . value
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

    comparisons                    shift and go to state 119
    comparison                     shift and go to state 116
    value                          shift and go to state 117
    number                         shift and go to state 45

state 106

    (43) for_loop -> for_loop_statement LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (44) loop -> . while_loop
    (45) loop -> . for_loop
    (46) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) assignment -> . VAR EQUAL value SEMICOLON
    (81) assignment -> . VAR EQUAL VAR SEMICOLON
    (77) operation -> . increment
    (78) operation -> . decrement
    (79) operation -> . value operator value SEMICOLON
    (89) empty -> .
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (38) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (43) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (74) increment -> . VAR PLUS_PLUS SEMICOLON
    (75) decrement -> . VAR MINUS_MINUS SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (86) array_declaration -> . type get_array_element SEMICOLON
    (39) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
    IF              shift and go to state 83
    VAR             shift and go to state 72
    RIGHT_BR_CURLY  reduce using rule 89 (empty -> .)
    WHILE           shift and go to state 87
    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    FOR             shift and go to state 89
    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! VAR             [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! INT             [ reduce using rule 89 (empty -> .) ]
  ! CHAR            [ reduce using rule 89 (empty -> .) ]
  ! STRING          [ reduce using rule 89 (empty -> .) ]
  ! BOOL            [ reduce using rule 89 (empty -> .) ]
  ! FLOAT           [ reduce using rule 89 (empty -> .) ]
  ! LONG            [ reduce using rule 89 (empty -> .) ]
  ! SHORT           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 89 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 89 (empty -> .) ]

    for_loop_statement             shift and go to state 88
    instructions                   shift and go to state 120
    instruction                    shift and go to state 74
    loop                           shift and go to state 75
    if_statement                   shift and go to state 76
    assignment                     shift and go to state 77
    operation                      shift and go to state 78
    empty                          shift and go to state 79
    var_declaration                shift and go to state 80
    while_loop                     shift and go to state 81
    for_loop                       shift and go to state 82
    value                          shift and go to state 84
    increment                      shift and go to state 85
    decrement                      shift and go to state 86
    type                           shift and go to state 71
    array_declaration              shift and go to state 64
    number                         shift and go to state 45

state 107

    (39) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR . INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    INT             shift and go to state 121


state 108

    (18) void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    CLASS           reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    HASH            reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VOID            reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    $end            reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 18 (void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 109

    (81) assignment -> VAR EQUAL VAR . SEMICOLON

    SEMICOLON       shift and go to state 122


state 110

    (80) assignment -> VAR EQUAL value . SEMICOLON
    (73) value -> value .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 123

  ! SEMICOLON       [ reduce using rule 73 (value -> value .) ]


state 111

    (74) increment -> VAR PLUS_PLUS SEMICOLON .

    IF              reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    VAR             reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    WHILE           reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT             reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    CHAR            reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    STRING          reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    BOOL            reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT           reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    LONG            reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    SHORT           reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FOR             reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    INT_NUMBER      reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RETURN          reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 74 (increment -> VAR PLUS_PLUS SEMICOLON .)


state 112

    (75) decrement -> VAR MINUS_MINUS SEMICOLON .

    IF              reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    VAR             reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    WHILE           reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT             reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    CHAR            reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    STRING          reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    BOOL            reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT           reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    LONG            reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    SHORT           reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FOR             reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    INT_NUMBER      reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RETURN          reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 75 (decrement -> VAR MINUS_MINUS SEMICOLON .)


state 113

    (17) type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .

    CLASS           reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    HASH            reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    VOID            reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    INT             reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    CHAR            reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    STRING          reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    BOOL            reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    LONG            reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    SHORT           reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    $end            reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 17 (type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY .)


state 114

    (88) returning -> RETURN value . SEMICOLON
    (73) value -> value .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 124

  ! SEMICOLON       [ reduce using rule 73 (value -> value .) ]


state 115

    (46) if_statement -> IF LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 125


state 116

    (47) comparisons -> comparison .
    (48) comparisons -> comparison . conjunction comparisons
    (66) conjunction -> . AND
    (67) conjunction -> . OR

    RIGHT_BR        reduce using rule 47 (comparisons -> comparison .)
    AND             shift and go to state 127
    OR              shift and go to state 128

    conjunction                    shift and go to state 126

state 117

    (87) comparison -> value . comparator value
    (73) value -> value .
    (49) comparator -> . LESS
    (50) comparator -> . LESS_EQUAL
    (51) comparator -> . GREATER
    (52) comparator -> . GREATER_EQUAL
    (53) comparator -> . EQUAL_EQUAL
    (54) comparator -> . NOT_EQUAL

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
    LESS            shift and go to state 130
    LESS_EQUAL      shift and go to state 131
    GREATER         shift and go to state 132
    GREATER_EQUAL   shift and go to state 133
    EQUAL_EQUAL     shift and go to state 134
    NOT_EQUAL       shift and go to state 135

  ! LESS            [ reduce using rule 73 (value -> value .) ]
  ! LESS_EQUAL      [ reduce using rule 73 (value -> value .) ]
  ! GREATER         [ reduce using rule 73 (value -> value .) ]
  ! GREATER_EQUAL   [ reduce using rule 73 (value -> value .) ]
  ! EQUAL_EQUAL     [ reduce using rule 73 (value -> value .) ]
  ! NOT_EQUAL       [ reduce using rule 73 (value -> value .) ]

    comparator                     shift and go to state 129

state 118

    (79) operation -> value operator value . SEMICOLON
    (73) value -> value .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 136

  ! SEMICOLON       [ reduce using rule 73 (value -> value .) ]


state 119

    (38) while_loop -> WHILE LEFT_BR comparisons . RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    RIGHT_BR        shift and go to state 137


state 120

    (43) for_loop -> for_loop_statement LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 138


state 121

    (39) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT . VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 139


state 122

    (81) assignment -> VAR EQUAL VAR SEMICOLON .

    IF              reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    VAR             reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    WHILE           reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT             reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    CHAR            reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    STRING          reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    BOOL            reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT           reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    LONG            reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    SHORT           reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FOR             reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    INT_NUMBER      reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RETURN          reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 81 (assignment -> VAR EQUAL VAR SEMICOLON .)


state 123

    (80) assignment -> VAR EQUAL value SEMICOLON .

    IF              reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    VAR             reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    WHILE           reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    INT             reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    CHAR            reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    STRING          reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    BOOL            reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT           reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    LONG            reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    SHORT           reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    FOR             reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    INT_NUMBER      reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    RETURN          reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 80 (assignment -> VAR EQUAL value SEMICOLON .)


state 124

    (88) returning -> RETURN value SEMICOLON .

    RIGHT_BR_CURLY  reduce using rule 88 (returning -> RETURN value SEMICOLON .)


state 125

    (46) if_statement -> IF LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 140


state 126

    (48) comparisons -> comparison conjunction . comparisons
    (47) comparisons -> . comparison
    (48) comparisons -> . comparison conjunction comparisons
    (87) comparison -> . value comparator value
    (72) value -> . number
    (73) value -> . value
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

    comparison                     shift and go to state 116
    comparisons                    shift and go to state 141
    value                          shift and go to state 117
    number                         shift and go to state 45

state 127

    (66) conjunction -> AND .

    INT_NUMBER      reduce using rule 66 (conjunction -> AND .)
    FLOAT_NUMBER    reduce using rule 66 (conjunction -> AND .)


state 128

    (67) conjunction -> OR .

    INT_NUMBER      reduce using rule 67 (conjunction -> OR .)
    FLOAT_NUMBER    reduce using rule 67 (conjunction -> OR .)


state 129

    (87) comparison -> value comparator . value
    (72) value -> . number
    (73) value -> . value
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

    value                          shift and go to state 142
    number                         shift and go to state 45

state 130

    (49) comparator -> LESS .

    INT_NUMBER      reduce using rule 49 (comparator -> LESS .)
    FLOAT_NUMBER    reduce using rule 49 (comparator -> LESS .)


state 131

    (50) comparator -> LESS_EQUAL .

    INT_NUMBER      reduce using rule 50 (comparator -> LESS_EQUAL .)
    FLOAT_NUMBER    reduce using rule 50 (comparator -> LESS_EQUAL .)


state 132

    (51) comparator -> GREATER .

    INT_NUMBER      reduce using rule 51 (comparator -> GREATER .)
    FLOAT_NUMBER    reduce using rule 51 (comparator -> GREATER .)


state 133

    (52) comparator -> GREATER_EQUAL .

    INT_NUMBER      reduce using rule 52 (comparator -> GREATER_EQUAL .)
    FLOAT_NUMBER    reduce using rule 52 (comparator -> GREATER_EQUAL .)


state 134

    (53) comparator -> EQUAL_EQUAL .

    INT_NUMBER      reduce using rule 53 (comparator -> EQUAL_EQUAL .)
    FLOAT_NUMBER    reduce using rule 53 (comparator -> EQUAL_EQUAL .)


state 135

    (54) comparator -> NOT_EQUAL .

    INT_NUMBER      reduce using rule 54 (comparator -> NOT_EQUAL .)
    FLOAT_NUMBER    reduce using rule 54 (comparator -> NOT_EQUAL .)


state 136

    (79) operation -> value operator value SEMICOLON .

    IF              reduce using rule 79 (operation -> value operator value SEMICOLON .)
    VAR             reduce using rule 79 (operation -> value operator value SEMICOLON .)
    WHILE           reduce using rule 79 (operation -> value operator value SEMICOLON .)
    INT             reduce using rule 79 (operation -> value operator value SEMICOLON .)
    CHAR            reduce using rule 79 (operation -> value operator value SEMICOLON .)
    STRING          reduce using rule 79 (operation -> value operator value SEMICOLON .)
    BOOL            reduce using rule 79 (operation -> value operator value SEMICOLON .)
    FLOAT           reduce using rule 79 (operation -> value operator value SEMICOLON .)
    LONG            reduce using rule 79 (operation -> value operator value SEMICOLON .)
    SHORT           reduce using rule 79 (operation -> value operator value SEMICOLON .)
    FOR             reduce using rule 79 (operation -> value operator value SEMICOLON .)
    INT_NUMBER      reduce using rule 79 (operation -> value operator value SEMICOLON .)
    FLOAT_NUMBER    reduce using rule 79 (operation -> value operator value SEMICOLON .)
    RETURN          reduce using rule 79 (operation -> value operator value SEMICOLON .)
    RIGHT_BR_CURLY  reduce using rule 79 (operation -> value operator value SEMICOLON .)


state 137

    (38) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR . LEFT_BR_CURLY instructions RIGHT_BR_CURLY

    LEFT_BR_CURLY   shift and go to state 143


state 138

    (43) for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 43 (for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 139

    (39) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR . EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    EQUAL           shift and go to state 144


state 140

    (46) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (44) loop -> . while_loop
    (45) loop -> . for_loop
    (46) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) assignment -> . VAR EQUAL value SEMICOLON
    (81) assignment -> . VAR EQUAL VAR SEMICOLON
    (77) operation -> . increment
    (78) operation -> . decrement
    (79) operation -> . value operator value SEMICOLON
    (89) empty -> .
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (38) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (43) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (74) increment -> . VAR PLUS_PLUS SEMICOLON
    (75) decrement -> . VAR MINUS_MINUS SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (86) array_declaration -> . type get_array_element SEMICOLON
    (39) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
    IF              shift and go to state 83
    VAR             shift and go to state 72
    RIGHT_BR_CURLY  reduce using rule 89 (empty -> .)
    WHILE           shift and go to state 87
    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    FOR             shift and go to state 89
    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! VAR             [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! INT             [ reduce using rule 89 (empty -> .) ]
  ! CHAR            [ reduce using rule 89 (empty -> .) ]
  ! STRING          [ reduce using rule 89 (empty -> .) ]
  ! BOOL            [ reduce using rule 89 (empty -> .) ]
  ! FLOAT           [ reduce using rule 89 (empty -> .) ]
  ! LONG            [ reduce using rule 89 (empty -> .) ]
  ! SHORT           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 89 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 89 (empty -> .) ]

    instructions                   shift and go to state 145
    instruction                    shift and go to state 74
    loop                           shift and go to state 75
    if_statement                   shift and go to state 76
    assignment                     shift and go to state 77
    operation                      shift and go to state 78
    empty                          shift and go to state 79
    var_declaration                shift and go to state 80
    while_loop                     shift and go to state 81
    for_loop                       shift and go to state 82
    value                          shift and go to state 84
    increment                      shift and go to state 85
    decrement                      shift and go to state 86
    type                           shift and go to state 71
    array_declaration              shift and go to state 64
    for_loop_statement             shift and go to state 88
    number                         shift and go to state 45

state 141

    (48) comparisons -> comparison conjunction comparisons .

    RIGHT_BR        reduce using rule 48 (comparisons -> comparison conjunction comparisons .)


state 142

    (87) comparison -> value comparator value .
    (73) value -> value .

  ! reduce/reduce conflict for AND resolved using rule 73 (value -> value .)
  ! reduce/reduce conflict for OR resolved using rule 73 (value -> value .)
  ! reduce/reduce conflict for RIGHT_BR resolved using rule 73 (value -> value .)
    AND             reduce using rule 73 (value -> value .)
    OR              reduce using rule 73 (value -> value .)
    RIGHT_BR        reduce using rule 73 (value -> value .)

  ! AND             [ reduce using rule 87 (comparison -> value comparator value .) ]
  ! OR              [ reduce using rule 87 (comparison -> value comparator value .) ]
  ! RIGHT_BR        [ reduce using rule 87 (comparison -> value comparator value .) ]


state 143

    (38) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY . instructions RIGHT_BR_CURLY
    (30) instructions -> . instruction
    (31) instructions -> . instruction instructions
    (32) instruction -> . loop
    (33) instruction -> . if_statement
    (34) instruction -> . assignment
    (35) instruction -> . operation
    (36) instruction -> . empty
    (37) instruction -> . var_declaration
    (44) loop -> . while_loop
    (45) loop -> . for_loop
    (46) if_statement -> . IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (80) assignment -> . VAR EQUAL value SEMICOLON
    (81) assignment -> . VAR EQUAL VAR SEMICOLON
    (77) operation -> . increment
    (78) operation -> . decrement
    (79) operation -> . value operator value SEMICOLON
    (89) empty -> .
    (82) var_declaration -> . type VAR SEMICOLON
    (83) var_declaration -> . array_declaration
    (84) var_declaration -> . type VAR EQUAL value SEMICOLON
    (85) var_declaration -> . type VAR EQUAL VAR SEMICOLON
    (38) while_loop -> . WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (43) for_loop -> . for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY
    (74) increment -> . VAR PLUS_PLUS SEMICOLON
    (75) decrement -> . VAR MINUS_MINUS SEMICOLON
    (72) value -> . number
    (73) value -> . value
    (59) type -> . INT
    (60) type -> . CHAR
    (61) type -> . STRING
    (62) type -> . BOOL
    (63) type -> . FLOAT
    (64) type -> . LONG
    (65) type -> . SHORT
    (86) array_declaration -> . type get_array_element SEMICOLON
    (39) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> . FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (70) number -> . INT_NUMBER
    (71) number -> . FLOAT_NUMBER

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for INT_NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT_NUMBER resolved as shift
    IF              shift and go to state 83
    VAR             shift and go to state 72
    RIGHT_BR_CURLY  reduce using rule 89 (empty -> .)
    WHILE           shift and go to state 87
    INT             shift and go to state 18
    CHAR            shift and go to state 19
    STRING          shift and go to state 14
    BOOL            shift and go to state 20
    FLOAT           shift and go to state 21
    LONG            shift and go to state 22
    SHORT           shift and go to state 23
    FOR             shift and go to state 89
    INT_NUMBER      shift and go to state 46
    FLOAT_NUMBER    shift and go to state 47

  ! IF              [ reduce using rule 89 (empty -> .) ]
  ! VAR             [ reduce using rule 89 (empty -> .) ]
  ! WHILE           [ reduce using rule 89 (empty -> .) ]
  ! INT             [ reduce using rule 89 (empty -> .) ]
  ! CHAR            [ reduce using rule 89 (empty -> .) ]
  ! STRING          [ reduce using rule 89 (empty -> .) ]
  ! BOOL            [ reduce using rule 89 (empty -> .) ]
  ! FLOAT           [ reduce using rule 89 (empty -> .) ]
  ! LONG            [ reduce using rule 89 (empty -> .) ]
  ! SHORT           [ reduce using rule 89 (empty -> .) ]
  ! FOR             [ reduce using rule 89 (empty -> .) ]
  ! INT_NUMBER      [ reduce using rule 89 (empty -> .) ]
  ! FLOAT_NUMBER    [ reduce using rule 89 (empty -> .) ]

    instructions                   shift and go to state 146
    instruction                    shift and go to state 74
    loop                           shift and go to state 75
    if_statement                   shift and go to state 76
    assignment                     shift and go to state 77
    operation                      shift and go to state 78
    empty                          shift and go to state 79
    var_declaration                shift and go to state 80
    while_loop                     shift and go to state 81
    for_loop                       shift and go to state 82
    value                          shift and go to state 84
    increment                      shift and go to state 85
    decrement                      shift and go to state 86
    type                           shift and go to state 71
    array_declaration              shift and go to state 64
    for_loop_statement             shift and go to state 88
    number                         shift and go to state 45

state 144

    (39) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL . INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 147


state 145

    (46) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 148


state 146

    (38) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions . RIGHT_BR_CURLY

    RIGHT_BR_CURLY  shift and go to state 149


state 147

    (39) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER . SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 150


state 148

    (46) if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 46 (if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 149

    (38) while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .

    IF              reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    VAR             reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    WHILE           reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT             reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    CHAR            reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    STRING          reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    BOOL            reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT           reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    LONG            reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    SHORT           reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FOR             reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    INT_NUMBER      reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    FLOAT_NUMBER    reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RETURN          reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)
    RIGHT_BR_CURLY  reduce using rule 38 (while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY .)


state 150

    (39) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON . VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    VAR             shift and go to state 151


state 151

    (39) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (40) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR
    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR
    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR . GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    LESS            shift and go to state 152
    LESS_EQUAL      shift and go to state 153
    GREATER         shift and go to state 154
    GREATER_EQUAL   shift and go to state 155


state 152

    (39) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS . INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 156


state 153

    (40) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL . INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR

    INT_NUMBER      shift and go to state 157


state 154

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER . INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 158


state 155

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL . INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR

    INT_NUMBER      shift and go to state 159


state 156

    (39) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER . SEMICOLON PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 160


state 157

    (40) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER . SEMICOLON PLUS_PLUS RIGHT_BR

    SEMICOLON       shift and go to state 161


state 158

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER . SEMICOLON MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 162


state 159

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER . SEMICOLON MINUS_MINUS RIGHT_BR

    SEMICOLON       shift and go to state 163


state 160

    (39) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 164


state 161

    (40) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON . PLUS_PLUS RIGHT_BR

    PLUS_PLUS       shift and go to state 165


state 162

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 166


state 163

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON . MINUS_MINUS RIGHT_BR

    MINUS_MINUS     shift and go to state 167


state 164

    (39) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 168


state 165

    (40) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS . RIGHT_BR

    RIGHT_BR        shift and go to state 169


state 166

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 170


state 167

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS . RIGHT_BR

    RIGHT_BR        shift and go to state 171


state 168

    (39) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 39 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR .)


state 169

    (40) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 40 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR .)


state 170

    (41) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 41 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR .)


state 171

    (42) for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR .

    LEFT_BR_CURLY   reduce using rule 42 (for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for HASH in state 0 resolved as shift
WARNING: shift/reduce conflict for VOID in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for LONG in state 0 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 5 resolved as shift
WARNING: shift/reduce conflict for HASH in state 5 resolved as shift
WARNING: shift/reduce conflict for VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for INT in state 5 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for LONG in state 5 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 5 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 44 resolved as shift
WARNING: shift/reduce conflict for IF in state 66 resolved as shift
WARNING: shift/reduce conflict for VAR in state 66 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 66 resolved as shift
WARNING: shift/reduce conflict for INT in state 66 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 66 resolved as shift
WARNING: shift/reduce conflict for STRING in state 66 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 66 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 66 resolved as shift
WARNING: shift/reduce conflict for LONG in state 66 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 66 resolved as shift
WARNING: shift/reduce conflict for FOR in state 66 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 66 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 66 resolved as shift
WARNING: shift/reduce conflict for IF in state 67 resolved as shift
WARNING: shift/reduce conflict for VAR in state 67 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 67 resolved as shift
WARNING: shift/reduce conflict for INT in state 67 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 67 resolved as shift
WARNING: shift/reduce conflict for STRING in state 67 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 67 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 67 resolved as shift
WARNING: shift/reduce conflict for LONG in state 67 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 67 resolved as shift
WARNING: shift/reduce conflict for FOR in state 67 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 67 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 67 resolved as shift
WARNING: shift/reduce conflict for IF in state 74 resolved as shift
WARNING: shift/reduce conflict for VAR in state 74 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 74 resolved as shift
WARNING: shift/reduce conflict for INT in state 74 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 74 resolved as shift
WARNING: shift/reduce conflict for STRING in state 74 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 74 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 74 resolved as shift
WARNING: shift/reduce conflict for LONG in state 74 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 74 resolved as shift
WARNING: shift/reduce conflict for FOR in state 74 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 74 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 74 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 84 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 106 resolved as shift
WARNING: shift/reduce conflict for VAR in state 106 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 106 resolved as shift
WARNING: shift/reduce conflict for INT in state 106 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 106 resolved as shift
WARNING: shift/reduce conflict for STRING in state 106 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 106 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 106 resolved as shift
WARNING: shift/reduce conflict for LONG in state 106 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 106 resolved as shift
WARNING: shift/reduce conflict for FOR in state 106 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 106 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 106 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 110 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 114 resolved as shift
WARNING: shift/reduce conflict for LESS in state 117 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 118 resolved as shift
WARNING: shift/reduce conflict for IF in state 140 resolved as shift
WARNING: shift/reduce conflict for VAR in state 140 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 140 resolved as shift
WARNING: shift/reduce conflict for INT in state 140 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 140 resolved as shift
WARNING: shift/reduce conflict for STRING in state 140 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 140 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 140 resolved as shift
WARNING: shift/reduce conflict for LONG in state 140 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 140 resolved as shift
WARNING: shift/reduce conflict for FOR in state 140 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 140 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 140 resolved as shift
WARNING: shift/reduce conflict for IF in state 143 resolved as shift
WARNING: shift/reduce conflict for VAR in state 143 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 143 resolved as shift
WARNING: shift/reduce conflict for INT in state 143 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 143 resolved as shift
WARNING: shift/reduce conflict for STRING in state 143 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 143 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 143 resolved as shift
WARNING: shift/reduce conflict for LONG in state 143 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 143 resolved as shift
WARNING: shift/reduce conflict for FOR in state 143 resolved as shift
WARNING: shift/reduce conflict for INT_NUMBER in state 143 resolved as shift
WARNING: shift/reduce conflict for FLOAT_NUMBER in state 143 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> empty)
WARNING: rejected rule (program_components -> empty) in state 4
WARNING: reduce/reduce conflict in state 4 resolved using rule (program -> empty)
WARNING: rejected rule (program_component -> empty) in state 4
WARNING: reduce/reduce conflict in state 5 resolved using rule (program_components -> program_component)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 10 resolved using rule (program_component -> array_declaration)
WARNING: rejected rule (var_declaration -> array_declaration) in state 10
WARNING: reduce/reduce conflict in state 25 resolved using rule (program_components -> empty)
WARNING: rejected rule (program_component -> empty) in state 25
WARNING: reduce/reduce conflict in state 74 resolved using rule (instructions -> instruction)
WARNING: rejected rule (empty -> <empty>) in state 74
WARNING: reduce/reduce conflict in state 142 resolved using rule (value -> value)
WARNING: rejected rule (comparison -> value comparator value) in state 142
WARNING: Rule (comparison -> value comparator value) is never reduced
