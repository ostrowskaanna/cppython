
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BREAK CHAR CIN CLASS COLON COMMA COMMENT COUT DIVIDE DOUBLE ELSE ENDL EQUAL EQUAL_EQUAL FALSE FLOAT FLOAT_NUMBER FOR GREATER GREATER_EQUAL HASH ID IF IN INCLUDE INT INT_NUMBER LEFT_BR LEFT_BR_CURLY LEFT_BR_SQUARED LESS LESS_EQUAL LIBRARY LONG MINUS MINUS_MINUS MULTIPLY NAMESPACE NOT_EQUAL OR OUT PLUS PLUS_PLUS PRIVATE PROTECTED PUBLIC RETURN RIGHT_BR RIGHT_BR_CURLY RIGHT_BR_SQUARED SEMICOLON SHORT SIGN STD STRING TEXT TRUE USING VAR VOID WHILE\n    start_symbol : program\n    \n    program : program_components\n            | empty\n    \n    program_components : program_component\n        | program_component program_components\n    \n    program_component : function_definition\n        | class_definition\n        | including\n        | using_namespace_std\n        | var_declaration\n        | array_declaration\n        | comment\n        | empty\n    \n    using_namespace_std : USING NAMESPACE STD SEMICOLON\n    \n    including : HASH INCLUDE LIBRARY\n    \n    function_definition : type_function_definition\n        | void_function_definition\n    \n    type_function_definition : type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY\n    \n    void_function_definition : VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    function_var_declaration : var_declaration_no_semicolon\n        | var_declaration_no_semicolon COMMA function_var_declaration\n        | empty\n    \n    var_declaration_no_semicolon : type VAR\n    \n    class_definition : CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON\n    \n    protection_level : PUBLIC COLON\n        | PRIVATE COLON\n        | PROTECTED COLON\n        | empty\n    \n    class_declaration : var_declaration\n        | function_definition\n    \n    class_declarations : class_declaration\n        | class_declaration class_declarations\n        | empty\n    \n    instructions : instruction\n        | instruction instructions\n    \n    instruction : loop\n        | if_statement\n        | assignment\n        | operation\n        | empty\n        | var_declaration\n        | print\n        | input\n        | comment\n    \n    while_loop : WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n        | WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    for_loop_statement : FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n    \n    for_loop : for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    loop : while_loop\n        | for_loop\n    \n    else_statement : ELSE LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    if_statement : IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n                 | IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement\n    \n    comparisons : comparison\n        | comparison conjunction comparisons\n    \n    comparison : value comparator value\n    \n    comparator : LESS\n        | LESS_EQUAL\n        | GREATER\n        | GREATER_EQUAL\n        | EQUAL_EQUAL\n        | NOT_EQUAL\n    \n    operator : PLUS\n        | MINUS\n        | MULTIPLY\n        | DIVIDE\n    \n    type : INT\n        | CHAR\n        | STRING\n        | BOOL\n        | FLOAT\n        | LONG\n        | SHORT\n        | DOUBLE\n    \n    conjunction : AND\n        | OR\n    \n    string_value : TEXT\n        | SIGN\n    \n    number : INT_NUMBER\n        | FLOAT_NUMBER\n    \n    bool_value : TRUE\n        | FALSE\n    \n    value : number\n        | VAR\n        | get_array_element\n        | string_value\n        | bool_value\n    \n    increment : VAR PLUS_PLUS SEMICOLON\n    \n    decrement : VAR MINUS_MINUS SEMICOLON\n    \n    get_array_element : VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED\n    \n    operation : increment\n        | decrement\n        | value operator value SEMICOLON\n    \n    assignment : VAR EQUAL value SEMICOLON\n               | VAR EQUAL VAR SEMICOLON\n               | get_array_element EQUAL value SEMICOLON\n               | get_array_element EQUAL VAR SEMICOLON\n    \n    var_declaration : type VAR SEMICOLON\n        | array_declaration\n        | type VAR EQUAL value SEMICOLON\n        | type VAR EQUAL VAR SEMICOLON\n    \n    array_declaration : type get_array_element SEMICOLON\n    \n    out : OUT VAR\n        | OUT VAR out\n        | OUT TEXT\n        | OUT TEXT out\n        | OUT ENDL\n        | OUT ENDL out\n    \n    in : IN VAR\n       | IN VAR in\n    \n    print : COUT out SEMICOLON\n    \n    input : CIN in SEMICOLON\n    \n    returning : RETURN value SEMICOLON\n    \n    comment : COMMENT\n    empty : change_tab_number : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,19,29,30,38,40,44,51,79,80,91,141,146,],[-118,0,-1,-2,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-5,-13,-15,-101,-105,-14,-104,-103,-24,-19,-18,]),'CLASS':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,51,79,80,91,141,146,],[15,-13,15,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-15,-101,-105,-14,-104,-103,-24,-19,-18,]),'HASH':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,51,79,80,91,141,146,],[16,-13,16,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-15,-101,-105,-14,-104,-103,-24,-19,-18,]),'USING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,51,79,80,91,141,146,],[17,-13,17,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-15,-101,-105,-14,-104,-103,-24,-19,-18,]),'COMMENT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,51,75,79,80,88,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,141,144,145,146,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[19,-13,19,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-15,-101,-105,-14,-102,-104,-103,-119,-119,-24,19,19,19,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-19,-91,-92,-18,-114,-115,19,-98,-97,-96,-99,-100,-119,-119,-119,-51,19,19,19,-55,-45,-46,-56,-119,19,-54,]),'VOID':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,44,46,50,51,71,73,74,75,76,77,78,79,80,91,141,146,],[20,-13,20,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-118,-15,-101,-105,20,-28,-14,20,-29,-30,-102,-25,-26,-27,-104,-103,-24,-19,-18,]),'INT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,50,51,71,73,74,75,76,77,78,79,80,83,88,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,140,141,144,145,146,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[21,-13,21,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-118,-15,-101,21,-105,21,21,-28,-14,21,-29,-30,-102,-25,-26,-27,-104,-103,21,-119,-119,-24,21,21,21,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,164,-19,-91,-92,-18,-114,-115,21,-98,-97,-96,-99,-100,-119,-119,-119,-51,21,21,21,-55,-45,-46,-56,-119,21,-54,]),'CHAR':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,50,51,71,73,74,75,76,77,78,79,80,83,88,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,141,144,145,146,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[22,-13,22,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-118,-15,-101,22,-105,22,22,-28,-14,22,-29,-30,-102,-25,-26,-27,-104,-103,22,-119,-119,-24,22,22,22,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-19,-91,-92,-18,-114,-115,22,-98,-97,-96,-99,-100,-119,-119,-119,-51,22,22,22,-55,-45,-46,-56,-119,22,-54,]),'STRING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,50,51,71,73,74,75,76,77,78,79,80,83,88,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,141,144,145,146,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[23,-13,23,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-118,-15,-101,23,-105,23,23,-28,-14,23,-29,-30,-102,-25,-26,-27,-104,-103,23,-119,-119,-24,23,23,23,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-19,-91,-92,-18,-114,-115,23,-98,-97,-96,-99,-100,-119,-119,-119,-51,23,23,23,-55,-45,-46,-56,-119,23,-54,]),'BOOL':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,50,51,71,73,74,75,76,77,78,79,80,83,88,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,141,144,145,146,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[24,-13,24,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-118,-15,-101,24,-105,24,24,-28,-14,24,-29,-30,-102,-25,-26,-27,-104,-103,24,-119,-119,-24,24,24,24,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-19,-91,-92,-18,-114,-115,24,-98,-97,-96,-99,-100,-119,-119,-119,-51,24,24,24,-55,-45,-46,-56,-119,24,-54,]),'FLOAT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,50,51,71,73,74,75,76,77,78,79,80,83,88,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,141,144,145,146,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[25,-13,25,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-118,-15,-101,25,-105,25,25,-28,-14,25,-29,-30,-102,-25,-26,-27,-104,-103,25,-119,-119,-24,25,25,25,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-19,-91,-92,-18,-114,-115,25,-98,-97,-96,-99,-100,-119,-119,-119,-51,25,25,25,-55,-45,-46,-56,-119,25,-54,]),'LONG':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,50,51,71,73,74,75,76,77,78,79,80,83,88,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,141,144,145,146,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[26,-13,26,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-118,-15,-101,26,-105,26,26,-28,-14,26,-29,-30,-102,-25,-26,-27,-104,-103,26,-119,-119,-24,26,26,26,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-19,-91,-92,-18,-114,-115,26,-98,-97,-96,-99,-100,-119,-119,-119,-51,26,26,26,-55,-45,-46,-56,-119,26,-54,]),'SHORT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,50,51,71,73,74,75,76,77,78,79,80,83,88,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,141,144,145,146,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[27,-13,27,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-118,-15,-101,27,-105,27,27,-28,-14,27,-29,-30,-102,-25,-26,-27,-104,-103,27,-119,-119,-24,27,27,27,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-19,-91,-92,-18,-114,-115,27,-98,-97,-96,-99,-100,-119,-119,-119,-51,27,27,27,-55,-45,-46,-56,-119,27,-54,]),'DOUBLE':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,50,51,71,73,74,75,76,77,78,79,80,83,88,90,91,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,141,144,145,146,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[28,-13,28,-6,-7,-8,-9,-10,-11,-12,-16,-17,-117,-13,-118,-15,-101,28,-105,28,28,-28,-14,28,-29,-30,-102,-25,-26,-27,-104,-103,28,-119,-119,-24,28,28,28,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-19,-91,-92,-18,-114,-115,28,-98,-97,-96,-99,-100,-119,-119,-119,-51,28,28,28,-55,-45,-46,-56,-119,28,-54,]),'RIGHT_BR_CURLY':([13,14,19,37,40,44,46,50,70,71,72,73,74,75,76,77,78,79,80,87,90,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,119,124,126,139,141,144,145,146,155,159,163,165,166,167,179,180,181,188,190,193,194,195,197,198,199,201,202,203,205,206,207,209,215,220,225,230,],[-16,-17,-117,-118,-101,-105,-118,-28,86,-31,-33,-29,-30,-102,-25,-26,-27,-104,-103,-32,-119,-118,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,141,146,-35,-119,-19,-91,-92,-18,-114,-115,-118,-98,-97,-116,-96,-99,-100,195,-119,-119,-119,-51,-118,-118,-118,205,206,207,-55,-45,-46,-56,-119,-118,230,-54,]),'VAR':([15,18,19,20,21,22,23,24,25,26,27,28,40,41,44,64,75,79,80,88,90,92,93,94,97,98,99,100,101,102,103,104,105,106,107,108,112,113,121,125,127,128,129,130,131,132,133,135,137,138,139,144,145,155,159,163,164,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,190,193,194,195,197,198,199,204,205,206,207,209,215,220,221,222,223,224,230,],[31,34,-117,36,-70,-71,-72,-73,-74,-75,-76,-77,-101,52,-105,81,-102,-104,-103,-119,-119,95,95,120,95,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,142,148,148,148,-66,-67,-68,-69,154,156,160,148,-119,-91,-92,-114,-115,95,189,-98,-97,148,-78,-79,148,-60,-61,-62,-63,-64,-65,-96,-99,-100,-119,-119,-119,-51,95,95,95,208,-55,-45,-46,-56,-119,95,226,227,228,229,-54,]),'INCLUDE':([16,],[32,]),'NAMESPACE':([17,],[33,]),'IF':([19,40,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,144,145,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,-105,-102,-104,-103,-119,-119,109,109,109,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-91,-92,-114,-115,109,-98,-97,-96,-99,-100,-119,-119,-119,-51,109,109,109,-55,-45,-46,-56,-119,109,-54,]),'COUT':([19,40,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,144,145,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,-105,-102,-104,-103,-119,-119,114,114,114,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-91,-92,-114,-115,114,-98,-97,-96,-99,-100,-119,-119,-119,-51,114,114,114,-55,-45,-46,-56,-119,114,-54,]),'CIN':([19,40,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,144,145,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,-105,-102,-104,-103,-119,-119,115,115,115,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-91,-92,-114,-115,115,-98,-97,-96,-99,-100,-119,-119,-119,-51,115,115,115,-55,-45,-46,-56,-119,115,-54,]),'WHILE':([19,40,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,144,145,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,-105,-102,-104,-103,-119,-119,116,116,116,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-91,-92,-114,-115,116,-98,-97,-96,-99,-100,-119,-119,-119,-51,116,116,116,-55,-45,-46,-56,-119,116,-54,]),'FOR':([19,40,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,139,144,145,155,159,163,165,166,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,-105,-102,-104,-103,-119,-119,118,118,118,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-119,-91,-92,-114,-115,118,-98,-97,-96,-99,-100,-119,-119,-119,-51,118,118,118,-55,-45,-46,-56,-119,118,-54,]),'INT_NUMBER':([19,40,41,43,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,121,125,127,128,129,130,131,132,133,138,139,144,145,155,159,163,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,190,193,194,195,196,197,198,199,205,206,207,209,211,212,213,214,215,220,230,],[-117,-101,58,68,-105,-102,-104,-103,-119,-119,58,58,58,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,58,58,58,58,-66,-67,-68,-69,58,58,-119,-91,-92,-114,-115,58,-98,-97,58,-78,-79,58,-60,-61,-62,-63,-64,-65,-96,-99,-100,-119,-119,-119,-51,200,58,58,58,-55,-45,-46,-56,216,217,218,219,-119,58,-54,]),'FLOAT_NUMBER':([19,40,41,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,121,125,127,128,129,130,131,132,133,138,139,144,145,155,159,163,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,59,-105,-102,-104,-103,-119,-119,59,59,59,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,59,59,59,59,-66,-67,-68,-69,59,59,-119,-91,-92,-114,-115,59,-98,-97,59,-78,-79,59,-60,-61,-62,-63,-64,-65,-96,-99,-100,-119,-119,-119,-51,59,59,59,-55,-45,-46,-56,-119,59,-54,]),'TEXT':([19,40,41,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,121,125,127,128,129,130,131,132,133,135,138,139,144,145,155,159,163,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,60,-105,-102,-104,-103,-119,-119,60,60,60,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,60,60,60,60,-66,-67,-68,-69,60,157,60,-119,-91,-92,-114,-115,60,-98,-97,60,-78,-79,60,-60,-61,-62,-63,-64,-65,-96,-99,-100,-119,-119,-119,-51,60,60,60,-55,-45,-46,-56,-119,60,-54,]),'SIGN':([19,40,41,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,121,125,127,128,129,130,131,132,133,138,139,144,145,155,159,163,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,61,-105,-102,-104,-103,-119,-119,61,61,61,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,61,61,61,61,-66,-67,-68,-69,61,61,-119,-91,-92,-114,-115,61,-98,-97,61,-78,-79,61,-60,-61,-62,-63,-64,-65,-96,-99,-100,-119,-119,-119,-51,61,61,61,-55,-45,-46,-56,-119,61,-54,]),'TRUE':([19,40,41,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,121,125,127,128,129,130,131,132,133,138,139,144,145,155,159,163,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,62,-105,-102,-104,-103,-119,-119,62,62,62,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,62,62,62,62,-66,-67,-68,-69,62,62,-119,-91,-92,-114,-115,62,-98,-97,62,-78,-79,62,-60,-61,-62,-63,-64,-65,-96,-99,-100,-119,-119,-119,-51,62,62,62,-55,-45,-46,-56,-119,62,-54,]),'FALSE':([19,40,41,44,75,79,80,88,90,92,93,97,98,99,100,101,102,103,104,105,106,107,108,112,113,121,125,127,128,129,130,131,132,133,138,139,144,145,155,159,163,165,166,169,170,171,172,173,174,175,176,177,178,179,180,181,190,193,194,195,197,198,199,205,206,207,209,215,220,230,],[-117,-101,63,-105,-102,-104,-103,-119,-119,63,63,63,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,63,63,63,63,-66,-67,-68,-69,63,63,-119,-91,-92,-114,-115,63,-98,-97,63,-78,-79,63,-60,-61,-62,-63,-64,-65,-96,-99,-100,-119,-119,-119,-51,63,63,63,-55,-45,-46,-56,-119,63,-54,]),'RETURN':([19,40,44,75,79,80,88,92,96,97,98,99,100,101,102,103,104,105,106,107,108,112,113,126,144,145,155,159,165,166,179,180,181,195,205,206,207,209,230,],[-117,-101,-105,-102,-104,-103,-119,-118,125,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-52,-53,-94,-95,-35,-91,-92,-114,-115,-98,-97,-96,-99,-100,-51,-55,-45,-46,-56,-54,]),'LEFT_BR_CURLY':([31,82,85,117,168,186,187,210,235,236,237,238,],[37,88,90,139,190,193,194,215,-47,-48,-49,-50,]),'LIBRARY':([32,],[38,]),'STD':([33,],[39,]),'SEMICOLON':([34,35,39,52,53,54,55,56,57,58,59,60,61,62,63,84,86,120,122,123,134,136,142,143,147,148,152,153,154,156,157,158,160,182,183,184,185,200,216,217,218,219,],[40,44,51,79,80,-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,-93,91,40,144,145,155,159,165,166,167,-87,179,180,181,-106,-108,-110,-112,-107,-109,-111,-113,204,221,222,223,224,]),'EQUAL':([34,84,95,111,120,189,],[41,-93,121,133,41,196,]),'LEFT_BR':([34,36,109,116,118,],[42,45,127,138,140,]),'LEFT_BR_SQUARED':([34,52,95,120,142,148,154,],[43,43,43,43,43,43,43,]),'PUBLIC':([37,],[47,]),'PRIVATE':([37,],[48,]),'PROTECTED':([37,],[49,]),'RIGHT_BR':([42,45,54,55,56,57,58,59,60,61,62,63,65,66,67,69,81,83,84,89,148,149,150,161,162,191,192,231,232,233,234,],[-118,-118,-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,82,-20,-22,85,-23,-118,-93,-21,-87,168,-57,186,187,-58,-59,235,236,237,238,]),'COLON':([47,48,49,],[76,77,78,]),'PLUS':([54,56,57,58,59,60,61,62,63,84,95,110,111,],[-86,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,129,-88,]),'MINUS':([54,56,57,58,59,60,61,62,63,84,95,110,111,],[-86,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,130,-88,]),'MULTIPLY':([54,56,57,58,59,60,61,62,63,84,95,110,111,],[-86,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,131,-88,]),'DIVIDE':([54,56,57,58,59,60,61,62,63,84,95,110,111,],[-86,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,132,-88,]),'LESS':([54,55,56,57,58,59,60,61,62,63,84,148,151,162,208,],[-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,173,-90,211,]),'LESS_EQUAL':([54,55,56,57,58,59,60,61,62,63,84,148,151,162,208,],[-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,174,-90,212,]),'GREATER':([54,55,56,57,58,59,60,61,62,63,84,148,151,162,208,],[-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,175,-90,213,]),'GREATER_EQUAL':([54,55,56,57,58,59,60,61,62,63,84,148,151,162,208,],[-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,176,-90,214,]),'EQUAL_EQUAL':([54,55,56,57,58,59,60,61,62,63,84,148,151,162,],[-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,177,-90,]),'NOT_EQUAL':([54,55,56,57,58,59,60,61,62,63,84,148,151,162,],[-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,178,-90,]),'AND':([54,55,56,57,58,59,60,61,62,63,84,148,150,192,],[-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,170,-59,]),'OR':([54,55,56,57,58,59,60,61,62,63,84,148,150,192,],[-86,-88,-89,-90,-82,-83,-80,-81,-84,-85,-93,-87,171,-59,]),'COMMA':([66,81,],[83,-23,]),'RIGHT_BR_SQUARED':([68,],[84,]),'PLUS_PLUS':([95,226,227,],[122,231,232,]),'MINUS_MINUS':([95,228,229,],[123,233,234,]),'OUT':([114,156,157,158,],[135,135,135,135,]),'IN':([115,160,],[137,137,]),'ENDL':([135,],[158,]),'ELSE':([205,],[210,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start_symbol':([0,],[1,]),'program':([0,],[2,]),'program_components':([0,5,],[3,29,]),'empty':([0,5,37,42,45,46,71,83,92,93,97,163,197,198,199,220,],[4,30,50,67,67,72,72,67,102,102,102,102,102,102,102,102,]),'program_component':([0,5,],[5,5,]),'function_definition':([0,5,46,71,],[6,6,74,74,]),'class_definition':([0,5,],[7,7,]),'including':([0,5,],[8,8,]),'using_namespace_std':([0,5,],[9,9,]),'var_declaration':([0,5,46,71,92,93,97,163,197,198,199,220,],[10,10,73,73,103,103,103,103,103,103,103,103,]),'array_declaration':([0,5,46,71,92,93,97,163,197,198,199,220,],[11,11,75,75,75,75,75,75,75,75,75,75,]),'comment':([0,5,92,93,97,163,197,198,199,220,],[12,12,106,106,106,106,106,106,106,106,]),'type_function_definition':([0,5,46,71,],[13,13,13,13,]),'void_function_definition':([0,5,46,71,],[14,14,14,14,]),'type':([0,5,42,45,46,71,83,92,93,97,163,197,198,199,220,],[18,18,64,64,18,18,64,94,94,94,94,94,94,94,94,]),'get_array_element':([18,41,92,93,94,97,121,125,127,128,133,138,163,169,172,197,198,199,220,],[35,55,111,111,35,111,55,55,55,55,55,55,111,55,55,111,111,111,111,]),'protection_level':([37,],[46,]),'value':([41,92,93,97,121,125,127,128,133,138,163,169,172,197,198,199,220,],[53,110,110,110,143,147,151,152,153,151,110,151,192,110,110,110,110,]),'number':([41,92,93,97,121,125,127,128,133,138,163,169,172,197,198,199,220,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'string_value':([41,92,93,97,121,125,127,128,133,138,163,169,172,197,198,199,220,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'bool_value':([41,92,93,97,121,125,127,128,133,138,163,169,172,197,198,199,220,],[57,57,57,57,57,57,57,57,57,162,57,57,57,57,57,57,57,]),'function_var_declaration':([42,45,83,],[65,69,89,]),'var_declaration_no_semicolon':([42,45,83,],[66,66,66,]),'class_declarations':([46,71,],[70,87,]),'class_declaration':([46,71,],[71,71,]),'change_tab_number':([88,90,139,190,193,194,215,],[92,93,163,197,198,199,220,]),'instructions':([92,93,97,163,197,198,199,220,],[96,119,126,188,201,202,203,225,]),'instruction':([92,93,97,163,197,198,199,220,],[97,97,97,97,97,97,97,97,]),'loop':([92,93,97,163,197,198,199,220,],[98,98,98,98,98,98,98,98,]),'if_statement':([92,93,97,163,197,198,199,220,],[99,99,99,99,99,99,99,99,]),'assignment':([92,93,97,163,197,198,199,220,],[100,100,100,100,100,100,100,100,]),'operation':([92,93,97,163,197,198,199,220,],[101,101,101,101,101,101,101,101,]),'print':([92,93,97,163,197,198,199,220,],[104,104,104,104,104,104,104,104,]),'input':([92,93,97,163,197,198,199,220,],[105,105,105,105,105,105,105,105,]),'while_loop':([92,93,97,163,197,198,199,220,],[107,107,107,107,107,107,107,107,]),'for_loop':([92,93,97,163,197,198,199,220,],[108,108,108,108,108,108,108,108,]),'increment':([92,93,97,163,197,198,199,220,],[112,112,112,112,112,112,112,112,]),'decrement':([92,93,97,163,197,198,199,220,],[113,113,113,113,113,113,113,113,]),'for_loop_statement':([92,93,97,163,197,198,199,220,],[117,117,117,117,117,117,117,117,]),'returning':([96,],[124,]),'operator':([110,],[128,]),'out':([114,156,157,158,],[134,182,183,184,]),'in':([115,160,],[136,185,]),'comparisons':([127,138,169,],[149,161,191,]),'comparison':([127,138,169,],[150,150,150,]),'conjunction':([150,],[169,]),'comparator':([151,],[172,]),'else_statement':([205,],[209,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start_symbol","S'",1,None,None,None),
  ('start_symbol -> program','start_symbol',1,'p_start_symbol','Parser.py',164),
  ('program -> program_components','program',1,'p_program','Parser.py',172),
  ('program -> empty','program',1,'p_program','Parser.py',173),
  ('program_components -> program_component','program_components',1,'p_program_components','Parser.py',180),
  ('program_components -> program_component program_components','program_components',2,'p_program_components','Parser.py',181),
  ('program_component -> function_definition','program_component',1,'p_program_component','Parser.py',191),
  ('program_component -> class_definition','program_component',1,'p_program_component','Parser.py',192),
  ('program_component -> including','program_component',1,'p_program_component','Parser.py',193),
  ('program_component -> using_namespace_std','program_component',1,'p_program_component','Parser.py',194),
  ('program_component -> var_declaration','program_component',1,'p_program_component','Parser.py',195),
  ('program_component -> array_declaration','program_component',1,'p_program_component','Parser.py',196),
  ('program_component -> comment','program_component',1,'p_program_component','Parser.py',197),
  ('program_component -> empty','program_component',1,'p_program_component','Parser.py',198),
  ('using_namespace_std -> USING NAMESPACE STD SEMICOLON','using_namespace_std',4,'p_using_namespace_std','Parser.py',205),
  ('including -> HASH INCLUDE LIBRARY','including',3,'p_including','Parser.py',213),
  ('function_definition -> type_function_definition','function_definition',1,'p_function_definition','Parser.py',222),
  ('function_definition -> void_function_definition','function_definition',1,'p_function_definition','Parser.py',223),
  ('type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY','type_function_definition',10,'p_type_function_definition','Parser.py',230),
  ('void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','void_function_definition',9,'p_void_function_definition','Parser.py',240),
  ('function_var_declaration -> var_declaration_no_semicolon','function_var_declaration',1,'p_function_var_declaration','Parser.py',251),
  ('function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration','function_var_declaration',3,'p_function_var_declaration','Parser.py',252),
  ('function_var_declaration -> empty','function_var_declaration',1,'p_function_var_declaration','Parser.py',253),
  ('var_declaration_no_semicolon -> type VAR','var_declaration_no_semicolon',2,'p_var_declaration_no_semicolon','Parser.py',262),
  ('class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON','class_definition',7,'p_class_definition','Parser.py',270),
  ('protection_level -> PUBLIC COLON','protection_level',2,'p_protection_level','Parser.py',276),
  ('protection_level -> PRIVATE COLON','protection_level',2,'p_protection_level','Parser.py',277),
  ('protection_level -> PROTECTED COLON','protection_level',2,'p_protection_level','Parser.py',278),
  ('protection_level -> empty','protection_level',1,'p_protection_level','Parser.py',279),
  ('class_declaration -> var_declaration','class_declaration',1,'p_class_declaration','Parser.py',289),
  ('class_declaration -> function_definition','class_declaration',1,'p_class_declaration','Parser.py',290),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','Parser.py',296),
  ('class_declarations -> class_declaration class_declarations','class_declarations',2,'p_class_declarations','Parser.py',297),
  ('class_declarations -> empty','class_declarations',1,'p_class_declarations','Parser.py',298),
  ('instructions -> instruction','instructions',1,'p_instructions','Parser.py',308),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','Parser.py',309),
  ('instruction -> loop','instruction',1,'p_instruction','Parser.py',318),
  ('instruction -> if_statement','instruction',1,'p_instruction','Parser.py',319),
  ('instruction -> assignment','instruction',1,'p_instruction','Parser.py',320),
  ('instruction -> operation','instruction',1,'p_instruction','Parser.py',321),
  ('instruction -> empty','instruction',1,'p_instruction','Parser.py',322),
  ('instruction -> var_declaration','instruction',1,'p_instruction','Parser.py',323),
  ('instruction -> print','instruction',1,'p_instruction','Parser.py',324),
  ('instruction -> input','instruction',1,'p_instruction','Parser.py',325),
  ('instruction -> comment','instruction',1,'p_instruction','Parser.py',326),
  ('while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',332),
  ('while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',333),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',342),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',343),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',344),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',345),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','for_loop',5,'p_for_loop','Parser.py',352),
  ('loop -> while_loop','loop',1,'p_loop','Parser.py',362),
  ('loop -> for_loop','loop',1,'p_loop','Parser.py',363),
  ('else_statement -> ELSE LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','else_statement',5,'p_else_statement','Parser.py',374),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','if_statement',8,'p_if_statement','Parser.py',385),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement','if_statement',9,'p_if_statement','Parser.py',386),
  ('comparisons -> comparison','comparisons',1,'p_comparisons','Parser.py',401),
  ('comparisons -> comparison conjunction comparisons','comparisons',3,'p_comparisons','Parser.py',402),
  ('comparison -> value comparator value','comparison',3,'p_comparison','Parser.py',411),
  ('comparator -> LESS','comparator',1,'p_comparator','Parser.py',418),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','Parser.py',419),
  ('comparator -> GREATER','comparator',1,'p_comparator','Parser.py',420),
  ('comparator -> GREATER_EQUAL','comparator',1,'p_comparator','Parser.py',421),
  ('comparator -> EQUAL_EQUAL','comparator',1,'p_comparator','Parser.py',422),
  ('comparator -> NOT_EQUAL','comparator',1,'p_comparator','Parser.py',423),
  ('operator -> PLUS','operator',1,'p_operator','Parser.py',429),
  ('operator -> MINUS','operator',1,'p_operator','Parser.py',430),
  ('operator -> MULTIPLY','operator',1,'p_operator','Parser.py',431),
  ('operator -> DIVIDE','operator',1,'p_operator','Parser.py',432),
  ('type -> INT','type',1,'p_type','Parser.py',438),
  ('type -> CHAR','type',1,'p_type','Parser.py',439),
  ('type -> STRING','type',1,'p_type','Parser.py',440),
  ('type -> BOOL','type',1,'p_type','Parser.py',441),
  ('type -> FLOAT','type',1,'p_type','Parser.py',442),
  ('type -> LONG','type',1,'p_type','Parser.py',443),
  ('type -> SHORT','type',1,'p_type','Parser.py',444),
  ('type -> DOUBLE','type',1,'p_type','Parser.py',445),
  ('conjunction -> AND','conjunction',1,'p_conjunction','Parser.py',452),
  ('conjunction -> OR','conjunction',1,'p_conjunction','Parser.py',453),
  ('string_value -> TEXT','string_value',1,'p_string_value','Parser.py',459),
  ('string_value -> SIGN','string_value',1,'p_string_value','Parser.py',460),
  ('number -> INT_NUMBER','number',1,'p_number','Parser.py',466),
  ('number -> FLOAT_NUMBER','number',1,'p_number','Parser.py',467),
  ('bool_value -> TRUE','bool_value',1,'p_bool_value','Parser.py',473),
  ('bool_value -> FALSE','bool_value',1,'p_bool_value','Parser.py',474),
  ('value -> number','value',1,'p_value','Parser.py',480),
  ('value -> VAR','value',1,'p_value','Parser.py',481),
  ('value -> get_array_element','value',1,'p_value','Parser.py',482),
  ('value -> string_value','value',1,'p_value','Parser.py',483),
  ('value -> bool_value','value',1,'p_value','Parser.py',484),
  ('increment -> VAR PLUS_PLUS SEMICOLON','increment',3,'p_increment','Parser.py',490),
  ('decrement -> VAR MINUS_MINUS SEMICOLON','decrement',3,'p_decrement','Parser.py',497),
  ('get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',504),
  ('operation -> increment','operation',1,'p_operation','Parser.py',511),
  ('operation -> decrement','operation',1,'p_operation','Parser.py',512),
  ('operation -> value operator value SEMICOLON','operation',4,'p_operation','Parser.py',513),
  ('assignment -> VAR EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',527),
  ('assignment -> VAR EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',528),
  ('assignment -> get_array_element EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',529),
  ('assignment -> get_array_element EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',530),
  ('var_declaration -> type VAR SEMICOLON','var_declaration',3,'p_var_declaration','Parser.py',541),
  ('var_declaration -> array_declaration','var_declaration',1,'p_var_declaration','Parser.py',542),
  ('var_declaration -> type VAR EQUAL value SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',543),
  ('var_declaration -> type VAR EQUAL VAR SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',544),
  ('array_declaration -> type get_array_element SEMICOLON','array_declaration',3,'p_array_declaration','Parser.py',556),
  ('out -> OUT VAR','out',2,'p_out','Parser.py',564),
  ('out -> OUT VAR out','out',3,'p_out','Parser.py',565),
  ('out -> OUT TEXT','out',2,'p_out','Parser.py',566),
  ('out -> OUT TEXT out','out',3,'p_out','Parser.py',567),
  ('out -> OUT ENDL','out',2,'p_out','Parser.py',568),
  ('out -> OUT ENDL out','out',3,'p_out','Parser.py',569),
  ('in -> IN VAR','in',2,'p_in','Parser.py',585),
  ('in -> IN VAR in','in',3,'p_in','Parser.py',586),
  ('print -> COUT out SEMICOLON','print',3,'p_print','Parser.py',596),
  ('input -> CIN in SEMICOLON','input',3,'p_input','Parser.py',608),
  ('returning -> RETURN value SEMICOLON','returning',3,'p_returning','Parser.py',615),
  ('comment -> COMMENT','comment',1,'p_comment','Parser.py',621),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',626),
  ('change_tab_number -> <empty>','change_tab_number',0,'p_change_tab_number','Parser.py',636),
]
