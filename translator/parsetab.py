
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR CIN CLASS COMMA COMMENT COUT DIVIDE DOUBLE ELSE ENDL EQUAL EQUAL_EQUAL FALSE FLOAT FLOAT_NUMBER FOR GREATER GREATER_EQUAL HASH ID IF IN INCLUDE INT INT_NUMBER LEFT_BR LEFT_BR_CURLY LEFT_BR_SQUARED LESS LESS_EQUAL LIBRARY LONG MINUS MINUS_MINUS MULTIPLY NAMESPACE NOT_EQUAL OR OUT PLUS PLUS_PLUS RETURN RIGHT_BR RIGHT_BR_CURLY RIGHT_BR_SQUARED SEMICOLON SHORT SIGN STD STRING TEXT TRUE USING VAR VOID WHILE\n    start_symbol : program\n    \n    program : program_components\n            | empty\n    \n    program_components : program_component\n        | program_component program_components\n    \n    program_component : function_definition\n        | class_definition\n        | including\n        | using_namespace_std\n        | var_declaration\n        | array_declaration\n        | comment\n        | empty\n    \n    using_namespace_std : USING NAMESPACE STD SEMICOLON\n    \n    including : HASH INCLUDE LIBRARY\n    \n    function_definition : type_function_definition\n        | void_function_definition\n    \n    type_function_definition : type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY\n    \n    void_function_definition : VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    function_var_declaration : var_declaration_no_semicolon\n        | var_declaration_no_semicolon COMMA function_var_declaration\n        | empty\n    \n    var_declaration_no_semicolon : type VAR\n    \n    class_definition : CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON\n    \n    class_declaration : var_declaration\n        | function_definition\n    \n    class_declarations : class_declaration\n        | class_declaration class_declarations\n        | empty\n    \n    instructions : instruction\n        | instruction instructions\n    \n    instruction : loop\n        | if_statement\n        | assignment\n        | operation\n        | empty\n        | var_declaration\n        | print\n        | input\n        | comment\n    \n    while_loop : WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n        | WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    for_loop_statement : FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n    \n    for_loop : for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    loop : while_loop\n        | for_loop\n    \n    else_statement : ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    if_statement : IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n                 | IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY  else_statement\n    \n    comparisons : comparison\n        | comparison conjunction comparisons\n    \n    comparison : value comparator value\n    \n    comparator : LESS\n        | LESS_EQUAL\n        | GREATER\n        | GREATER_EQUAL\n        | EQUAL_EQUAL\n        | NOT_EQUAL\n    \n    operator : PLUS\n        | MINUS\n        | MULTIPLY\n        | DIVIDE\n    \n    type : INT\n        | CHAR\n        | STRING\n        | BOOL\n        | FLOAT\n        | LONG\n        | SHORT\n        | DOUBLE\n    \n    conjunction : AND\n        | OR\n    \n    string_value : TEXT\n        | SIGN\n    \n    number : INT_NUMBER\n        | FLOAT_NUMBER\n    \n    bool_value : TRUE\n        | FALSE\n    \n    value : number\n        | VAR\n        | get_array_element\n        | string_value\n        | bool_value\n    \n    increment : VAR PLUS_PLUS SEMICOLON\n    \n    decrement : VAR MINUS_MINUS SEMICOLON\n    \n    get_array_element : VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED\n    \n    operation : increment\n        | decrement\n        | value operator value SEMICOLON\n    \n    assignment : VAR EQUAL value SEMICOLON\n               | VAR EQUAL VAR SEMICOLON\n               | get_array_element EQUAL value SEMICOLON\n               | get_array_element EQUAL VAR SEMICOLON\n    \n    var_declaration : type VAR SEMICOLON\n        | array_declaration\n        | type VAR EQUAL value SEMICOLON\n        | type VAR EQUAL VAR SEMICOLON\n    \n    array_declaration : type get_array_element SEMICOLON\n    \n    out : OUT VAR\n        | OUT VAR out\n        | OUT TEXT\n        | OUT TEXT out\n        | OUT ENDL\n        | OUT ENDL out\n    \n    in : IN VAR\n       | IN VAR in\n    \n    print : COUT out SEMICOLON\n    \n    input : CIN in SEMICOLON\n    \n    returning : RETURN value SEMICOLON\n    \n    comment : COMMENT\n    empty : change_tab_number : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,19,29,30,38,40,44,52,73,74,80,133,138,],[-114,0,-1,-2,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-5,-13,-15,-97,-101,-14,-100,-99,-24,-19,-18,]),'CLASS':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,52,73,74,80,133,138,],[15,-13,15,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-15,-97,-101,-14,-100,-99,-24,-19,-18,]),'HASH':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,52,73,74,80,133,138,],[16,-13,16,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-15,-97,-101,-14,-100,-99,-24,-19,-18,]),'USING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,52,73,74,80,133,138,],[17,-13,17,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-15,-97,-101,-14,-100,-99,-24,-19,-18,]),'COMMENT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,51,52,73,74,80,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[19,-13,19,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-15,-97,-101,-98,-14,-100,-99,-24,-115,-115,19,19,19,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,19,-94,-93,-92,-95,-96,-115,-115,-115,-47,19,19,19,-51,-41,-42,-52,19,-50,]),'VOID':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,44,47,49,50,51,52,73,74,80,133,138,],[20,-13,20,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,20,-15,-97,-101,20,-25,-26,-98,-14,-100,-99,-24,-19,-18,]),'INT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,47,49,50,51,52,73,74,77,80,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,132,133,136,137,138,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[21,-13,21,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,21,-15,-97,21,-101,21,21,-25,-26,-98,-14,-100,-99,21,-24,-115,-115,21,21,21,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,156,-19,-87,-88,-18,-110,-111,21,-94,-93,-92,-95,-96,-115,-115,-115,-47,21,21,21,-51,-41,-42,-52,21,-50,]),'CHAR':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,47,49,50,51,52,73,74,77,80,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[22,-13,22,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,22,-15,-97,22,-101,22,22,-25,-26,-98,-14,-100,-99,22,-24,-115,-115,22,22,22,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,22,-94,-93,-92,-95,-96,-115,-115,-115,-47,22,22,22,-51,-41,-42,-52,22,-50,]),'STRING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,47,49,50,51,52,73,74,77,80,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[23,-13,23,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,23,-15,-97,23,-101,23,23,-25,-26,-98,-14,-100,-99,23,-24,-115,-115,23,23,23,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,23,-94,-93,-92,-95,-96,-115,-115,-115,-47,23,23,23,-51,-41,-42,-52,23,-50,]),'BOOL':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,47,49,50,51,52,73,74,77,80,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[24,-13,24,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,24,-15,-97,24,-101,24,24,-25,-26,-98,-14,-100,-99,24,-24,-115,-115,24,24,24,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,24,-94,-93,-92,-95,-96,-115,-115,-115,-47,24,24,24,-51,-41,-42,-52,24,-50,]),'FLOAT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,47,49,50,51,52,73,74,77,80,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[25,-13,25,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,25,-15,-97,25,-101,25,25,-25,-26,-98,-14,-100,-99,25,-24,-115,-115,25,25,25,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,25,-94,-93,-92,-95,-96,-115,-115,-115,-47,25,25,25,-51,-41,-42,-52,25,-50,]),'LONG':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,47,49,50,51,52,73,74,77,80,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[26,-13,26,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,26,-15,-97,26,-101,26,26,-25,-26,-98,-14,-100,-99,26,-24,-115,-115,26,26,26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,26,-94,-93,-92,-95,-96,-115,-115,-115,-47,26,26,26,-51,-41,-42,-52,26,-50,]),'SHORT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,47,49,50,51,52,73,74,77,80,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[27,-13,27,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,27,-15,-97,27,-101,27,27,-25,-26,-98,-14,-100,-99,27,-24,-115,-115,27,27,27,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,27,-94,-93,-92,-95,-96,-115,-115,-115,-47,27,27,27,-51,-41,-42,-52,27,-50,]),'DOUBLE':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,47,49,50,51,52,73,74,77,80,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[28,-13,28,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,28,-15,-97,28,-101,28,28,-25,-26,-98,-14,-100,-99,28,-24,-115,-115,28,28,28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,28,-94,-93,-92,-95,-96,-115,-115,-115,-47,28,28,28,-51,-41,-42,-52,28,-50,]),'RIGHT_BR_CURLY':([13,14,19,37,40,44,46,47,48,49,50,51,72,73,74,83,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,111,116,118,131,133,136,137,138,147,151,155,157,158,159,171,172,173,180,182,185,186,187,189,190,191,193,194,195,197,198,199,201,207,212,217,],[-16,-17,-113,-114,-97,-101,71,-27,-29,-25,-26,-98,-28,-100,-99,-115,-114,-30,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,133,138,-31,-115,-19,-87,-88,-18,-110,-111,-114,-94,-93,-112,-92,-95,-96,187,-115,-115,-115,-47,-114,-114,-114,197,198,199,-51,-41,-42,-52,-114,217,-50,]),'VAR':([15,18,19,20,21,22,23,24,25,26,27,28,40,41,44,51,65,73,74,81,83,84,85,86,89,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,127,129,130,131,136,137,147,151,155,156,157,158,161,162,163,164,165,166,167,168,169,170,171,172,173,182,185,186,187,189,190,191,196,197,198,199,201,207,213,214,215,216,217,],[31,34,-113,36,-66,-67,-68,-69,-70,-71,-72,-73,-97,53,-101,-98,75,-100,-99,-115,-115,87,87,112,87,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,134,140,140,140,-62,-63,-64,-65,146,148,152,140,-115,-87,-88,-110,-111,87,181,-94,-93,140,-74,-75,140,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,87,87,87,200,-51,-41,-42,-52,87,218,219,220,221,-50,]),'INCLUDE':([16,],[32,]),'NAMESPACE':([17,],[33,]),'IF':([19,40,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,-101,-98,-100,-99,-115,-115,101,101,101,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,101,-94,-93,-92,-95,-96,-115,-115,-115,-47,101,101,101,-51,-41,-42,-52,101,-50,]),'COUT':([19,40,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,-101,-98,-100,-99,-115,-115,106,106,106,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,106,-94,-93,-92,-95,-96,-115,-115,-115,-47,106,106,106,-51,-41,-42,-52,106,-50,]),'CIN':([19,40,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,-101,-98,-100,-99,-115,-115,107,107,107,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,107,-94,-93,-92,-95,-96,-115,-115,-115,-47,107,107,107,-51,-41,-42,-52,107,-50,]),'WHILE':([19,40,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,-101,-98,-100,-99,-115,-115,108,108,108,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,108,-94,-93,-92,-95,-96,-115,-115,-115,-47,108,108,108,-51,-41,-42,-52,108,-50,]),'FOR':([19,40,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,155,157,158,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,-101,-98,-100,-99,-115,-115,110,110,110,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,110,-94,-93,-92,-95,-96,-115,-115,-115,-47,110,110,110,-51,-41,-42,-52,110,-50,]),'INT_NUMBER':([19,40,41,43,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,130,131,136,137,147,151,155,157,158,161,162,163,164,165,166,167,168,169,170,171,172,173,182,185,186,187,188,189,190,191,197,198,199,201,203,204,205,206,207,217,],[-113,-97,59,69,-101,-98,-100,-99,-115,-115,59,59,59,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,59,59,59,59,-62,-63,-64,-65,59,59,-115,-87,-88,-110,-111,59,-94,-93,59,-74,-75,59,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,192,59,59,59,-51,-41,-42,-52,208,209,210,211,59,-50,]),'FLOAT_NUMBER':([19,40,41,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,130,131,136,137,147,151,155,157,158,161,162,163,164,165,166,167,168,169,170,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,60,-101,-98,-100,-99,-115,-115,60,60,60,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,60,60,60,60,-62,-63,-64,-65,60,60,-115,-87,-88,-110,-111,60,-94,-93,60,-74,-75,60,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,60,60,60,-51,-41,-42,-52,60,-50,]),'TEXT':([19,40,41,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,127,130,131,136,137,147,151,155,157,158,161,162,163,164,165,166,167,168,169,170,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,61,-101,-98,-100,-99,-115,-115,61,61,61,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,61,61,61,61,-62,-63,-64,-65,61,149,61,-115,-87,-88,-110,-111,61,-94,-93,61,-74,-75,61,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,61,61,61,-51,-41,-42,-52,61,-50,]),'SIGN':([19,40,41,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,130,131,136,137,147,151,155,157,158,161,162,163,164,165,166,167,168,169,170,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,62,-101,-98,-100,-99,-115,-115,62,62,62,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,62,62,62,62,-62,-63,-64,-65,62,62,-115,-87,-88,-110,-111,62,-94,-93,62,-74,-75,62,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,62,62,62,-51,-41,-42,-52,62,-50,]),'TRUE':([19,40,41,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,130,131,136,137,147,151,155,157,158,161,162,163,164,165,166,167,168,169,170,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,63,-101,-98,-100,-99,-115,-115,63,63,63,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,63,63,63,63,-62,-63,-64,-65,63,63,-115,-87,-88,-110,-111,63,-94,-93,63,-74,-75,63,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,63,63,63,-51,-41,-42,-52,63,-50,]),'FALSE':([19,40,41,44,51,73,74,81,83,84,85,89,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,130,131,136,137,147,151,155,157,158,161,162,163,164,165,166,167,168,169,170,171,172,173,182,185,186,187,189,190,191,197,198,199,201,207,217,],[-113,-97,64,-101,-98,-100,-99,-115,-115,64,64,64,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,64,64,64,64,-62,-63,-64,-65,64,64,-115,-87,-88,-110,-111,64,-94,-93,64,-74,-75,64,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,64,64,64,-51,-41,-42,-52,64,-50,]),'RETURN':([19,40,44,51,73,74,81,84,88,89,90,91,92,93,94,95,96,97,98,99,100,104,105,118,136,137,147,151,157,158,171,172,173,187,197,198,199,201,217,],[-113,-97,-101,-98,-100,-99,-115,-114,117,-30,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-31,-87,-88,-110,-111,-94,-93,-92,-95,-96,-47,-51,-41,-42,-52,-50,]),'LEFT_BR_CURLY':([31,76,79,109,160,178,179,202,226,227,228,229,],[37,81,83,131,182,185,186,207,-43,-44,-45,-46,]),'LIBRARY':([32,],[38,]),'STD':([33,],[39,]),'SEMICOLON':([34,35,39,53,54,55,56,57,58,59,60,61,62,63,64,71,78,112,114,115,126,128,134,135,139,140,144,145,146,148,149,150,152,174,175,176,177,192,208,209,210,211,],[40,44,52,73,74,-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,80,-89,40,136,137,147,151,157,158,159,-83,171,172,173,-102,-104,-106,-108,-103,-105,-107,-109,196,213,214,215,216,]),'EQUAL':([34,78,87,103,112,181,],[41,-89,113,125,41,188,]),'LEFT_BR':([34,36,101,108,110,],[42,45,119,130,132,]),'LEFT_BR_SQUARED':([34,53,87,112,134,140,146,],[43,43,43,43,43,43,43,]),'RIGHT_BR':([42,45,55,56,57,58,59,60,61,62,63,64,66,67,68,70,75,77,78,82,140,141,142,153,154,183,184,222,223,224,225,],[-114,-114,-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,76,-20,-22,79,-23,-114,-89,-21,-83,160,-53,178,179,-54,-55,226,227,228,229,]),'PLUS':([55,57,58,59,60,61,62,63,64,78,87,102,103,],[-82,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,121,-84,]),'MINUS':([55,57,58,59,60,61,62,63,64,78,87,102,103,],[-82,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,122,-84,]),'MULTIPLY':([55,57,58,59,60,61,62,63,64,78,87,102,103,],[-82,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,123,-84,]),'DIVIDE':([55,57,58,59,60,61,62,63,64,78,87,102,103,],[-82,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,124,-84,]),'LESS':([55,56,57,58,59,60,61,62,63,64,78,140,143,154,200,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,165,-86,203,]),'LESS_EQUAL':([55,56,57,58,59,60,61,62,63,64,78,140,143,154,200,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,166,-86,204,]),'GREATER':([55,56,57,58,59,60,61,62,63,64,78,140,143,154,200,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,167,-86,205,]),'GREATER_EQUAL':([55,56,57,58,59,60,61,62,63,64,78,140,143,154,200,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,168,-86,206,]),'EQUAL_EQUAL':([55,56,57,58,59,60,61,62,63,64,78,140,143,154,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,169,-86,]),'NOT_EQUAL':([55,56,57,58,59,60,61,62,63,64,78,140,143,154,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,170,-86,]),'AND':([55,56,57,58,59,60,61,62,63,64,78,140,142,184,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,162,-55,]),'OR':([55,56,57,58,59,60,61,62,63,64,78,140,142,184,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,163,-55,]),'COMMA':([67,75,],[77,-23,]),'RIGHT_BR_SQUARED':([69,],[78,]),'PLUS_PLUS':([87,218,219,],[114,222,223,]),'MINUS_MINUS':([87,220,221,],[115,224,225,]),'OUT':([106,148,149,150,],[127,127,127,127,]),'IN':([107,152,],[129,129,]),'ENDL':([127,],[150,]),'ELSE':([197,],[202,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start_symbol':([0,],[1,]),'program':([0,],[2,]),'program_components':([0,5,],[3,29,]),'empty':([0,5,37,42,45,47,77,84,85,89,155,189,190,191,207,],[4,30,48,68,68,48,68,94,94,94,94,94,94,94,94,]),'program_component':([0,5,],[5,5,]),'function_definition':([0,5,37,47,],[6,6,50,50,]),'class_definition':([0,5,],[7,7,]),'including':([0,5,],[8,8,]),'using_namespace_std':([0,5,],[9,9,]),'var_declaration':([0,5,37,47,84,85,89,155,189,190,191,207,],[10,10,49,49,95,95,95,95,95,95,95,95,]),'array_declaration':([0,5,37,47,84,85,89,155,189,190,191,207,],[11,11,51,51,51,51,51,51,51,51,51,51,]),'comment':([0,5,84,85,89,155,189,190,191,207,],[12,12,98,98,98,98,98,98,98,98,]),'type_function_definition':([0,5,37,47,],[13,13,13,13,]),'void_function_definition':([0,5,37,47,],[14,14,14,14,]),'type':([0,5,37,42,45,47,77,84,85,89,155,189,190,191,207,],[18,18,18,65,65,18,65,86,86,86,86,86,86,86,86,]),'get_array_element':([18,41,84,85,86,89,113,117,119,120,125,130,155,161,164,189,190,191,207,],[35,56,103,103,35,103,56,56,56,56,56,56,103,56,56,103,103,103,103,]),'class_declarations':([37,47,],[46,72,]),'class_declaration':([37,47,],[47,47,]),'value':([41,84,85,89,113,117,119,120,125,130,155,161,164,189,190,191,207,],[54,102,102,102,135,139,143,144,145,143,102,143,184,102,102,102,102,]),'number':([41,84,85,89,113,117,119,120,125,130,155,161,164,189,190,191,207,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'string_value':([41,84,85,89,113,117,119,120,125,130,155,161,164,189,190,191,207,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'bool_value':([41,84,85,89,113,117,119,120,125,130,155,161,164,189,190,191,207,],[58,58,58,58,58,58,58,58,58,154,58,58,58,58,58,58,58,]),'function_var_declaration':([42,45,77,],[66,70,82,]),'var_declaration_no_semicolon':([42,45,77,],[67,67,67,]),'change_tab_number':([81,83,131,182,185,186,],[84,85,155,189,190,191,]),'instructions':([84,85,89,155,189,190,191,207,],[88,111,118,180,193,194,195,212,]),'instruction':([84,85,89,155,189,190,191,207,],[89,89,89,89,89,89,89,89,]),'loop':([84,85,89,155,189,190,191,207,],[90,90,90,90,90,90,90,90,]),'if_statement':([84,85,89,155,189,190,191,207,],[91,91,91,91,91,91,91,91,]),'assignment':([84,85,89,155,189,190,191,207,],[92,92,92,92,92,92,92,92,]),'operation':([84,85,89,155,189,190,191,207,],[93,93,93,93,93,93,93,93,]),'print':([84,85,89,155,189,190,191,207,],[96,96,96,96,96,96,96,96,]),'input':([84,85,89,155,189,190,191,207,],[97,97,97,97,97,97,97,97,]),'while_loop':([84,85,89,155,189,190,191,207,],[99,99,99,99,99,99,99,99,]),'for_loop':([84,85,89,155,189,190,191,207,],[100,100,100,100,100,100,100,100,]),'increment':([84,85,89,155,189,190,191,207,],[104,104,104,104,104,104,104,104,]),'decrement':([84,85,89,155,189,190,191,207,],[105,105,105,105,105,105,105,105,]),'for_loop_statement':([84,85,89,155,189,190,191,207,],[109,109,109,109,109,109,109,109,]),'returning':([88,],[116,]),'operator':([102,],[120,]),'out':([106,148,149,150,],[126,174,175,176,]),'in':([107,152,],[128,177,]),'comparisons':([119,130,161,],[141,153,183,]),'comparison':([119,130,161,],[142,142,142,]),'conjunction':([142,],[161,]),'comparator':([143,],[164,]),'else_statement':([197,],[201,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start_symbol","S'",1,None,None,None),
  ('start_symbol -> program','start_symbol',1,'p_start_symbol','Parser.py',158),
  ('program -> program_components','program',1,'p_program','Parser.py',166),
  ('program -> empty','program',1,'p_program','Parser.py',167),
  ('program_components -> program_component','program_components',1,'p_program_components','Parser.py',174),
  ('program_components -> program_component program_components','program_components',2,'p_program_components','Parser.py',175),
  ('program_component -> function_definition','program_component',1,'p_program_component','Parser.py',185),
  ('program_component -> class_definition','program_component',1,'p_program_component','Parser.py',186),
  ('program_component -> including','program_component',1,'p_program_component','Parser.py',187),
  ('program_component -> using_namespace_std','program_component',1,'p_program_component','Parser.py',188),
  ('program_component -> var_declaration','program_component',1,'p_program_component','Parser.py',189),
  ('program_component -> array_declaration','program_component',1,'p_program_component','Parser.py',190),
  ('program_component -> comment','program_component',1,'p_program_component','Parser.py',191),
  ('program_component -> empty','program_component',1,'p_program_component','Parser.py',192),
  ('using_namespace_std -> USING NAMESPACE STD SEMICOLON','using_namespace_std',4,'p_using_namespace_std','Parser.py',200),
  ('including -> HASH INCLUDE LIBRARY','including',3,'p_including','Parser.py',208),
  ('function_definition -> type_function_definition','function_definition',1,'p_function_definition','Parser.py',217),
  ('function_definition -> void_function_definition','function_definition',1,'p_function_definition','Parser.py',218),
  ('type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY','type_function_definition',10,'p_type_function_definition','Parser.py',225),
  ('void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','void_function_definition',9,'p_void_function_definition','Parser.py',234),
  ('function_var_declaration -> var_declaration_no_semicolon','function_var_declaration',1,'p_function_var_declaration','Parser.py',243),
  ('function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration','function_var_declaration',3,'p_function_var_declaration','Parser.py',244),
  ('function_var_declaration -> empty','function_var_declaration',1,'p_function_var_declaration','Parser.py',245),
  ('var_declaration_no_semicolon -> type VAR','var_declaration_no_semicolon',2,'p_var_declaration_no_semicolon','Parser.py',255),
  ('class_definition -> CLASS VAR LEFT_BR_CURLY class_declarations RIGHT_BR_CURLY SEMICOLON','class_definition',6,'p_class_definition','Parser.py',263),
  ('class_declaration -> var_declaration','class_declaration',1,'p_class_declaration','Parser.py',270),
  ('class_declaration -> function_definition','class_declaration',1,'p_class_declaration','Parser.py',271),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','Parser.py',278),
  ('class_declarations -> class_declaration class_declarations','class_declarations',2,'p_class_declarations','Parser.py',279),
  ('class_declarations -> empty','class_declarations',1,'p_class_declarations','Parser.py',280),
  ('instructions -> instruction','instructions',1,'p_instructions','Parser.py',290),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','Parser.py',291),
  ('instruction -> loop','instruction',1,'p_instruction','Parser.py',300),
  ('instruction -> if_statement','instruction',1,'p_instruction','Parser.py',301),
  ('instruction -> assignment','instruction',1,'p_instruction','Parser.py',302),
  ('instruction -> operation','instruction',1,'p_instruction','Parser.py',303),
  ('instruction -> empty','instruction',1,'p_instruction','Parser.py',304),
  ('instruction -> var_declaration','instruction',1,'p_instruction','Parser.py',305),
  ('instruction -> print','instruction',1,'p_instruction','Parser.py',306),
  ('instruction -> input','instruction',1,'p_instruction','Parser.py',307),
  ('instruction -> comment','instruction',1,'p_instruction','Parser.py',308),
  ('while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',318),
  ('while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',319),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',328),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',329),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',330),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',331),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','for_loop',5,'p_for_loop','Parser.py',358),
  ('loop -> while_loop','loop',1,'p_loop','Parser.py',367),
  ('loop -> for_loop','loop',1,'p_loop','Parser.py',368),
  ('else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY','else_statement',4,'p_else_statement','Parser.py',375),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','if_statement',8,'p_if_statement','Parser.py',387),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement','if_statement',9,'p_if_statement','Parser.py',388),
  ('comparisons -> comparison','comparisons',1,'p_comparisons','Parser.py',400),
  ('comparisons -> comparison conjunction comparisons','comparisons',3,'p_comparisons','Parser.py',401),
  ('comparison -> value comparator value','comparison',3,'p_comparison','Parser.py',411),
  ('comparator -> LESS','comparator',1,'p_comparator','Parser.py',419),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','Parser.py',420),
  ('comparator -> GREATER','comparator',1,'p_comparator','Parser.py',421),
  ('comparator -> GREATER_EQUAL','comparator',1,'p_comparator','Parser.py',422),
  ('comparator -> EQUAL_EQUAL','comparator',1,'p_comparator','Parser.py',423),
  ('comparator -> NOT_EQUAL','comparator',1,'p_comparator','Parser.py',424),
  ('operator -> PLUS','operator',1,'p_operator','Parser.py',431),
  ('operator -> MINUS','operator',1,'p_operator','Parser.py',432),
  ('operator -> MULTIPLY','operator',1,'p_operator','Parser.py',433),
  ('operator -> DIVIDE','operator',1,'p_operator','Parser.py',434),
  ('type -> INT','type',1,'p_type','Parser.py',441),
  ('type -> CHAR','type',1,'p_type','Parser.py',442),
  ('type -> STRING','type',1,'p_type','Parser.py',443),
  ('type -> BOOL','type',1,'p_type','Parser.py',444),
  ('type -> FLOAT','type',1,'p_type','Parser.py',445),
  ('type -> LONG','type',1,'p_type','Parser.py',446),
  ('type -> SHORT','type',1,'p_type','Parser.py',447),
  ('type -> DOUBLE','type',1,'p_type','Parser.py',448),
  ('conjunction -> AND','conjunction',1,'p_conjunction','Parser.py',455),
  ('conjunction -> OR','conjunction',1,'p_conjunction','Parser.py',456),
  ('string_value -> TEXT','string_value',1,'p_string_value','Parser.py',463),
  ('string_value -> SIGN','string_value',1,'p_string_value','Parser.py',464),
  ('number -> INT_NUMBER','number',1,'p_number','Parser.py',471),
  ('number -> FLOAT_NUMBER','number',1,'p_number','Parser.py',472),
  ('bool_value -> TRUE','bool_value',1,'p_bool_value','Parser.py',479),
  ('bool_value -> FALSE','bool_value',1,'p_bool_value','Parser.py',480),
  ('value -> number','value',1,'p_value','Parser.py',487),
  ('value -> VAR','value',1,'p_value','Parser.py',488),
  ('value -> get_array_element','value',1,'p_value','Parser.py',489),
  ('value -> string_value','value',1,'p_value','Parser.py',490),
  ('value -> bool_value','value',1,'p_value','Parser.py',491),
  ('increment -> VAR PLUS_PLUS SEMICOLON','increment',3,'p_increment','Parser.py',498),
  ('decrement -> VAR MINUS_MINUS SEMICOLON','decrement',3,'p_decrement','Parser.py',505),
  ('get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',512),
  ('operation -> increment','operation',1,'p_operation','Parser.py',519),
  ('operation -> decrement','operation',1,'p_operation','Parser.py',520),
  ('operation -> value operator value SEMICOLON','operation',4,'p_operation','Parser.py',521),
  ('assignment -> VAR EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',531),
  ('assignment -> VAR EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',532),
  ('assignment -> get_array_element EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',533),
  ('assignment -> get_array_element EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',534),
  ('var_declaration -> type VAR SEMICOLON','var_declaration',3,'p_var_declaration','Parser.py',541),
  ('var_declaration -> array_declaration','var_declaration',1,'p_var_declaration','Parser.py',542),
  ('var_declaration -> type VAR EQUAL value SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',543),
  ('var_declaration -> type VAR EQUAL VAR SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',544),
  ('array_declaration -> type get_array_element SEMICOLON','array_declaration',3,'p_array_declaration','Parser.py',556),
  ('out -> OUT VAR','out',2,'p_out','Parser.py',564),
  ('out -> OUT VAR out','out',3,'p_out','Parser.py',565),
  ('out -> OUT TEXT','out',2,'p_out','Parser.py',566),
  ('out -> OUT TEXT out','out',3,'p_out','Parser.py',567),
  ('out -> OUT ENDL','out',2,'p_out','Parser.py',568),
  ('out -> OUT ENDL out','out',3,'p_out','Parser.py',569),
  ('in -> IN VAR','in',2,'p_in','Parser.py',585),
  ('in -> IN VAR in','in',3,'p_in','Parser.py',586),
  ('print -> COUT out SEMICOLON','print',3,'p_print','Parser.py',596),
  ('input -> CIN in SEMICOLON','input',3,'p_input','Parser.py',603),
  ('returning -> RETURN value SEMICOLON','returning',3,'p_returning','Parser.py',610),
  ('comment -> COMMENT','comment',1,'p_comment','Parser.py',620),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',625),
  ('change_tab_number -> <empty>','change_tab_number',0,'p_change_tab_number','Parser.py',635),
]
