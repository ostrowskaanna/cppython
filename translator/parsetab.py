
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR CIN CLASS COMMA COMMENT COUT DIVIDE DOT DOUBLE ELSE EMPTY_TEXT ENDL EQUAL EQUAL_EQUAL FALSE FLOAT FLOAT_NUMBER FOR GREATER GREATER_EQUAL HASH ID IF IN INCLUDE INT INT_NUMBER LEFT_BR LEFT_BR_CURLY LEFT_BR_SQUARED LESS LESS_EQUAL LIBRARY LONG MINUS MINUS_MINUS MULTIPLY NAMESPACE NOT_EQUAL OR OUT PLUS PLUS_PLUS RETURN RIGHT_BR RIGHT_BR_CURLY RIGHT_BR_SQUARED SEMICOLON SHORT SIGN STD STRING TEXT TRUE USING VAR VOID WHILE\n    start_symbol : program\n    \n    program : program_components\n            | empty\n    \n    program_components : program_component\n        | program_component program_components\n    \n    program_component : function_definition\n        | class_definition\n        | including\n        | using_namespace_std\n        | var_declaration\n        | array_declaration\n        | comment\n        | empty\n    \n    using_namespace_std : USING NAMESPACE STD SEMICOLON\n    \n    including : HASH INCLUDE LIBRARY\n    \n    function_definition : type_function_definition\n        | void_function_definition\n    \n    type_function_definition : type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY\n    \n    void_function_definition : VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    function_var_declaration : var_declaration_no_semicolon\n        | var_declaration_no_semicolon COMMA function_var_declaration\n        | empty\n    \n    var_declaration_no_semicolon : type VAR\n    \n    function_call : VAR LEFT_BR RIGHT_BR SEMICOLON\n        | VAR LEFT_BR VAR RIGHT_BR SEMICOLON\n    \n    class_definition : CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON\n    \n    class_declaration : var_declaration\n        | function_definition\n    \n    class_declarations : class_declaration\n        | class_declaration class_declarations\n        | empty\n    \n    instructions : instruction\n        | instruction instructions\n    \n    instruction : loop\n        | if_statement\n        | assignment\n        | operation\n        | empty\n        | var_declaration\n        | print\n        | input\n        | comment\n        | function_call\n    \n    while_loop : WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n        | WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    for_loop_statement : FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR\n    \n    for_loop : for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    loop : while_loop\n        | for_loop\n    \n    else_statement : ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    if_statement : IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n                 | IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY  else_statement\n    \n    comparisons : comparison\n        | comparison conjunction comparisons\n    \n    comparison : value comparator value\n        | value EQUAL_EQUAL EMPTY_TEXT\n    \n    comparator : LESS\n        | LESS_EQUAL\n        | GREATER\n        | GREATER_EQUAL\n        | EQUAL_EQUAL\n        | NOT_EQUAL\n    \n    operator : PLUS\n        | MINUS\n        | MULTIPLY\n        | DIVIDE\n    \n    type : INT\n        | CHAR\n        | STRING\n        | BOOL\n        | FLOAT\n        | LONG\n        | SHORT\n        | DOUBLE\n    \n    conjunction : AND\n        | OR\n    \n    string_value : TEXT\n        | SIGN\n    \n    number : INT_NUMBER\n        | FLOAT_NUMBER\n    \n    bool_value : TRUE\n        | FALSE\n    \n    value : number\n        | VAR\n        | get_array_element\n        | string_value\n        | bool_value\n        | math_operation\n    \n    increment : VAR PLUS_PLUS SEMICOLON\n    \n    decrement : VAR MINUS_MINUS SEMICOLON\n    \n    math_operation : VAR operator VAR\n        | VAR operator number\n        | number operator number\n    \n    operation : increment\n        | decrement\n    \n    get_array_element : VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED\n        | VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED\n    \n    assignment : VAR EQUAL value SEMICOLON\n               | VAR EQUAL VAR SEMICOLON\n               | get_array_element EQUAL value SEMICOLON\n               | get_array_element EQUAL VAR SEMICOLON\n    \n    var_declaration : type VAR SEMICOLON\n        | array_declaration\n        | type VAR EQUAL value SEMICOLON\n        | type VAR EQUAL VAR SEMICOLON\n    \n    array_declaration : type get_array_element SEMICOLON\n    \n    out : OUT VAR\n        | OUT VAR out\n        | OUT TEXT\n        | OUT TEXT out\n        | OUT ENDL\n        | OUT ENDL out\n    \n    in : IN VAR\n       | IN VAR in\n    \n    print : COUT out SEMICOLON\n    \n    input : CIN in SEMICOLON\n    \n    returning : RETURN value SEMICOLON\n    \n    comment : COMMENT\n    empty : change_tab_number : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,19,29,30,38,40,44,47,74,80,96,142,149,],[-126,0,-1,-2,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-5,-13,-15,-109,-113,-14,-112,-111,-26,-19,-18,]),'CLASS':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,74,80,96,142,149,],[15,-13,15,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-15,-109,-113,-14,-112,-111,-26,-19,-18,]),'HASH':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,74,80,96,142,149,],[16,-13,16,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-15,-109,-113,-14,-112,-111,-26,-19,-18,]),'USING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,74,80,96,142,149,],[17,-13,17,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-15,-109,-113,-14,-112,-111,-26,-19,-18,]),'COMMENT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,73,74,80,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,142,147,148,149,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[19,-13,19,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-15,-109,-113,-14,-110,-112,-111,-127,-127,-26,19,19,19,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-19,-96,-97,-18,-122,-123,19,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,19,19,19,-58,-44,-45,-59,19,-57,]),'VOID':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,44,46,47,69,71,72,73,74,80,96,142,149,],[20,-13,20,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-127,-15,-109,-113,20,-14,20,-27,-28,-110,-112,-111,-26,-19,-18,]),'INT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,141,142,147,148,149,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[21,-13,21,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-127,-15,-109,21,-113,21,21,-14,21,-27,-28,-110,-112,-111,21,-127,-127,-26,21,21,21,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,166,-19,-96,-97,-18,-122,-123,21,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,21,21,21,-58,-44,-45,-59,21,-57,]),'CHAR':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,142,147,148,149,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[22,-13,22,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-127,-15,-109,22,-113,22,22,-14,22,-27,-28,-110,-112,-111,22,-127,-127,-26,22,22,22,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-19,-96,-97,-18,-122,-123,22,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,22,22,22,-58,-44,-45,-59,22,-57,]),'STRING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,142,147,148,149,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[23,-13,23,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-127,-15,-109,23,-113,23,23,-14,23,-27,-28,-110,-112,-111,23,-127,-127,-26,23,23,23,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-19,-96,-97,-18,-122,-123,23,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,23,23,23,-58,-44,-45,-59,23,-57,]),'BOOL':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,142,147,148,149,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[24,-13,24,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-127,-15,-109,24,-113,24,24,-14,24,-27,-28,-110,-112,-111,24,-127,-127,-26,24,24,24,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-19,-96,-97,-18,-122,-123,24,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,24,24,24,-58,-44,-45,-59,24,-57,]),'FLOAT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,142,147,148,149,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[25,-13,25,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-127,-15,-109,25,-113,25,25,-14,25,-27,-28,-110,-112,-111,25,-127,-127,-26,25,25,25,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-19,-96,-97,-18,-122,-123,25,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,25,25,25,-58,-44,-45,-59,25,-57,]),'LONG':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,142,147,148,149,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[26,-13,26,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-127,-15,-109,26,-113,26,26,-14,26,-27,-28,-110,-112,-111,26,-127,-127,-26,26,26,26,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-19,-96,-97,-18,-122,-123,26,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,26,26,26,-58,-44,-45,-59,26,-57,]),'SHORT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,142,147,148,149,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[27,-13,27,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-127,-15,-109,27,-113,27,27,-14,27,-27,-28,-110,-112,-111,27,-127,-127,-26,27,27,27,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-19,-96,-97,-18,-122,-123,27,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,27,27,27,-58,-44,-45,-59,27,-57,]),'DOUBLE':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,142,147,148,149,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[28,-13,28,-6,-7,-8,-9,-10,-11,-12,-16,-17,-125,-13,-127,-15,-109,28,-113,28,28,-14,28,-27,-28,-110,-112,-111,28,-127,-127,-26,28,28,28,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-19,-96,-97,-18,-122,-123,28,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,28,28,28,-58,-44,-45,-59,28,-57,]),'RIGHT_BR_CURLY':([13,14,19,37,40,44,46,68,69,70,71,72,73,74,80,89,95,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,124,130,132,140,142,147,148,149,157,161,165,167,168,170,171,183,184,191,193,194,198,199,200,202,203,204,206,207,208,210,211,212,214,220,229,238,],[-16,-17,-125,-127,-109,-113,-126,88,-29,-31,-27,-28,-110,-112,-111,-30,-127,-126,-32,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,142,149,-33,-127,-19,-96,-97,-18,-122,-123,-126,-106,-105,-24,-124,-107,-108,200,-25,-127,-127,-127,-54,-126,-126,-126,210,211,212,-58,-44,-45,-59,-126,238,-57,]),'VAR':([15,18,19,20,21,22,23,24,25,26,27,28,40,41,43,44,61,73,74,75,76,77,78,79,80,93,95,97,98,99,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,126,127,131,133,134,136,138,139,140,147,148,157,161,165,166,167,168,170,173,174,175,176,177,178,179,180,181,182,183,184,193,194,198,199,200,202,203,204,209,210,211,212,214,216,217,218,219,220,230,231,232,233,234,235,236,237,238,],[31,34,-125,36,-74,-75,-76,-77,-78,-79,-80,-81,-109,48,65,-113,82,-110,-112,90,-70,-71,-72,-73,-111,-127,-127,100,100,125,100,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,143,145,151,151,156,158,162,151,-127,-96,-97,-122,-123,100,192,-106,-105,-24,151,-82,-83,151,-68,-64,-65,-66,-67,-69,-107,-108,-25,-127,-127,-127,-54,100,100,100,213,-58,-44,-45,-59,221,223,225,227,100,239,240,241,242,243,244,245,246,-57,]),'INCLUDE':([16,],[32,]),'NAMESPACE':([17,],[33,]),'IF':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,147,148,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[-125,-109,-113,-110,-112,-111,-127,-127,115,115,115,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-96,-97,-122,-123,115,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,115,115,115,-58,-44,-45,-59,115,-57,]),'COUT':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,147,148,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[-125,-109,-113,-110,-112,-111,-127,-127,119,119,119,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-96,-97,-122,-123,119,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,119,119,119,-58,-44,-45,-59,119,-57,]),'CIN':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,147,148,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[-125,-109,-113,-110,-112,-111,-127,-127,120,120,120,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-96,-97,-122,-123,120,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,120,120,120,-58,-44,-45,-59,120,-57,]),'WHILE':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,147,148,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[-125,-109,-113,-110,-112,-111,-127,-127,121,121,121,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-96,-97,-122,-123,121,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,121,121,121,-58,-44,-45,-59,121,-57,]),'FOR':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,140,147,148,157,161,165,167,168,170,183,184,193,194,198,199,200,202,203,204,210,211,212,214,220,238,],[-125,-109,-113,-110,-112,-111,-127,-127,123,123,123,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-127,-96,-97,-122,-123,123,-106,-105,-24,-107,-108,-25,-127,-127,-127,-54,123,123,123,-58,-44,-45,-59,123,-57,]),'RETURN':([19,40,44,73,74,80,93,97,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,132,147,148,157,161,167,168,170,183,184,193,200,210,211,212,214,238,],[-125,-109,-113,-110,-112,-111,-127,-126,131,-32,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-55,-56,-101,-102,-33,-96,-97,-122,-123,-106,-105,-24,-107,-108,-25,-54,-58,-44,-45,-59,-57,]),'LEFT_BR_CURLY':([31,83,87,122,172,189,190,215,255,256,257,258,259,260,261,262,],[37,93,95,140,194,198,199,220,-47,-46,-49,-48,-51,-50,-53,-52,]),'LIBRARY':([32,],[38,]),'STD':([33,],[39,]),'SEMICOLON':([34,35,39,48,49,50,51,52,53,54,55,56,57,58,59,60,85,86,88,90,91,92,125,128,129,135,137,143,144,146,150,151,155,156,158,159,160,162,169,185,186,187,188,205,221,222,223,224,225,226,227,228,],[40,44,47,74,80,-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,-104,-103,96,-98,-99,-100,40,147,148,157,161,167,168,170,171,-91,183,184,-114,-116,-118,-120,193,-115,-117,-119,-121,209,230,231,232,233,234,235,236,237,]),'EQUAL':([34,85,86,100,116,125,192,],[41,-104,-103,126,134,41,201,]),'LEFT_BR':([34,36,100,115,121,123,],[42,45,127,133,139,141,]),'LEFT_BR_SQUARED':([34,48,100,125,143,151,156,],[43,43,43,43,43,43,43,]),'INT_NUMBER':([41,43,75,76,77,78,79,81,126,131,133,134,139,173,174,175,176,177,178,179,180,181,182,201,216,217,218,219,],[55,66,55,-70,-71,-72,-73,55,55,55,55,55,55,55,-82,-83,55,-68,-64,-65,-66,-67,-69,205,222,224,226,228,]),'FLOAT_NUMBER':([41,75,76,77,78,79,81,126,131,133,134,139,173,174,175,176,177,178,179,180,181,182,],[56,56,-70,-71,-72,-73,56,56,56,56,56,56,56,-82,-83,56,-68,-64,-65,-66,-67,-69,]),'TEXT':([41,126,131,133,134,136,139,173,174,175,176,177,178,179,180,181,182,],[57,57,57,57,57,159,57,57,-82,-83,57,-68,-64,-65,-66,-67,-69,]),'SIGN':([41,126,131,133,134,139,173,174,175,176,177,178,179,180,181,182,],[58,58,58,58,58,58,58,-82,-83,58,-68,-64,-65,-66,-67,-69,]),'TRUE':([41,126,131,133,134,139,173,174,175,176,177,178,179,180,181,182,],[59,59,59,59,59,59,59,-82,-83,59,-68,-64,-65,-66,-67,-69,]),'FALSE':([41,126,131,133,134,139,173,174,175,176,177,178,179,180,181,182,],[60,60,60,60,60,60,60,-82,-83,60,-68,-64,-65,-66,-67,-69,]),'RIGHT_BR':([42,45,50,51,52,53,54,55,56,57,58,59,60,62,63,64,67,82,84,85,86,90,91,92,94,127,145,151,152,153,163,164,195,196,197,247,248,249,250,251,252,253,254,],[-126,-126,-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,83,-20,-22,87,-23,-126,-104,-103,-98,-99,-100,-21,146,169,-91,172,-60,189,190,-61,-62,-63,255,256,257,258,259,260,261,262,]),'PLUS':([48,50,55,56,143,151,156,],[76,76,-86,-87,76,76,76,]),'MINUS':([48,50,55,56,143,151,156,],[77,77,-86,-87,77,77,77,]),'MULTIPLY':([48,50,55,56,143,151,156,],[78,78,-86,-87,78,78,78,]),'DIVIDE':([48,50,55,56,143,151,156,],[79,79,-86,-87,79,79,79,]),'EQUAL_EQUAL':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,151,154,164,],[-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,-104,-103,-98,-99,-100,-91,177,-94,]),'LESS':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,151,154,164,213,],[-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,-104,-103,-98,-99,-100,-91,178,-94,216,]),'LESS_EQUAL':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,151,154,164,213,],[-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,-104,-103,-98,-99,-100,-91,179,-94,217,]),'GREATER':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,151,154,164,213,],[-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,-104,-103,-98,-99,-100,-91,180,-94,218,]),'GREATER_EQUAL':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,151,154,164,213,],[-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,-104,-103,-98,-99,-100,-91,181,-94,219,]),'NOT_EQUAL':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,151,154,164,],[-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,-104,-103,-98,-99,-100,-91,182,-94,]),'AND':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,151,153,196,197,],[-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,-104,-103,-98,-99,-100,-91,174,-62,-63,]),'OR':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,151,153,196,197,],[-90,-92,-93,-94,-95,-86,-87,-84,-85,-88,-89,-104,-103,-98,-99,-100,-91,175,-62,-63,]),'COMMA':([63,82,],[84,-23,]),'RIGHT_BR_SQUARED':([65,66,],[85,86,]),'PLUS_PLUS':([100,239,240,241,242,],[128,247,248,249,250,]),'MINUS_MINUS':([100,243,244,245,246,],[129,251,252,253,254,]),'OUT':([119,158,159,160,],[136,136,136,136,]),'IN':([120,162,],[138,138,]),'ENDL':([136,],[160,]),'EMPTY_TEXT':([177,],[197,]),'ELSE':([210,],[215,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start_symbol':([0,],[1,]),'program':([0,],[2,]),'program_components':([0,5,],[3,29,]),'empty':([0,5,42,45,46,69,84,97,98,102,165,202,203,204,220,],[4,30,64,64,70,70,64,107,107,107,107,107,107,107,107,]),'program_component':([0,5,],[5,5,]),'function_definition':([0,5,46,69,],[6,6,72,72,]),'class_definition':([0,5,],[7,7,]),'including':([0,5,],[8,8,]),'using_namespace_std':([0,5,],[9,9,]),'var_declaration':([0,5,46,69,97,98,102,165,202,203,204,220,],[10,10,71,71,108,108,108,108,108,108,108,108,]),'array_declaration':([0,5,46,69,97,98,102,165,202,203,204,220,],[11,11,73,73,73,73,73,73,73,73,73,73,]),'comment':([0,5,97,98,102,165,202,203,204,220,],[12,12,111,111,111,111,111,111,111,111,]),'type_function_definition':([0,5,46,69,],[13,13,13,13,]),'void_function_definition':([0,5,46,69,],[14,14,14,14,]),'type':([0,5,42,45,46,69,84,97,98,102,165,202,203,204,220,],[18,18,61,61,18,18,61,99,99,99,99,99,99,99,99,]),'get_array_element':([18,41,97,98,99,102,126,131,133,134,139,165,173,176,202,203,204,220,],[35,51,116,116,35,116,51,51,51,51,51,116,51,51,116,116,116,116,]),'change_tab_number':([37,93,95,140,194,198,199,],[46,97,98,165,202,203,204,]),'value':([41,126,131,133,134,139,173,176,],[49,144,150,154,155,154,154,196,]),'number':([41,75,81,126,131,133,134,139,173,176,],[50,91,92,50,50,50,50,50,50,50,]),'string_value':([41,126,131,133,134,139,173,176,],[52,52,52,52,52,52,52,52,]),'bool_value':([41,126,131,133,134,139,173,176,],[53,53,53,53,53,164,53,53,]),'math_operation':([41,126,131,133,134,139,173,176,],[54,54,54,54,54,54,54,54,]),'function_var_declaration':([42,45,84,],[62,67,94,]),'var_declaration_no_semicolon':([42,45,84,],[63,63,63,]),'class_declarations':([46,69,],[68,89,]),'class_declaration':([46,69,],[69,69,]),'operator':([48,50,143,151,156,],[75,81,75,75,75,]),'instructions':([97,98,102,165,202,203,204,220,],[101,124,132,191,206,207,208,229,]),'instruction':([97,98,102,165,202,203,204,220,],[102,102,102,102,102,102,102,102,]),'loop':([97,98,102,165,202,203,204,220,],[103,103,103,103,103,103,103,103,]),'if_statement':([97,98,102,165,202,203,204,220,],[104,104,104,104,104,104,104,104,]),'assignment':([97,98,102,165,202,203,204,220,],[105,105,105,105,105,105,105,105,]),'operation':([97,98,102,165,202,203,204,220,],[106,106,106,106,106,106,106,106,]),'print':([97,98,102,165,202,203,204,220,],[109,109,109,109,109,109,109,109,]),'input':([97,98,102,165,202,203,204,220,],[110,110,110,110,110,110,110,110,]),'function_call':([97,98,102,165,202,203,204,220,],[112,112,112,112,112,112,112,112,]),'while_loop':([97,98,102,165,202,203,204,220,],[113,113,113,113,113,113,113,113,]),'for_loop':([97,98,102,165,202,203,204,220,],[114,114,114,114,114,114,114,114,]),'increment':([97,98,102,165,202,203,204,220,],[117,117,117,117,117,117,117,117,]),'decrement':([97,98,102,165,202,203,204,220,],[118,118,118,118,118,118,118,118,]),'for_loop_statement':([97,98,102,165,202,203,204,220,],[122,122,122,122,122,122,122,122,]),'returning':([101,],[130,]),'out':([119,158,159,160,],[135,185,186,187,]),'in':([120,162,],[137,188,]),'comparisons':([133,139,173,],[152,163,195,]),'comparison':([133,139,173,],[153,153,153,]),'conjunction':([153,],[173,]),'comparator':([154,],[176,]),'else_statement':([210,],[214,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start_symbol","S'",1,None,None,None),
  ('start_symbol -> program','start_symbol',1,'p_start_symbol','Parser.py',163),
  ('program -> program_components','program',1,'p_program','Parser.py',171),
  ('program -> empty','program',1,'p_program','Parser.py',172),
  ('program_components -> program_component','program_components',1,'p_program_components','Parser.py',179),
  ('program_components -> program_component program_components','program_components',2,'p_program_components','Parser.py',180),
  ('program_component -> function_definition','program_component',1,'p_program_component','Parser.py',190),
  ('program_component -> class_definition','program_component',1,'p_program_component','Parser.py',191),
  ('program_component -> including','program_component',1,'p_program_component','Parser.py',192),
  ('program_component -> using_namespace_std','program_component',1,'p_program_component','Parser.py',193),
  ('program_component -> var_declaration','program_component',1,'p_program_component','Parser.py',194),
  ('program_component -> array_declaration','program_component',1,'p_program_component','Parser.py',195),
  ('program_component -> comment','program_component',1,'p_program_component','Parser.py',196),
  ('program_component -> empty','program_component',1,'p_program_component','Parser.py',197),
  ('using_namespace_std -> USING NAMESPACE STD SEMICOLON','using_namespace_std',4,'p_using_namespace_std','Parser.py',205),
  ('including -> HASH INCLUDE LIBRARY','including',3,'p_including','Parser.py',213),
  ('function_definition -> type_function_definition','function_definition',1,'p_function_definition','Parser.py',222),
  ('function_definition -> void_function_definition','function_definition',1,'p_function_definition','Parser.py',223),
  ('type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY','type_function_definition',10,'p_type_function_definition','Parser.py',230),
  ('void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','void_function_definition',9,'p_void_function_definition','Parser.py',239),
  ('function_var_declaration -> var_declaration_no_semicolon','function_var_declaration',1,'p_function_var_declaration','Parser.py',248),
  ('function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration','function_var_declaration',3,'p_function_var_declaration','Parser.py',249),
  ('function_var_declaration -> empty','function_var_declaration',1,'p_function_var_declaration','Parser.py',250),
  ('var_declaration_no_semicolon -> type VAR','var_declaration_no_semicolon',2,'p_var_declaration_no_semicolon','Parser.py',260),
  ('function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON','function_call',4,'p_function_call','Parser.py',266),
  ('function_call -> VAR LEFT_BR VAR RIGHT_BR SEMICOLON','function_call',5,'p_function_call','Parser.py',267),
  ('class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON','class_definition',7,'p_class_definition','Parser.py',277),
  ('class_declaration -> var_declaration','class_declaration',1,'p_class_declaration','Parser.py',286),
  ('class_declaration -> function_definition','class_declaration',1,'p_class_declaration','Parser.py',287),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','Parser.py',298),
  ('class_declarations -> class_declaration class_declarations','class_declarations',2,'p_class_declarations','Parser.py',299),
  ('class_declarations -> empty','class_declarations',1,'p_class_declarations','Parser.py',300),
  ('instructions -> instruction','instructions',1,'p_instructions','Parser.py',310),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','Parser.py',311),
  ('instruction -> loop','instruction',1,'p_instruction','Parser.py',320),
  ('instruction -> if_statement','instruction',1,'p_instruction','Parser.py',321),
  ('instruction -> assignment','instruction',1,'p_instruction','Parser.py',322),
  ('instruction -> operation','instruction',1,'p_instruction','Parser.py',323),
  ('instruction -> empty','instruction',1,'p_instruction','Parser.py',324),
  ('instruction -> var_declaration','instruction',1,'p_instruction','Parser.py',325),
  ('instruction -> print','instruction',1,'p_instruction','Parser.py',326),
  ('instruction -> input','instruction',1,'p_instruction','Parser.py',327),
  ('instruction -> comment','instruction',1,'p_instruction','Parser.py',328),
  ('instruction -> function_call','instruction',1,'p_instruction','Parser.py',329),
  ('while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',342),
  ('while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',343),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',352),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',353),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',354),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',355),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',356),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',357),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',358),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',359),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','for_loop',5,'p_for_loop','Parser.py',386),
  ('loop -> while_loop','loop',1,'p_loop','Parser.py',395),
  ('loop -> for_loop','loop',1,'p_loop','Parser.py',396),
  ('else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY','else_statement',4,'p_else_statement','Parser.py',403),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','if_statement',8,'p_if_statement','Parser.py',415),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement','if_statement',9,'p_if_statement','Parser.py',416),
  ('comparisons -> comparison','comparisons',1,'p_comparisons','Parser.py',428),
  ('comparisons -> comparison conjunction comparisons','comparisons',3,'p_comparisons','Parser.py',429),
  ('comparison -> value comparator value','comparison',3,'p_comparison','Parser.py',439),
  ('comparison -> value EQUAL_EQUAL EMPTY_TEXT','comparison',3,'p_comparison','Parser.py',440),
  ('comparator -> LESS','comparator',1,'p_comparator','Parser.py',448),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','Parser.py',449),
  ('comparator -> GREATER','comparator',1,'p_comparator','Parser.py',450),
  ('comparator -> GREATER_EQUAL','comparator',1,'p_comparator','Parser.py',451),
  ('comparator -> EQUAL_EQUAL','comparator',1,'p_comparator','Parser.py',452),
  ('comparator -> NOT_EQUAL','comparator',1,'p_comparator','Parser.py',453),
  ('operator -> PLUS','operator',1,'p_operator','Parser.py',459),
  ('operator -> MINUS','operator',1,'p_operator','Parser.py',460),
  ('operator -> MULTIPLY','operator',1,'p_operator','Parser.py',461),
  ('operator -> DIVIDE','operator',1,'p_operator','Parser.py',462),
  ('type -> INT','type',1,'p_type','Parser.py',468),
  ('type -> CHAR','type',1,'p_type','Parser.py',469),
  ('type -> STRING','type',1,'p_type','Parser.py',470),
  ('type -> BOOL','type',1,'p_type','Parser.py',471),
  ('type -> FLOAT','type',1,'p_type','Parser.py',472),
  ('type -> LONG','type',1,'p_type','Parser.py',473),
  ('type -> SHORT','type',1,'p_type','Parser.py',474),
  ('type -> DOUBLE','type',1,'p_type','Parser.py',475),
  ('conjunction -> AND','conjunction',1,'p_conjunction','Parser.py',482),
  ('conjunction -> OR','conjunction',1,'p_conjunction','Parser.py',483),
  ('string_value -> TEXT','string_value',1,'p_string_value','Parser.py',490),
  ('string_value -> SIGN','string_value',1,'p_string_value','Parser.py',491),
  ('number -> INT_NUMBER','number',1,'p_number','Parser.py',498),
  ('number -> FLOAT_NUMBER','number',1,'p_number','Parser.py',499),
  ('bool_value -> TRUE','bool_value',1,'p_bool_value','Parser.py',506),
  ('bool_value -> FALSE','bool_value',1,'p_bool_value','Parser.py',507),
  ('value -> number','value',1,'p_value','Parser.py',514),
  ('value -> VAR','value',1,'p_value','Parser.py',515),
  ('value -> get_array_element','value',1,'p_value','Parser.py',516),
  ('value -> string_value','value',1,'p_value','Parser.py',517),
  ('value -> bool_value','value',1,'p_value','Parser.py',518),
  ('value -> math_operation','value',1,'p_value','Parser.py',519),
  ('increment -> VAR PLUS_PLUS SEMICOLON','increment',3,'p_increment','Parser.py',526),
  ('decrement -> VAR MINUS_MINUS SEMICOLON','decrement',3,'p_decrement','Parser.py',533),
  ('math_operation -> VAR operator VAR','math_operation',3,'p_math_operation','Parser.py',539),
  ('math_operation -> VAR operator number','math_operation',3,'p_math_operation','Parser.py',540),
  ('math_operation -> number operator number','math_operation',3,'p_math_operation','Parser.py',541),
  ('operation -> increment','operation',1,'p_operation','Parser.py',548),
  ('operation -> decrement','operation',1,'p_operation','Parser.py',549),
  ('get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',555),
  ('get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',556),
  ('assignment -> VAR EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',564),
  ('assignment -> VAR EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',565),
  ('assignment -> get_array_element EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',566),
  ('assignment -> get_array_element EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',567),
  ('var_declaration -> type VAR SEMICOLON','var_declaration',3,'p_var_declaration','Parser.py',574),
  ('var_declaration -> array_declaration','var_declaration',1,'p_var_declaration','Parser.py',575),
  ('var_declaration -> type VAR EQUAL value SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',576),
  ('var_declaration -> type VAR EQUAL VAR SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',577),
  ('array_declaration -> type get_array_element SEMICOLON','array_declaration',3,'p_array_declaration','Parser.py',589),
  ('out -> OUT VAR','out',2,'p_out','Parser.py',597),
  ('out -> OUT VAR out','out',3,'p_out','Parser.py',598),
  ('out -> OUT TEXT','out',2,'p_out','Parser.py',599),
  ('out -> OUT TEXT out','out',3,'p_out','Parser.py',600),
  ('out -> OUT ENDL','out',2,'p_out','Parser.py',601),
  ('out -> OUT ENDL out','out',3,'p_out','Parser.py',602),
  ('in -> IN VAR','in',2,'p_in','Parser.py',618),
  ('in -> IN VAR in','in',3,'p_in','Parser.py',619),
  ('print -> COUT out SEMICOLON','print',3,'p_print','Parser.py',632),
  ('input -> CIN in SEMICOLON','input',3,'p_input','Parser.py',639),
  ('returning -> RETURN value SEMICOLON','returning',3,'p_returning','Parser.py',646),
  ('comment -> COMMENT','comment',1,'p_comment','Parser.py',656),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',661),
  ('change_tab_number -> <empty>','change_tab_number',0,'p_change_tab_number','Parser.py',671),
]
