
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BREAK CHAR CIN CLASS COLON COMMA COMMENT COUT DIVIDE DOUBLE ELSE ENDL EQUAL EQUAL_EQUAL FALSE FLOAT FLOAT_NUMBER FOR GREATER GREATER_EQUAL HASH ID IF IN INCLUDE INT INT_NUMBER LEFT_BR LEFT_BR_CURLY LEFT_BR_SQUARED LESS LESS_EQUAL LIBRARY LONG MINUS MINUS_MINUS MULTIPLY NAMESPACE NOT_EQUAL OR OUT PLUS PLUS_PLUS PRIVATE PROTECTED PUBLIC RETURN RIGHT_BR RIGHT_BR_CURLY RIGHT_BR_SQUARED SEMICOLON SHORT SIGN STD STRING TEXT TRUE USING VAR VOID WHILE\n    start_symbol : program\n    \n    program : program_components\n            | empty\n    \n    program_components : program_component\n        | program_component program_components\n        | empty\n    \n    program_component : function_definition\n        | class_definition\n        | including\n        | var_declaration\n        | array_declaration\n        | empty\n    \n    using_namespace_std : USING NAMESPACE STD SEMICOLON\n    \n    including : HASH INCLUDE LIBRARY\n    \n    function_definition : type_function_definition\n        | void_function_definition\n    \n    type_function_definition : type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY\n    \n    void_function_definition : VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    function_var_declaration : type VAR\n        | type VAR COMMA function_var_declaration\n        | empty\n    \n    class_definition : CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON\n    \n    protection_level : PUBLIC\n        | PRIVATE\n        | PROTECTED\n    \n    class_declaration : var_declaration\n        | function_definition\n    \n    class_declarations : class_declaration\n        | class_declaration class_declarations\n    \n    instructions : instruction\n        | instruction instructions\n    \n    instruction : loop\n        | if_statement\n        | assignment\n        | operation\n        | empty\n        | var_declaration\n    \n    while_loop : WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    for_loop_statement : FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR\n    \n    for_loop : for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    loop : while_loop\n        | for_loop\n    \n    if_statement : IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    comparisons : comparison\n        | comparison conjunction comparisons\n    \n    comparator : LESS\n        | LESS_EQUAL\n        | GREATER\n        | GREATER_EQUAL\n        | EQUAL_EQUAL\n        | NOT_EQUAL\n    \n    operator : PLUS\n        | MINUS\n        | MULTIPLY\n        | DIVIDE\n    \n    type : INT\n        | CHAR\n        | STRING\n        | BOOL\n        | FLOAT\n        | LONG\n        | SHORT\n    \n    conjunction : AND\n        | OR\n    \n    string_value : TEXT\n        | SIGN\n    \n    number : INT_NUMBER\n        | FLOAT_NUMBER\n    \n    value : number\n        | value\n    \n    increment : VAR PLUS_PLUS SEMICOLON\n    \n    decrement : VAR MINUS_MINUS SEMICOLON\n    \n    get_array_element : VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED\n    \n    operation : increment\n        | decrement\n        | value operator value SEMICOLON\n    \n    assignment : VAR EQUAL value SEMICOLON\n               | VAR EQUAL VAR SEMICOLON\n    \n    var_declaration : type VAR SEMICOLON\n        | array_declaration\n        | type VAR EQUAL value SEMICOLON\n        | type VAR EQUAL VAR SEMICOLON\n    \n    array_declaration : type get_array_element SEMICOLON\n    \n    comparison : value comparator value\n    \n    returning : RETURN value SEMICOLON\n    empty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,24,25,32,33,37,54,55,91,108,113,],[-89,0,-1,-2,-3,-4,-7,-8,-9,-10,-11,-15,-16,-5,-6,-14,-82,-86,-85,-84,-22,-18,-17,]),'CLASS':([0,4,5,6,7,8,9,10,11,12,25,32,33,37,54,55,91,108,113,],[13,-12,13,-7,-8,-9,-10,-11,-15,-16,-12,-14,-82,-86,-85,-84,-22,-18,-17,]),'HASH':([0,4,5,6,7,8,9,10,11,12,25,32,33,37,54,55,91,108,113,],[15,-12,15,-7,-8,-9,-10,-11,-15,-16,-12,-14,-82,-86,-85,-84,-22,-18,-17,]),'VOID':([0,4,5,6,7,8,9,10,11,12,25,32,33,37,53,54,55,61,62,63,64,91,108,113,],[17,-12,17,-7,-8,-9,-10,-11,-15,-16,-12,-14,-82,-86,17,-85,-84,17,-26,-27,-83,-22,-18,-17,]),'INT':([0,4,5,6,7,8,9,10,11,12,25,32,33,35,37,38,53,54,55,61,62,63,64,65,66,67,74,75,76,77,78,79,80,81,82,85,86,91,106,107,108,111,112,113,122,123,136,138,140,143,148,149,],[18,-12,18,-7,-8,-9,-10,-11,-15,-16,-12,-14,-82,18,-86,18,18,-85,-84,18,-26,-27,-83,18,18,18,18,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,-22,18,121,-18,-74,-75,-17,-81,-80,-79,-43,18,18,-46,-38,]),'CHAR':([0,4,5,6,7,8,9,10,11,12,25,32,33,35,37,38,53,54,55,61,62,63,64,65,66,67,74,75,76,77,78,79,80,81,82,85,86,91,106,108,111,112,113,122,123,136,138,140,143,148,149,],[19,-12,19,-7,-8,-9,-10,-11,-15,-16,-12,-14,-82,19,-86,19,19,-85,-84,19,-26,-27,-83,19,19,19,19,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,-22,19,-18,-74,-75,-17,-81,-80,-79,-43,19,19,-46,-38,]),'STRING':([0,4,5,6,7,8,9,10,11,12,13,25,32,33,35,37,38,53,54,55,61,62,63,64,65,66,67,74,75,76,77,78,79,80,81,82,85,86,91,106,108,111,112,113,122,123,136,138,140,143,148,149,],[14,-12,14,-7,-8,-9,-10,-11,-15,-16,26,-12,-14,-82,14,-86,14,14,-85,-84,14,-26,-27,-83,14,14,14,14,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,-22,14,-18,-74,-75,-17,-81,-80,-79,-43,14,14,-46,-38,]),'BOOL':([0,4,5,6,7,8,9,10,11,12,25,32,33,35,37,38,53,54,55,61,62,63,64,65,66,67,74,75,76,77,78,79,80,81,82,85,86,91,106,108,111,112,113,122,123,136,138,140,143,148,149,],[20,-12,20,-7,-8,-9,-10,-11,-15,-16,-12,-14,-82,20,-86,20,20,-85,-84,20,-26,-27,-83,20,20,20,20,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,-22,20,-18,-74,-75,-17,-81,-80,-79,-43,20,20,-46,-38,]),'FLOAT':([0,4,5,6,7,8,9,10,11,12,25,32,33,35,37,38,53,54,55,61,62,63,64,65,66,67,74,75,76,77,78,79,80,81,82,85,86,91,106,108,111,112,113,122,123,136,138,140,143,148,149,],[21,-12,21,-7,-8,-9,-10,-11,-15,-16,-12,-14,-82,21,-86,21,21,-85,-84,21,-26,-27,-83,21,21,21,21,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,-22,21,-18,-74,-75,-17,-81,-80,-79,-43,21,21,-46,-38,]),'LONG':([0,4,5,6,7,8,9,10,11,12,25,32,33,35,37,38,53,54,55,61,62,63,64,65,66,67,74,75,76,77,78,79,80,81,82,85,86,91,106,108,111,112,113,122,123,136,138,140,143,148,149,],[22,-12,22,-7,-8,-9,-10,-11,-15,-16,-12,-14,-82,22,-86,22,22,-85,-84,22,-26,-27,-83,22,22,22,22,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,-22,22,-18,-74,-75,-17,-81,-80,-79,-43,22,22,-46,-38,]),'SHORT':([0,4,5,6,7,8,9,10,11,12,25,32,33,35,37,38,53,54,55,61,62,63,64,65,66,67,74,75,76,77,78,79,80,81,82,85,86,91,106,108,111,112,113,122,123,136,138,140,143,148,149,],[23,-12,23,-7,-8,-9,-10,-11,-15,-16,-12,-14,-82,23,-86,23,23,-85,-84,23,-26,-27,-83,23,23,23,23,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,-22,23,-18,-74,-75,-17,-81,-80,-79,-43,23,23,-46,-38,]),'RIGHT_BR_CURLY':([11,12,33,37,54,55,60,61,62,63,64,67,69,74,75,76,77,78,79,80,81,82,85,86,90,96,98,106,108,111,112,113,120,122,123,124,136,138,140,143,145,146,148,149,],[-15,-16,-82,-86,-85,-84,68,-28,-26,-27,-83,-89,-29,-30,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,108,113,-31,-89,-18,-74,-75,-17,138,-81,-80,-88,-79,-43,-89,-89,148,149,-46,-38,]),'VAR':([14,16,17,18,19,20,21,22,23,33,34,37,48,54,55,64,66,67,71,74,75,76,77,78,79,80,81,82,85,86,93,106,111,112,121,122,123,136,138,140,143,148,149,150,],[-61,28,30,-59,-60,-62,-63,-64,-65,-82,43,-86,56,-85,-84,-83,72,72,92,72,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,109,72,-74,-75,139,-81,-80,-79,-43,72,72,-46,-38,151,]),'INCLUDE':([15,],[27,]),'LEFT_BR_CURLY':([26,57,59,88,125,137,168,169,170,171,],[31,66,67,106,140,143,-39,-40,-41,-42,]),'LIBRARY':([27,],[32,]),'SEMICOLON':([28,29,43,44,45,46,47,58,68,92,94,95,109,110,114,118,147,156,157,158,159,],[33,37,54,55,-72,-70,-71,-76,91,33,111,112,122,123,124,136,150,160,161,162,163,]),'EQUAL':([28,72,92,139,],[34,93,34,144,]),'LEFT_BR':([28,30,83,87,89,],[35,38,99,105,107,]),'LEFT_BR_SQUARED':([28,92,],[36,36,]),'PUBLIC':([31,],[40,]),'PRIVATE':([31,],[41,]),'PROTECTED':([31,],[42,]),'IF':([33,37,54,55,64,66,67,74,75,76,77,78,79,80,81,82,85,86,106,111,112,122,123,136,138,140,143,148,149,],[-82,-86,-85,-84,-83,83,83,83,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,83,-74,-75,-81,-80,-79,-43,83,83,-46,-38,]),'WHILE':([33,37,54,55,64,66,67,74,75,76,77,78,79,80,81,82,85,86,106,111,112,122,123,136,138,140,143,148,149,],[-82,-86,-85,-84,-83,87,87,87,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,87,-74,-75,-81,-80,-79,-43,87,87,-46,-38,]),'FOR':([33,37,54,55,64,66,67,74,75,76,77,78,79,80,81,82,85,86,106,111,112,122,123,136,138,140,143,148,149,],[-82,-86,-85,-84,-83,89,89,89,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,89,-74,-75,-81,-80,-79,-43,89,89,-46,-38,]),'INT_NUMBER':([33,34,36,37,54,55,64,66,67,74,75,76,77,78,79,80,81,82,85,86,93,97,99,100,101,102,103,104,105,106,111,112,122,123,126,127,128,129,130,131,132,133,134,135,136,138,140,143,144,148,149,152,153,154,155,],[-82,46,51,-86,-85,-84,-83,46,46,46,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,46,46,46,46,-55,-56,-57,-58,46,46,-74,-75,-81,-80,46,-66,-67,46,-49,-50,-51,-52,-53,-54,-79,-43,46,46,147,-46,-38,156,157,158,159,]),'FLOAT_NUMBER':([33,34,37,54,55,64,66,67,74,75,76,77,78,79,80,81,82,85,86,93,97,99,100,101,102,103,104,105,106,111,112,122,123,126,127,128,129,130,131,132,133,134,135,136,138,140,143,148,149,],[-82,47,-86,-85,-84,-83,47,47,47,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,47,47,47,47,-55,-56,-57,-58,47,47,-74,-75,-81,-80,47,-66,-67,47,-49,-50,-51,-52,-53,-54,-79,-43,47,47,-46,-38,]),'RETURN':([33,37,54,55,64,66,73,74,75,76,77,78,79,80,81,82,85,86,98,111,112,122,123,136,138,148,149,],[-82,-86,-85,-84,-83,-89,97,-30,-32,-33,-34,-35,-36,-37,-44,-45,-77,-78,-31,-74,-75,-81,-80,-79,-43,-46,-38,]),'RIGHT_BR':([35,38,45,46,47,49,50,52,56,65,70,115,116,119,141,142,164,165,166,167,],[-89,-89,-72,-70,-71,57,-21,59,-19,-89,-20,125,-47,137,-48,-73,168,169,170,171,]),'COLON':([39,40,41,42,],[53,-23,-24,-25,]),'PLUS':([45,46,47,84,],[-72,-70,-71,101,]),'MINUS':([45,46,47,84,],[-72,-70,-71,102,]),'MULTIPLY':([45,46,47,84,],[-72,-70,-71,103,]),'DIVIDE':([45,46,47,84,],[-72,-70,-71,104,]),'LESS':([45,46,47,117,151,],[-72,-70,-71,130,152,]),'LESS_EQUAL':([45,46,47,117,151,],[-72,-70,-71,131,153,]),'GREATER':([45,46,47,117,151,],[-72,-70,-71,132,154,]),'GREATER_EQUAL':([45,46,47,117,151,],[-72,-70,-71,133,155,]),'EQUAL_EQUAL':([45,46,47,117,],[-72,-70,-71,134,]),'NOT_EQUAL':([45,46,47,117,],[-72,-70,-71,135,]),'AND':([45,46,47,116,142,],[-72,-70,-71,127,-73,]),'OR':([45,46,47,116,142,],[-72,-70,-71,128,-73,]),'RIGHT_BR_SQUARED':([51,],[58,]),'COMMA':([56,],[65,]),'PLUS_PLUS':([72,160,161,],[94,164,165,]),'MINUS_MINUS':([72,162,163,],[95,166,167,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start_symbol':([0,],[1,]),'program':([0,],[2,]),'program_components':([0,5,],[3,24,]),'empty':([0,5,35,38,65,66,67,74,106,140,143,],[4,25,50,50,50,79,79,79,79,79,79,]),'program_component':([0,5,],[5,5,]),'function_definition':([0,5,53,61,],[6,6,63,63,]),'class_definition':([0,5,],[7,7,]),'including':([0,5,],[8,8,]),'var_declaration':([0,5,53,61,66,67,74,106,140,143,],[9,9,62,62,80,80,80,80,80,80,]),'array_declaration':([0,5,53,61,66,67,74,106,140,143,],[10,10,64,64,64,64,64,64,64,64,]),'type_function_definition':([0,5,53,61,],[11,11,11,11,]),'void_function_definition':([0,5,53,61,],[12,12,12,12,]),'type':([0,5,35,38,53,61,65,66,67,74,106,140,143,],[16,16,48,48,16,16,48,71,71,71,71,71,71,]),'get_array_element':([16,71,],[29,29,]),'protection_level':([31,],[39,]),'value':([34,66,67,74,93,97,99,100,105,106,126,129,140,143,],[44,84,84,84,110,114,117,118,117,84,117,142,84,84,]),'number':([34,66,67,74,93,97,99,100,105,106,126,129,140,143,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'function_var_declaration':([35,38,65,],[49,52,70,]),'class_declarations':([53,61,],[60,69,]),'class_declaration':([53,61,],[61,61,]),'instructions':([66,67,74,106,140,143,],[73,90,98,120,145,146,]),'instruction':([66,67,74,106,140,143,],[74,74,74,74,74,74,]),'loop':([66,67,74,106,140,143,],[75,75,75,75,75,75,]),'if_statement':([66,67,74,106,140,143,],[76,76,76,76,76,76,]),'assignment':([66,67,74,106,140,143,],[77,77,77,77,77,77,]),'operation':([66,67,74,106,140,143,],[78,78,78,78,78,78,]),'while_loop':([66,67,74,106,140,143,],[81,81,81,81,81,81,]),'for_loop':([66,67,74,106,140,143,],[82,82,82,82,82,82,]),'increment':([66,67,74,106,140,143,],[85,85,85,85,85,85,]),'decrement':([66,67,74,106,140,143,],[86,86,86,86,86,86,]),'for_loop_statement':([66,67,74,106,140,143,],[88,88,88,88,88,88,]),'returning':([73,],[96,]),'operator':([84,],[100,]),'comparisons':([99,105,126,],[115,119,141,]),'comparison':([99,105,126,],[116,116,116,]),'conjunction':([116,],[126,]),'comparator':([117,],[129,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start_symbol","S'",1,None,None,None),
  ('start_symbol -> program','start_symbol',1,'p_start_symbol','Parser.py',160),
  ('program -> program_components','program',1,'p_program','Parser.py',166),
  ('program -> empty','program',1,'p_program','Parser.py',167),
  ('program_components -> program_component','program_components',1,'p_program_components','Parser.py',173),
  ('program_components -> program_component program_components','program_components',2,'p_program_components','Parser.py',174),
  ('program_components -> empty','program_components',1,'p_program_components','Parser.py',175),
  ('program_component -> function_definition','program_component',1,'p_program_component','Parser.py',181),
  ('program_component -> class_definition','program_component',1,'p_program_component','Parser.py',182),
  ('program_component -> including','program_component',1,'p_program_component','Parser.py',183),
  ('program_component -> var_declaration','program_component',1,'p_program_component','Parser.py',184),
  ('program_component -> array_declaration','program_component',1,'p_program_component','Parser.py',185),
  ('program_component -> empty','program_component',1,'p_program_component','Parser.py',186),
  ('using_namespace_std -> USING NAMESPACE STD SEMICOLON','using_namespace_std',4,'p_using_namespace_std','Parser.py',193),
  ('including -> HASH INCLUDE LIBRARY','including',3,'p_including','Parser.py',199),
  ('function_definition -> type_function_definition','function_definition',1,'p_function_definition','Parser.py',206),
  ('function_definition -> void_function_definition','function_definition',1,'p_function_definition','Parser.py',207),
  ('type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY','type_function_definition',9,'p_type_function_definition','Parser.py',213),
  ('void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY','void_function_definition',8,'p_void_function_definition','Parser.py',219),
  ('function_var_declaration -> type VAR','function_var_declaration',2,'p_function_var_declaration','Parser.py',227),
  ('function_var_declaration -> type VAR COMMA function_var_declaration','function_var_declaration',4,'p_function_var_declaration','Parser.py',228),
  ('function_var_declaration -> empty','function_var_declaration',1,'p_function_var_declaration','Parser.py',229),
  ('class_definition -> CLASS STRING LEFT_BR_CURLY protection_level COLON class_declarations RIGHT_BR_CURLY SEMICOLON','class_definition',8,'p_class_definition','Parser.py',236),
  ('protection_level -> PUBLIC','protection_level',1,'p_protection_level','Parser.py',242),
  ('protection_level -> PRIVATE','protection_level',1,'p_protection_level','Parser.py',243),
  ('protection_level -> PROTECTED','protection_level',1,'p_protection_level','Parser.py',244),
  ('class_declaration -> var_declaration','class_declaration',1,'p_class_declaration','Parser.py',250),
  ('class_declaration -> function_definition','class_declaration',1,'p_class_declaration','Parser.py',251),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','Parser.py',257),
  ('class_declarations -> class_declaration class_declarations','class_declarations',2,'p_class_declarations','Parser.py',258),
  ('instructions -> instruction','instructions',1,'p_instructions','Parser.py',265),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','Parser.py',266),
  ('instruction -> loop','instruction',1,'p_instruction','Parser.py',272),
  ('instruction -> if_statement','instruction',1,'p_instruction','Parser.py',273),
  ('instruction -> assignment','instruction',1,'p_instruction','Parser.py',274),
  ('instruction -> operation','instruction',1,'p_instruction','Parser.py',275),
  ('instruction -> empty','instruction',1,'p_instruction','Parser.py',276),
  ('instruction -> var_declaration','instruction',1,'p_instruction','Parser.py',277),
  ('while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY','while_loop',7,'p_while_loop','Parser.py',283),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR','for_loop_statement',13,'p_for_loop_statement','Parser.py',289),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON PLUS_PLUS RIGHT_BR','for_loop_statement',13,'p_for_loop_statement','Parser.py',290),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR','for_loop_statement',13,'p_for_loop_statement','Parser.py',291),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON MINUS_MINUS RIGHT_BR','for_loop_statement',13,'p_for_loop_statement','Parser.py',292),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY','for_loop',4,'p_for_loop','Parser.py',298),
  ('loop -> while_loop','loop',1,'p_loop','Parser.py',304),
  ('loop -> for_loop','loop',1,'p_loop','Parser.py',305),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY','if_statement',7,'p_if_statement','Parser.py',317),
  ('comparisons -> comparison','comparisons',1,'p_comparisons','Parser.py',323),
  ('comparisons -> comparison conjunction comparisons','comparisons',3,'p_comparisons','Parser.py',324),
  ('comparator -> LESS','comparator',1,'p_comparator','Parser.py',335),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','Parser.py',336),
  ('comparator -> GREATER','comparator',1,'p_comparator','Parser.py',337),
  ('comparator -> GREATER_EQUAL','comparator',1,'p_comparator','Parser.py',338),
  ('comparator -> EQUAL_EQUAL','comparator',1,'p_comparator','Parser.py',339),
  ('comparator -> NOT_EQUAL','comparator',1,'p_comparator','Parser.py',340),
  ('operator -> PLUS','operator',1,'p_operator','Parser.py',346),
  ('operator -> MINUS','operator',1,'p_operator','Parser.py',347),
  ('operator -> MULTIPLY','operator',1,'p_operator','Parser.py',348),
  ('operator -> DIVIDE','operator',1,'p_operator','Parser.py',349),
  ('type -> INT','type',1,'p_type','Parser.py',355),
  ('type -> CHAR','type',1,'p_type','Parser.py',356),
  ('type -> STRING','type',1,'p_type','Parser.py',357),
  ('type -> BOOL','type',1,'p_type','Parser.py',358),
  ('type -> FLOAT','type',1,'p_type','Parser.py',359),
  ('type -> LONG','type',1,'p_type','Parser.py',360),
  ('type -> SHORT','type',1,'p_type','Parser.py',361),
  ('conjunction -> AND','conjunction',1,'p_conjunction','Parser.py',367),
  ('conjunction -> OR','conjunction',1,'p_conjunction','Parser.py',368),
  ('string_value -> TEXT','string_value',1,'p_string_value','Parser.py',374),
  ('string_value -> SIGN','string_value',1,'p_string_value','Parser.py',375),
  ('number -> INT_NUMBER','number',1,'p_number','Parser.py',381),
  ('number -> FLOAT_NUMBER','number',1,'p_number','Parser.py',382),
  ('value -> number','value',1,'p_value','Parser.py',395),
  ('value -> value','value',1,'p_value','Parser.py',396),
  ('increment -> VAR PLUS_PLUS SEMICOLON','increment',3,'p_increment','Parser.py',402),
  ('decrement -> VAR MINUS_MINUS SEMICOLON','decrement',3,'p_decrement','Parser.py',408),
  ('get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',414),
  ('operation -> increment','operation',1,'p_operation','Parser.py',420),
  ('operation -> decrement','operation',1,'p_operation','Parser.py',421),
  ('operation -> value operator value SEMICOLON','operation',4,'p_operation','Parser.py',422),
  ('assignment -> VAR EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',428),
  ('assignment -> VAR EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',429),
  ('var_declaration -> type VAR SEMICOLON','var_declaration',3,'p_var_declaration','Parser.py',435),
  ('var_declaration -> array_declaration','var_declaration',1,'p_var_declaration','Parser.py',436),
  ('var_declaration -> type VAR EQUAL value SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',437),
  ('var_declaration -> type VAR EQUAL VAR SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',438),
  ('array_declaration -> type get_array_element SEMICOLON','array_declaration',3,'p_array_declaration','Parser.py',444),
  ('comparison -> value comparator value','comparison',3,'p_comparison','Parser.py',450),
  ('returning -> RETURN value SEMICOLON','returning',3,'p_returning','Parser.py',456),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',461),
]
