
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR CIN CLASS COMMA COMMENT COUT DIVIDE DOT DOUBLE ELSE EMPTY_TEXT ENDL EQUAL EQUAL_EQUAL FALSE FLOAT FLOAT_NUMBER FOR GREATER GREATER_EQUAL HASH ID IF IN INCLUDE INT INT_NUMBER LEFT_BR LEFT_BR_CURLY LEFT_BR_SQUARED LESS LESS_EQUAL LIBRARY LONG MINUS MINUS_MINUS MULTIPLY NAMESPACE NOT_EQUAL OR OUT PLUS PLUS_PLUS RETURN RIGHT_BR RIGHT_BR_CURLY RIGHT_BR_SQUARED SEMICOLON SHORT SIGN STD STRING TEXT TRUE USING VAR VOID WHILE\n    start_symbol : program\n    \n    program : program_components\n            | empty\n    \n    program_components : program_component\n        | program_component program_components\n    \n    program_component : function_definition\n        | class_definition\n        | including\n        | using_namespace_std\n        | var_declaration\n        | array_declaration\n        | comment\n        | empty\n    \n    using_namespace_std : USING NAMESPACE STD SEMICOLON\n    \n    including : HASH INCLUDE LIBRARY\n    \n    function_definition : type_function_definition\n        | void_function_definition\n    \n    type_function_definition : type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY\n    \n    void_function_definition : VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    function_var_declaration : var_declaration_no_semicolon\n        | var_declaration_no_semicolon COMMA function_var_declaration\n        | empty\n    \n    var_declaration_no_semicolon : type VAR\n    \n    function_call : VAR LEFT_BR RIGHT_BR SEMICOLON\n        | VAR LEFT_BR var_list RIGHT_BR SEMICOLON\n    \n    class_definition : CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON\n    \n    var_list : value\n             | value COMMA var_list\n    \n    class_declaration : var_declaration\n        | function_definition\n    \n    class_declarations : class_declaration\n        | class_declaration class_declarations\n        | empty\n    \n    instructions : instruction\n        | instruction instructions\n    \n    instruction : loop\n        | if_statement\n        | assignment\n        | operation\n        | empty\n        | var_declaration\n        | print\n        | input\n        | comment\n        | function_call\n    \n    while_loop : WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n        | WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    for_loop_statement : FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR\n    \n    for_loop : for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    loop : while_loop\n        | for_loop\n    \n    else_statement : ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    if_statement : IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n                 | IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY  else_statement\n    \n    comparisons : comparison\n        | comparison conjunction comparisons\n    \n    comparison : value comparator value\n        | value EQUAL_EQUAL EMPTY_TEXT\n    \n    comparator : LESS\n        | LESS_EQUAL\n        | GREATER\n        | GREATER_EQUAL\n        | EQUAL_EQUAL\n        | NOT_EQUAL\n    \n    operator : PLUS\n        | MINUS\n        | MULTIPLY\n        | DIVIDE\n    \n    type : INT\n        | CHAR\n        | STRING\n        | BOOL\n        | FLOAT\n        | LONG\n        | SHORT\n        | DOUBLE\n    \n    conjunction : AND\n        | OR\n    \n    string_value : TEXT\n        | SIGN\n    \n    number : INT_NUMBER\n        | FLOAT_NUMBER\n    \n    bool_value : TRUE\n        | FALSE\n    \n    value : number\n        | VAR\n        | get_array_element\n        | string_value\n        | bool_value\n        | math_operation\n    \n    increment : VAR PLUS_PLUS SEMICOLON\n    \n    decrement : VAR MINUS_MINUS SEMICOLON\n    \n    math_operation : VAR operator VAR\n        | VAR operator number\n        | number operator number\n    \n    operation : increment\n        | decrement\n    \n    get_array_element : VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED\n        | VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED\n    \n    assignment : VAR EQUAL value SEMICOLON\n               | VAR EQUAL VAR SEMICOLON\n               | VAR EQUAL function_call\n               | get_array_element EQUAL value SEMICOLON\n               | get_array_element EQUAL VAR SEMICOLON\n    \n    var_declaration : type VAR SEMICOLON\n        | array_declaration\n        | type VAR EQUAL value SEMICOLON\n        | type VAR EQUAL VAR SEMICOLON\n        | type VAR EQUAL function_call\n    \n    array_declaration : type get_array_element SEMICOLON\n    \n    out : OUT VAR\n        | OUT VAR out\n        | OUT TEXT\n        | OUT TEXT out\n        | OUT ENDL\n        | OUT ENDL out\n    \n    in : IN VAR\n       | IN VAR in\n    \n    print : COUT out SEMICOLON\n    \n    input : CIN in SEMICOLON\n    \n    returning : RETURN value SEMICOLON\n    \n    comment : COMMENT\n    empty : change_tab_number : change_inside_class : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,19,29,30,38,40,44,47,50,70,77,103,108,109,153,159,],[-130,0,-1,-2,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-5,-13,-15,-112,-117,-14,-116,-115,-114,-24,-26,-25,-19,-18,]),'CLASS':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,50,70,77,103,108,109,153,159,],[15,-13,15,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-15,-112,-117,-14,-116,-115,-114,-24,-26,-25,-19,-18,]),'HASH':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,50,70,77,103,108,109,153,159,],[16,-13,16,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-15,-112,-117,-14,-116,-115,-114,-24,-26,-25,-19,-18,]),'USING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,50,70,77,103,108,109,153,159,],[17,-13,17,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-15,-112,-117,-14,-116,-115,-114,-24,-26,-25,-19,-18,]),'COMMENT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,50,70,77,90,98,100,103,106,107,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,153,156,157,158,159,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[19,-13,19,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-15,-112,-117,-14,-116,-115,-114,-113,-131,-131,-24,19,19,-26,-25,19,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-19,-109,-98,-99,-18,-126,-127,19,-108,-107,-110,-111,-131,-131,-131,-56,19,19,19,-60,-46,-47,-61,19,-59,]),'VOID':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,44,46,47,50,69,70,77,86,88,89,90,103,108,109,153,159,],[20,-13,20,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-131,-15,-112,-117,-132,-14,-116,20,-115,-114,20,-29,-30,-113,-24,-26,-25,-19,-18,]),'INT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,50,69,70,77,81,86,88,89,90,98,100,103,106,107,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,152,153,156,157,158,159,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[21,-13,21,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-131,-15,-112,21,-117,21,-132,-14,-116,21,-115,-114,21,21,-29,-30,-113,-131,-131,-24,21,21,-26,-25,21,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,175,-19,-109,-98,-99,-18,-126,-127,21,-108,-107,-110,-111,-131,-131,-131,-56,21,21,21,-60,-46,-47,-61,21,-59,]),'CHAR':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,50,69,70,77,81,86,88,89,90,98,100,103,106,107,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,153,156,157,158,159,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[22,-13,22,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-131,-15,-112,22,-117,22,-132,-14,-116,22,-115,-114,22,22,-29,-30,-113,-131,-131,-24,22,22,-26,-25,22,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-19,-109,-98,-99,-18,-126,-127,22,-108,-107,-110,-111,-131,-131,-131,-56,22,22,22,-60,-46,-47,-61,22,-59,]),'STRING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,50,69,70,77,81,86,88,89,90,98,100,103,106,107,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,153,156,157,158,159,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[23,-13,23,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-131,-15,-112,23,-117,23,-132,-14,-116,23,-115,-114,23,23,-29,-30,-113,-131,-131,-24,23,23,-26,-25,23,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-19,-109,-98,-99,-18,-126,-127,23,-108,-107,-110,-111,-131,-131,-131,-56,23,23,23,-60,-46,-47,-61,23,-59,]),'BOOL':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,50,69,70,77,81,86,88,89,90,98,100,103,106,107,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,153,156,157,158,159,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[24,-13,24,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-131,-15,-112,24,-117,24,-132,-14,-116,24,-115,-114,24,24,-29,-30,-113,-131,-131,-24,24,24,-26,-25,24,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-19,-109,-98,-99,-18,-126,-127,24,-108,-107,-110,-111,-131,-131,-131,-56,24,24,24,-60,-46,-47,-61,24,-59,]),'FLOAT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,50,69,70,77,81,86,88,89,90,98,100,103,106,107,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,153,156,157,158,159,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[25,-13,25,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-131,-15,-112,25,-117,25,-132,-14,-116,25,-115,-114,25,25,-29,-30,-113,-131,-131,-24,25,25,-26,-25,25,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-19,-109,-98,-99,-18,-126,-127,25,-108,-107,-110,-111,-131,-131,-131,-56,25,25,25,-60,-46,-47,-61,25,-59,]),'LONG':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,50,69,70,77,81,86,88,89,90,98,100,103,106,107,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,153,156,157,158,159,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[26,-13,26,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-131,-15,-112,26,-117,26,-132,-14,-116,26,-115,-114,26,26,-29,-30,-113,-131,-131,-24,26,26,-26,-25,26,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-19,-109,-98,-99,-18,-126,-127,26,-108,-107,-110,-111,-131,-131,-131,-56,26,26,26,-60,-46,-47,-61,26,-59,]),'SHORT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,50,69,70,77,81,86,88,89,90,98,100,103,106,107,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,153,156,157,158,159,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[27,-13,27,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-131,-15,-112,27,-117,27,-132,-14,-116,27,-115,-114,27,27,-29,-30,-113,-131,-131,-24,27,27,-26,-25,27,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-19,-109,-98,-99,-18,-126,-127,27,-108,-107,-110,-111,-131,-131,-131,-56,27,27,27,-60,-46,-47,-61,27,-59,]),'DOUBLE':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,50,69,70,77,81,86,88,89,90,98,100,103,106,107,108,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,153,156,157,158,159,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[28,-13,28,-6,-7,-8,-9,-10,-11,-12,-16,-17,-129,-13,-131,-15,-112,28,-117,28,-132,-14,-116,28,-115,-114,28,28,-29,-30,-113,-131,-131,-24,28,28,-26,-25,28,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-19,-109,-98,-99,-18,-126,-127,28,-108,-107,-110,-111,-131,-131,-131,-56,28,28,28,-60,-46,-47,-61,28,-59,]),'RIGHT_BR_CURLY':([13,14,19,37,40,44,46,50,69,70,77,85,86,87,88,89,90,100,102,103,107,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,136,141,143,151,153,156,157,158,159,166,170,174,176,177,178,190,191,198,200,204,205,206,208,209,210,212,213,214,216,217,218,220,226,235,244,],[-16,-17,-129,-131,-112,-117,-132,-116,-130,-115,-114,101,-31,-33,-29,-30,-113,-131,-32,-24,-130,-25,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,153,159,-35,-131,-19,-109,-98,-99,-18,-126,-127,-130,-108,-107,-128,-110,-111,206,-131,-131,-131,-56,-130,-130,-130,216,217,218,-60,-46,-47,-61,-130,244,-59,]),'VAR':([15,18,19,20,21,22,23,24,25,26,27,28,40,41,43,44,50,62,70,71,72,73,74,75,76,77,90,98,100,103,105,106,107,109,111,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,138,142,144,145,147,149,150,151,156,157,158,166,170,174,175,176,177,180,181,182,183,184,185,186,187,188,189,190,191,200,204,205,206,208,209,210,215,216,217,218,220,222,223,224,225,226,236,237,238,239,240,241,242,243,244,],[31,34,-129,36,-76,-77,-78,-79,-80,-81,-82,-83,-112,48,66,-117,-116,79,-115,91,95,-72,-73,-74,-75,-114,-113,-131,-131,-24,91,112,112,-25,137,112,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,154,91,91,165,167,171,91,-131,-109,-98,-99,-126,-127,112,199,-108,-107,91,-84,-85,91,-70,-66,-67,-68,-69,-71,-110,-111,-131,-131,-131,-56,112,112,112,219,-60,-46,-47,-61,227,229,231,233,112,245,246,247,248,249,250,251,252,-59,]),'INCLUDE':([16,],[32,]),'NAMESPACE':([17,],[33,]),'IF':([19,40,44,50,70,77,90,98,100,103,106,107,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,156,157,158,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[-129,-112,-117,-116,-115,-114,-113,-131,-131,-24,127,127,-25,127,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-109,-98,-99,-126,-127,127,-108,-107,-110,-111,-131,-131,-131,-56,127,127,127,-60,-46,-47,-61,127,-59,]),'COUT':([19,40,44,50,70,77,90,98,100,103,106,107,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,156,157,158,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[-129,-112,-117,-116,-115,-114,-113,-131,-131,-24,131,131,-25,131,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-109,-98,-99,-126,-127,131,-108,-107,-110,-111,-131,-131,-131,-56,131,131,131,-60,-46,-47,-61,131,-59,]),'CIN':([19,40,44,50,70,77,90,98,100,103,106,107,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,156,157,158,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[-129,-112,-117,-116,-115,-114,-113,-131,-131,-24,132,132,-25,132,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-109,-98,-99,-126,-127,132,-108,-107,-110,-111,-131,-131,-131,-56,132,132,132,-60,-46,-47,-61,132,-59,]),'WHILE':([19,40,44,50,70,77,90,98,100,103,106,107,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,156,157,158,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[-129,-112,-117,-116,-115,-114,-113,-131,-131,-24,133,133,-25,133,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-109,-98,-99,-126,-127,133,-108,-107,-110,-111,-131,-131,-131,-56,133,133,133,-60,-46,-47,-61,133,-59,]),'FOR':([19,40,44,50,70,77,90,98,100,103,106,107,109,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,151,156,157,158,166,170,174,176,177,190,191,200,204,205,206,208,209,210,216,217,218,220,226,244,],[-129,-112,-117,-116,-115,-114,-113,-131,-131,-24,135,135,-25,135,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-131,-109,-98,-99,-126,-127,135,-108,-107,-110,-111,-131,-131,-131,-56,135,135,135,-60,-46,-47,-61,135,-59,]),'RETURN':([19,40,44,50,70,77,90,98,103,106,109,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,143,156,157,158,166,170,176,177,190,191,206,216,217,218,220,244,],[-129,-112,-117,-116,-115,-114,-113,-131,-24,-130,-25,142,-34,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-57,-58,-103,-104,-35,-109,-98,-99,-126,-127,-108,-107,-110,-111,-56,-60,-46,-47,-61,-59,]),'LEFT_BR_CURLY':([31,80,84,134,179,196,197,221,261,262,263,264,265,266,267,268,],[37,98,100,151,200,204,205,226,-49,-48,-51,-50,-53,-52,-55,-54,]),'LIBRARY':([32,],[38,]),'STD':([33,],[39,]),'SEMICOLON':([34,35,39,48,49,51,52,53,54,55,56,57,58,59,60,61,82,83,91,92,95,96,97,101,104,137,139,140,146,148,154,155,160,164,165,167,168,169,171,192,193,194,195,211,227,228,229,230,231,232,233,234,],[40,44,47,70,77,-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,-106,-105,-93,103,-100,-101,-102,108,109,40,157,158,166,170,176,177,178,190,191,-118,-120,-122,-124,-119,-121,-123,-125,215,236,237,238,239,240,241,242,243,]),'EQUAL':([34,82,83,112,128,137,199,],[41,-106,-105,138,145,41,207,]),'LEFT_BR':([34,36,48,112,127,133,135,154,],[42,45,71,71,144,150,152,71,]),'LEFT_BR_SQUARED':([34,48,91,112,137,154,165,],[43,43,43,43,43,43,43,]),'INT_NUMBER':([41,43,71,72,73,74,75,76,78,105,138,142,144,145,150,180,181,182,183,184,185,186,187,188,189,207,222,223,224,225,],[56,67,56,56,-72,-73,-74,-75,56,56,56,56,56,56,56,56,-84,-85,56,-70,-66,-67,-68,-69,-71,211,228,230,232,234,]),'FLOAT_NUMBER':([41,71,72,73,74,75,76,78,105,138,142,144,145,150,180,181,182,183,184,185,186,187,188,189,],[57,57,57,-72,-73,-74,-75,57,57,57,57,57,57,57,57,-84,-85,57,-70,-66,-67,-68,-69,-71,]),'TEXT':([41,71,105,138,142,144,145,147,150,180,181,182,183,184,185,186,187,188,189,],[58,58,58,58,58,58,58,168,58,58,-84,-85,58,-70,-66,-67,-68,-69,-71,]),'SIGN':([41,71,105,138,142,144,145,150,180,181,182,183,184,185,186,187,188,189,],[59,59,59,59,59,59,59,59,59,-84,-85,59,-70,-66,-67,-68,-69,-71,]),'TRUE':([41,71,105,138,142,144,145,150,180,181,182,183,184,185,186,187,188,189,],[60,60,60,60,60,60,60,60,60,-84,-85,60,-70,-66,-67,-68,-69,-71,]),'FALSE':([41,71,105,138,142,144,145,150,180,181,182,183,184,185,186,187,188,189,],[61,61,61,61,61,61,61,61,61,-84,-85,61,-70,-66,-67,-68,-69,-71,]),'RIGHT_BR':([42,45,51,52,53,54,55,56,57,58,59,60,61,63,64,65,68,71,79,81,82,83,91,93,94,95,96,97,99,110,161,162,172,173,201,202,203,253,254,255,256,257,258,259,260,],[-130,-130,-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,80,-20,-22,84,92,-23,-130,-106,-105,-93,104,-27,-100,-101,-102,-21,-28,179,-62,196,197,-63,-64,-65,261,262,263,264,265,266,267,268,]),'PLUS':([48,51,56,57,91,154,165,],[73,73,-88,-89,73,73,73,]),'MINUS':([48,51,56,57,91,154,165,],[74,74,-88,-89,74,74,74,]),'MULTIPLY':([48,51,56,57,91,154,165,],[75,75,-88,-89,75,75,75,]),'DIVIDE':([48,51,56,57,91,154,165,],[76,76,-88,-89,76,76,76,]),'COMMA':([51,52,53,54,55,56,57,58,59,60,61,64,79,82,83,91,94,95,96,97,],[-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,81,-23,-106,-105,-93,105,-100,-101,-102,]),'EQUAL_EQUAL':([51,52,53,54,55,56,57,58,59,60,61,82,83,91,95,96,97,163,173,],[-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,-106,-105,-93,-100,-101,-102,184,-96,]),'LESS':([51,52,53,54,55,56,57,58,59,60,61,82,83,91,95,96,97,163,173,219,],[-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,-106,-105,-93,-100,-101,-102,185,-96,222,]),'LESS_EQUAL':([51,52,53,54,55,56,57,58,59,60,61,82,83,91,95,96,97,163,173,219,],[-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,-106,-105,-93,-100,-101,-102,186,-96,223,]),'GREATER':([51,52,53,54,55,56,57,58,59,60,61,82,83,91,95,96,97,163,173,219,],[-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,-106,-105,-93,-100,-101,-102,187,-96,224,]),'GREATER_EQUAL':([51,52,53,54,55,56,57,58,59,60,61,82,83,91,95,96,97,163,173,219,],[-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,-106,-105,-93,-100,-101,-102,188,-96,225,]),'NOT_EQUAL':([51,52,53,54,55,56,57,58,59,60,61,82,83,91,95,96,97,163,173,],[-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,-106,-105,-93,-100,-101,-102,189,-96,]),'AND':([51,52,53,54,55,56,57,58,59,60,61,82,83,91,95,96,97,162,202,203,],[-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,-106,-105,-93,-100,-101,-102,181,-64,-65,]),'OR':([51,52,53,54,55,56,57,58,59,60,61,82,83,91,95,96,97,162,202,203,],[-92,-94,-95,-96,-97,-88,-89,-86,-87,-90,-91,-106,-105,-93,-100,-101,-102,182,-64,-65,]),'RIGHT_BR_SQUARED':([66,67,],[82,83,]),'PLUS_PLUS':([112,245,246,247,248,],[139,253,254,255,256,]),'MINUS_MINUS':([112,249,250,251,252,],[140,257,258,259,260,]),'OUT':([131,167,168,169,],[147,147,147,147,]),'IN':([132,171,],[149,149,]),'ENDL':([147,],[169,]),'EMPTY_TEXT':([184,],[203,]),'ELSE':([216,],[221,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start_symbol':([0,],[1,]),'program':([0,],[2,]),'program_components':([0,5,],[3,29,]),'empty':([0,5,42,45,69,81,86,106,107,114,174,208,209,210,226,],[4,30,65,65,87,65,87,119,119,119,119,119,119,119,119,]),'program_component':([0,5,],[5,5,]),'function_definition':([0,5,69,86,],[6,6,89,89,]),'class_definition':([0,5,],[7,7,]),'including':([0,5,],[8,8,]),'using_namespace_std':([0,5,],[9,9,]),'var_declaration':([0,5,69,86,106,107,114,174,208,209,210,226,],[10,10,88,88,120,120,120,120,120,120,120,120,]),'array_declaration':([0,5,69,86,106,107,114,174,208,209,210,226,],[11,11,90,90,90,90,90,90,90,90,90,90,]),'comment':([0,5,106,107,114,174,208,209,210,226,],[12,12,123,123,123,123,123,123,123,123,]),'type_function_definition':([0,5,69,86,],[13,13,13,13,]),'void_function_definition':([0,5,69,86,],[14,14,14,14,]),'type':([0,5,42,45,69,81,86,106,107,114,174,208,209,210,226,],[18,18,62,62,18,62,18,111,111,111,111,111,111,111,111,]),'get_array_element':([18,41,71,105,106,107,111,114,138,142,144,145,150,174,180,183,208,209,210,226,],[35,52,52,52,128,128,35,128,52,52,52,52,52,128,52,52,128,128,128,128,]),'change_tab_number':([37,98,100,151,200,204,205,],[46,106,107,174,208,209,210,]),'value':([41,71,105,138,142,144,145,150,180,183,],[49,94,94,155,160,163,164,163,163,202,]),'function_call':([41,106,107,114,138,174,208,209,210,226,],[50,124,124,124,156,124,124,124,124,124,]),'number':([41,71,72,78,105,138,142,144,145,150,180,183,],[51,51,96,97,51,51,51,51,51,51,51,51,]),'string_value':([41,71,105,138,142,144,145,150,180,183,],[53,53,53,53,53,53,53,53,53,53,]),'bool_value':([41,71,105,138,142,144,145,150,180,183,],[54,54,54,54,54,54,54,173,54,54,]),'math_operation':([41,71,105,138,142,144,145,150,180,183,],[55,55,55,55,55,55,55,55,55,55,]),'function_var_declaration':([42,45,81,],[63,68,99,]),'var_declaration_no_semicolon':([42,45,81,],[64,64,64,]),'change_inside_class':([46,],[69,]),'operator':([48,51,91,154,165,],[72,78,72,72,72,]),'class_declarations':([69,86,],[85,102,]),'class_declaration':([69,86,],[86,86,]),'var_list':([71,105,],[93,110,]),'instructions':([106,107,114,174,208,209,210,226,],[113,136,143,198,212,213,214,235,]),'instruction':([106,107,114,174,208,209,210,226,],[114,114,114,114,114,114,114,114,]),'loop':([106,107,114,174,208,209,210,226,],[115,115,115,115,115,115,115,115,]),'if_statement':([106,107,114,174,208,209,210,226,],[116,116,116,116,116,116,116,116,]),'assignment':([106,107,114,174,208,209,210,226,],[117,117,117,117,117,117,117,117,]),'operation':([106,107,114,174,208,209,210,226,],[118,118,118,118,118,118,118,118,]),'print':([106,107,114,174,208,209,210,226,],[121,121,121,121,121,121,121,121,]),'input':([106,107,114,174,208,209,210,226,],[122,122,122,122,122,122,122,122,]),'while_loop':([106,107,114,174,208,209,210,226,],[125,125,125,125,125,125,125,125,]),'for_loop':([106,107,114,174,208,209,210,226,],[126,126,126,126,126,126,126,126,]),'increment':([106,107,114,174,208,209,210,226,],[129,129,129,129,129,129,129,129,]),'decrement':([106,107,114,174,208,209,210,226,],[130,130,130,130,130,130,130,130,]),'for_loop_statement':([106,107,114,174,208,209,210,226,],[134,134,134,134,134,134,134,134,]),'returning':([113,],[141,]),'out':([131,167,168,169,],[146,192,193,194,]),'in':([132,171,],[148,195,]),'comparisons':([144,150,180,],[161,172,201,]),'comparison':([144,150,180,],[162,162,162,]),'conjunction':([162,],[180,]),'comparator':([163,],[183,]),'else_statement':([216,],[220,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start_symbol","S'",1,None,None,None),
  ('start_symbol -> program','start_symbol',1,'p_start_symbol','Parser.py',169),
  ('program -> program_components','program',1,'p_program','Parser.py',178),
  ('program -> empty','program',1,'p_program','Parser.py',179),
  ('program_components -> program_component','program_components',1,'p_program_components','Parser.py',186),
  ('program_components -> program_component program_components','program_components',2,'p_program_components','Parser.py',187),
  ('program_component -> function_definition','program_component',1,'p_program_component','Parser.py',197),
  ('program_component -> class_definition','program_component',1,'p_program_component','Parser.py',198),
  ('program_component -> including','program_component',1,'p_program_component','Parser.py',199),
  ('program_component -> using_namespace_std','program_component',1,'p_program_component','Parser.py',200),
  ('program_component -> var_declaration','program_component',1,'p_program_component','Parser.py',201),
  ('program_component -> array_declaration','program_component',1,'p_program_component','Parser.py',202),
  ('program_component -> comment','program_component',1,'p_program_component','Parser.py',203),
  ('program_component -> empty','program_component',1,'p_program_component','Parser.py',204),
  ('using_namespace_std -> USING NAMESPACE STD SEMICOLON','using_namespace_std',4,'p_using_namespace_std','Parser.py',212),
  ('including -> HASH INCLUDE LIBRARY','including',3,'p_including','Parser.py',220),
  ('function_definition -> type_function_definition','function_definition',1,'p_function_definition','Parser.py',229),
  ('function_definition -> void_function_definition','function_definition',1,'p_function_definition','Parser.py',230),
  ('type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY','type_function_definition',10,'p_type_function_definition','Parser.py',237),
  ('void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','void_function_definition',9,'p_void_function_definition','Parser.py',246),
  ('function_var_declaration -> var_declaration_no_semicolon','function_var_declaration',1,'p_function_var_declaration','Parser.py',255),
  ('function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration','function_var_declaration',3,'p_function_var_declaration','Parser.py',256),
  ('function_var_declaration -> empty','function_var_declaration',1,'p_function_var_declaration','Parser.py',257),
  ('var_declaration_no_semicolon -> type VAR','var_declaration_no_semicolon',2,'p_var_declaration_no_semicolon','Parser.py',267),
  ('function_call -> VAR LEFT_BR RIGHT_BR SEMICOLON','function_call',4,'p_function_call','Parser.py',274),
  ('function_call -> VAR LEFT_BR var_list RIGHT_BR SEMICOLON','function_call',5,'p_function_call','Parser.py',275),
  ('class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number change_inside_class class_declarations RIGHT_BR_CURLY SEMICOLON','class_definition',8,'p_class_definition','Parser.py',286),
  ('var_list -> value','var_list',1,'p_var_list','Parser.py',297),
  ('var_list -> value COMMA var_list','var_list',3,'p_var_list','Parser.py',298),
  ('class_declaration -> var_declaration','class_declaration',1,'p_class_declaration','Parser.py',308),
  ('class_declaration -> function_definition','class_declaration',1,'p_class_declaration','Parser.py',309),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','Parser.py',320),
  ('class_declarations -> class_declaration class_declarations','class_declarations',2,'p_class_declarations','Parser.py',321),
  ('class_declarations -> empty','class_declarations',1,'p_class_declarations','Parser.py',322),
  ('instructions -> instruction','instructions',1,'p_instructions','Parser.py',332),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','Parser.py',333),
  ('instruction -> loop','instruction',1,'p_instruction','Parser.py',342),
  ('instruction -> if_statement','instruction',1,'p_instruction','Parser.py',343),
  ('instruction -> assignment','instruction',1,'p_instruction','Parser.py',344),
  ('instruction -> operation','instruction',1,'p_instruction','Parser.py',345),
  ('instruction -> empty','instruction',1,'p_instruction','Parser.py',346),
  ('instruction -> var_declaration','instruction',1,'p_instruction','Parser.py',347),
  ('instruction -> print','instruction',1,'p_instruction','Parser.py',348),
  ('instruction -> input','instruction',1,'p_instruction','Parser.py',349),
  ('instruction -> comment','instruction',1,'p_instruction','Parser.py',350),
  ('instruction -> function_call','instruction',1,'p_instruction','Parser.py',351),
  ('while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',364),
  ('while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',365),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',374),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',375),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',376),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',377),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',378),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',379),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',380),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',381),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','for_loop',5,'p_for_loop','Parser.py',408),
  ('loop -> while_loop','loop',1,'p_loop','Parser.py',417),
  ('loop -> for_loop','loop',1,'p_loop','Parser.py',418),
  ('else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY','else_statement',4,'p_else_statement','Parser.py',425),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','if_statement',8,'p_if_statement','Parser.py',437),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement','if_statement',9,'p_if_statement','Parser.py',438),
  ('comparisons -> comparison','comparisons',1,'p_comparisons','Parser.py',450),
  ('comparisons -> comparison conjunction comparisons','comparisons',3,'p_comparisons','Parser.py',451),
  ('comparison -> value comparator value','comparison',3,'p_comparison','Parser.py',461),
  ('comparison -> value EQUAL_EQUAL EMPTY_TEXT','comparison',3,'p_comparison','Parser.py',462),
  ('comparator -> LESS','comparator',1,'p_comparator','Parser.py',470),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','Parser.py',471),
  ('comparator -> GREATER','comparator',1,'p_comparator','Parser.py',472),
  ('comparator -> GREATER_EQUAL','comparator',1,'p_comparator','Parser.py',473),
  ('comparator -> EQUAL_EQUAL','comparator',1,'p_comparator','Parser.py',474),
  ('comparator -> NOT_EQUAL','comparator',1,'p_comparator','Parser.py',475),
  ('operator -> PLUS','operator',1,'p_operator','Parser.py',481),
  ('operator -> MINUS','operator',1,'p_operator','Parser.py',482),
  ('operator -> MULTIPLY','operator',1,'p_operator','Parser.py',483),
  ('operator -> DIVIDE','operator',1,'p_operator','Parser.py',484),
  ('type -> INT','type',1,'p_type','Parser.py',490),
  ('type -> CHAR','type',1,'p_type','Parser.py',491),
  ('type -> STRING','type',1,'p_type','Parser.py',492),
  ('type -> BOOL','type',1,'p_type','Parser.py',493),
  ('type -> FLOAT','type',1,'p_type','Parser.py',494),
  ('type -> LONG','type',1,'p_type','Parser.py',495),
  ('type -> SHORT','type',1,'p_type','Parser.py',496),
  ('type -> DOUBLE','type',1,'p_type','Parser.py',497),
  ('conjunction -> AND','conjunction',1,'p_conjunction','Parser.py',504),
  ('conjunction -> OR','conjunction',1,'p_conjunction','Parser.py',505),
  ('string_value -> TEXT','string_value',1,'p_string_value','Parser.py',512),
  ('string_value -> SIGN','string_value',1,'p_string_value','Parser.py',513),
  ('number -> INT_NUMBER','number',1,'p_number','Parser.py',520),
  ('number -> FLOAT_NUMBER','number',1,'p_number','Parser.py',521),
  ('bool_value -> TRUE','bool_value',1,'p_bool_value','Parser.py',528),
  ('bool_value -> FALSE','bool_value',1,'p_bool_value','Parser.py',529),
  ('value -> number','value',1,'p_value','Parser.py',539),
  ('value -> VAR','value',1,'p_value','Parser.py',540),
  ('value -> get_array_element','value',1,'p_value','Parser.py',541),
  ('value -> string_value','value',1,'p_value','Parser.py',542),
  ('value -> bool_value','value',1,'p_value','Parser.py',543),
  ('value -> math_operation','value',1,'p_value','Parser.py',544),
  ('increment -> VAR PLUS_PLUS SEMICOLON','increment',3,'p_increment','Parser.py',551),
  ('decrement -> VAR MINUS_MINUS SEMICOLON','decrement',3,'p_decrement','Parser.py',558),
  ('math_operation -> VAR operator VAR','math_operation',3,'p_math_operation','Parser.py',564),
  ('math_operation -> VAR operator number','math_operation',3,'p_math_operation','Parser.py',565),
  ('math_operation -> number operator number','math_operation',3,'p_math_operation','Parser.py',566),
  ('operation -> increment','operation',1,'p_operation','Parser.py',573),
  ('operation -> decrement','operation',1,'p_operation','Parser.py',574),
  ('get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',580),
  ('get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',581),
  ('assignment -> VAR EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',588),
  ('assignment -> VAR EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',589),
  ('assignment -> VAR EQUAL function_call','assignment',3,'p_assignment','Parser.py',590),
  ('assignment -> get_array_element EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',591),
  ('assignment -> get_array_element EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',592),
  ('var_declaration -> type VAR SEMICOLON','var_declaration',3,'p_var_declaration','Parser.py',602),
  ('var_declaration -> array_declaration','var_declaration',1,'p_var_declaration','Parser.py',603),
  ('var_declaration -> type VAR EQUAL value SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',604),
  ('var_declaration -> type VAR EQUAL VAR SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',605),
  ('var_declaration -> type VAR EQUAL function_call','var_declaration',4,'p_var_declaration','Parser.py',606),
  ('array_declaration -> type get_array_element SEMICOLON','array_declaration',3,'p_array_declaration','Parser.py',620),
  ('out -> OUT VAR','out',2,'p_out','Parser.py',628),
  ('out -> OUT VAR out','out',3,'p_out','Parser.py',629),
  ('out -> OUT TEXT','out',2,'p_out','Parser.py',630),
  ('out -> OUT TEXT out','out',3,'p_out','Parser.py',631),
  ('out -> OUT ENDL','out',2,'p_out','Parser.py',632),
  ('out -> OUT ENDL out','out',3,'p_out','Parser.py',633),
  ('in -> IN VAR','in',2,'p_in','Parser.py',649),
  ('in -> IN VAR in','in',3,'p_in','Parser.py',650),
  ('print -> COUT out SEMICOLON','print',3,'p_print','Parser.py',663),
  ('input -> CIN in SEMICOLON','input',3,'p_input','Parser.py',670),
  ('returning -> RETURN value SEMICOLON','returning',3,'p_returning','Parser.py',677),
  ('comment -> COMMENT','comment',1,'p_comment','Parser.py',691),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',697),
  ('change_tab_number -> <empty>','change_tab_number',0,'p_change_tab_number','Parser.py',707),
  ('change_inside_class -> <empty>','change_inside_class',0,'p_change_inside_class','Parser.py',713),
]
