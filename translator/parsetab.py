
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL BREAK CHAR CIN CLASS COLON COMMA COMMENT COUT DIVIDE DOUBLE ELSE ENDL EQUAL EQUAL_EQUAL FALSE FLOAT FLOAT_NUMBER FOR GREATER GREATER_EQUAL HASH ID IF IN INCLUDE INT INT_NUMBER LEFT_BR LEFT_BR_CURLY LEFT_BR_SQUARED LESS LESS_EQUAL LIBRARY LONG MINUS MINUS_MINUS MULTIPLY NAMESPACE NOT_EQUAL OR OUT PLUS PLUS_PLUS PRIVATE PROTECTED PUBLIC RETURN RIGHT_BR RIGHT_BR_CURLY RIGHT_BR_SQUARED SEMICOLON SHORT SIGN STD STRING TEXT TRUE USING VAR VOID WHILE\n    start_symbol : program\n    \n    program : program_components\n            | empty\n    \n    program_components : program_component\n        | program_component program_components\n        | using_namespace_std program_components\n        | empty\n    \n    program_component : function_definition\n        | class_definition\n        | including\n        | var_declaration\n        | array_declaration\n        | empty\n    \n    using_namespace_std : USING NAMESPACE STD SEMICOLON\n    \n    including : HASH INCLUDE LIBRARY\n    \n    function_definition : type_function_definition\n        | void_function_definition\n    \n    type_function_definition : type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY\n    \n    void_function_definition : VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    function_var_declaration : type VAR\n        | type VAR COMMA function_var_declaration\n        | empty\n    \n    class_definition : CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON\n    \n    protection_level : PUBLIC COLON\n        | PRIVATE COLON\n        | PROTECTED COLON\n        | empty\n    \n    class_declaration : var_declaration\n        | function_definition\n    \n    class_declarations : class_declaration\n        | class_declaration class_declarations\n        | empty\n    \n    instructions : instruction\n        | instruction instructions\n    \n    instruction : loop\n        | if_statement\n        | assignment\n        | operation\n        | empty\n        | var_declaration\n        | print\n        | input\n    \n    while_loop : WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    for_loop_statement : FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n    \n    for_loop : for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    for_loop : for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY\n    \n    loop : while_loop\n        | for_loop\n    \n    if_statement : IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    comparisons : comparison\n        | comparison conjunction comparisons\n    \n    comparator : LESS\n        | LESS_EQUAL\n        | GREATER\n        | GREATER_EQUAL\n        | EQUAL_EQUAL\n        | NOT_EQUAL\n    \n    operator : PLUS\n        | MINUS\n        | MULTIPLY\n        | DIVIDE\n    \n    type : INT\n        | CHAR\n        | STRING\n        | BOOL\n        | FLOAT\n        | LONG\n        | SHORT\n        | DOUBLE\n    \n    conjunction : AND\n        | OR\n    \n    string_value : TEXT\n        | SIGN\n    \n    number : INT_NUMBER\n        | FLOAT_NUMBER\n    \n    value : number\n        | VAR\n        | get_array_element\n        | string_value\n    \n    increment : VAR PLUS_PLUS SEMICOLON\n    \n    decrement : VAR MINUS_MINUS SEMICOLON\n    \n    get_array_element : VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED\n    \n    operation : increment\n        | decrement\n        | value operator value SEMICOLON\n    \n    assignment : VAR EQUAL value SEMICOLON\n               | VAR EQUAL VAR SEMICOLON\n               | get_array_element EQUAL value SEMICOLON\n               | get_array_element EQUAL VAR SEMICOLON\n    \n    var_declaration : type VAR SEMICOLON\n        | array_declaration\n        | type VAR EQUAL value SEMICOLON\n        | type VAR EQUAL VAR SEMICOLON\n    \n    array_declaration : type get_array_element SEMICOLON\n    \n    out : OUT VAR\n        | OUT VAR out\n        | OUT TEXT\n        | OUT TEXT out\n        | OUT ENDL\n        | OUT ENDL out\n    \n    in : IN VAR\n       | IN VAR in\n    \n    print : COUT out SEMICOLON\n    \n    input : CIN in SEMICOLON\n    \n    comparison : value comparator value\n    \n    returning : RETURN value SEMICOLON\n    empty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,13,14,27,28,29,38,39,43,45,74,75,85,133,138,],[-110,0,-1,-2,-3,-4,-110,-8,-9,-10,-11,-12,-16,-17,-5,-7,-6,-15,-93,-97,-14,-96,-95,-23,-19,-18,]),'USING':([0,4,5,6,7,8,9,10,11,13,14,28,38,39,43,45,74,75,85,133,138,],[12,-13,12,12,-8,-9,-10,-11,-12,-16,-17,-13,-15,-93,-97,-14,-96,-95,-23,-19,-18,]),'CLASS':([0,4,5,6,7,8,9,10,11,13,14,28,38,39,43,45,74,75,85,133,138,],[15,-13,15,15,-8,-9,-10,-11,-12,-16,-17,-13,-15,-93,-97,-14,-96,-95,-23,-19,-18,]),'HASH':([0,4,5,6,7,8,9,10,11,13,14,28,38,39,43,45,74,75,85,133,138,],[16,-13,16,16,-8,-9,-10,-11,-12,-16,-17,-13,-15,-93,-97,-14,-96,-95,-23,-19,-18,]),'VOID':([0,4,5,6,7,8,9,10,11,13,14,28,37,38,39,43,45,46,50,66,68,69,70,71,72,73,74,75,85,133,138,],[18,-13,18,18,-8,-9,-10,-11,-12,-16,-17,-13,-110,-15,-93,-97,-14,18,-27,18,-28,-29,-94,-24,-25,-26,-96,-95,-23,-19,-18,]),'INT':([0,4,5,6,7,8,9,10,11,13,14,28,37,38,39,41,43,44,45,46,50,66,68,69,70,71,72,73,74,75,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,104,105,131,132,133,136,137,138,147,151,156,157,170,171,172,178,181,184,189,191,192,],[19,-13,19,19,-8,-9,-10,-11,-12,-16,-17,-13,-110,-15,-93,19,-97,19,-14,19,-27,19,-28,-29,-94,-24,-25,-26,-96,-95,19,19,19,-23,19,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,19,155,-19,-83,-84,-18,-106,-107,-90,-89,-88,-91,-92,-48,19,19,-49,-52,-43,]),'CHAR':([0,4,5,6,7,8,9,10,11,13,14,28,37,38,39,41,43,44,45,46,50,66,68,69,70,71,72,73,74,75,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,156,157,170,171,172,178,181,184,189,191,192,],[20,-13,20,20,-8,-9,-10,-11,-12,-16,-17,-13,-110,-15,-93,20,-97,20,-14,20,-27,20,-28,-29,-94,-24,-25,-26,-96,-95,20,20,20,-23,20,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,20,-19,-83,-84,-18,-106,-107,-90,-89,-88,-91,-92,-48,20,20,-49,-52,-43,]),'STRING':([0,4,5,6,7,8,9,10,11,13,14,28,37,38,39,41,43,44,45,46,50,66,68,69,70,71,72,73,74,75,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,156,157,170,171,172,178,181,184,189,191,192,],[21,-13,21,21,-8,-9,-10,-11,-12,-16,-17,-13,-110,-15,-93,21,-97,21,-14,21,-27,21,-28,-29,-94,-24,-25,-26,-96,-95,21,21,21,-23,21,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,21,-19,-83,-84,-18,-106,-107,-90,-89,-88,-91,-92,-48,21,21,-49,-52,-43,]),'BOOL':([0,4,5,6,7,8,9,10,11,13,14,28,37,38,39,41,43,44,45,46,50,66,68,69,70,71,72,73,74,75,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,156,157,170,171,172,178,181,184,189,191,192,],[22,-13,22,22,-8,-9,-10,-11,-12,-16,-17,-13,-110,-15,-93,22,-97,22,-14,22,-27,22,-28,-29,-94,-24,-25,-26,-96,-95,22,22,22,-23,22,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,22,-19,-83,-84,-18,-106,-107,-90,-89,-88,-91,-92,-48,22,22,-49,-52,-43,]),'FLOAT':([0,4,5,6,7,8,9,10,11,13,14,28,37,38,39,41,43,44,45,46,50,66,68,69,70,71,72,73,74,75,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,156,157,170,171,172,178,181,184,189,191,192,],[23,-13,23,23,-8,-9,-10,-11,-12,-16,-17,-13,-110,-15,-93,23,-97,23,-14,23,-27,23,-28,-29,-94,-24,-25,-26,-96,-95,23,23,23,-23,23,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,23,-19,-83,-84,-18,-106,-107,-90,-89,-88,-91,-92,-48,23,23,-49,-52,-43,]),'LONG':([0,4,5,6,7,8,9,10,11,13,14,28,37,38,39,41,43,44,45,46,50,66,68,69,70,71,72,73,74,75,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,156,157,170,171,172,178,181,184,189,191,192,],[24,-13,24,24,-8,-9,-10,-11,-12,-16,-17,-13,-110,-15,-93,24,-97,24,-14,24,-27,24,-28,-29,-94,-24,-25,-26,-96,-95,24,24,24,-23,24,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,24,-19,-83,-84,-18,-106,-107,-90,-89,-88,-91,-92,-48,24,24,-49,-52,-43,]),'SHORT':([0,4,5,6,7,8,9,10,11,13,14,28,37,38,39,41,43,44,45,46,50,66,68,69,70,71,72,73,74,75,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,156,157,170,171,172,178,181,184,189,191,192,],[25,-13,25,25,-8,-9,-10,-11,-12,-16,-17,-13,-110,-15,-93,25,-97,25,-14,25,-27,25,-28,-29,-94,-24,-25,-26,-96,-95,25,25,25,-23,25,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,25,-19,-83,-84,-18,-106,-107,-90,-89,-88,-91,-92,-48,25,25,-49,-52,-43,]),'DOUBLE':([0,4,5,6,7,8,9,10,11,13,14,28,37,38,39,41,43,44,45,46,50,66,68,69,70,71,72,73,74,75,82,83,84,85,90,91,92,93,94,95,96,97,98,99,100,104,105,131,133,136,137,138,147,151,156,157,170,171,172,178,181,184,189,191,192,],[26,-13,26,26,-8,-9,-10,-11,-12,-16,-17,-13,-110,-15,-93,26,-97,26,-14,26,-27,26,-28,-29,-94,-24,-25,-26,-96,-95,26,26,26,-23,26,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,26,-19,-83,-84,-18,-106,-107,-90,-89,-88,-91,-92,-48,26,26,-49,-52,-43,]),'NAMESPACE':([12,],[30,]),'RIGHT_BR_CURLY':([13,14,37,39,43,46,50,65,66,67,68,69,70,71,72,73,74,75,81,84,90,91,92,93,94,95,96,97,98,99,100,104,105,111,116,118,131,133,136,137,138,147,151,154,156,157,158,170,171,172,178,181,184,185,187,188,189,191,192,],[-16,-17,-110,-93,-97,-110,-27,80,-30,-32,-28,-29,-94,-24,-25,-26,-96,-95,-31,-110,-33,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,133,138,-34,-110,-19,-83,-84,-18,-106,-107,178,-90,-89,-109,-88,-91,-92,-48,-110,-110,189,191,192,-49,-52,-43,]),'VAR':([15,17,18,19,20,21,22,23,24,25,26,39,40,43,60,70,74,75,83,84,87,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,127,129,130,131,136,137,147,151,155,156,157,160,161,162,163,164,165,166,167,168,169,170,171,172,178,181,184,189,191,192,193,203,204,205,206,],[31,33,35,-65,-66,-67,-68,-69,-70,-71,-72,-93,51,-97,76,-94,-96,-95,88,88,112,88,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,134,140,140,140,-61,-62,-63,-64,146,148,152,140,88,-83,-84,-106,-107,180,-90,-89,140,-73,-74,140,-55,-56,-57,-58,-59,-60,-88,-91,-92,-48,88,88,-49,-52,-43,194,207,208,209,210,]),'INCLUDE':([16,],[32,]),'STD':([30,],[36,]),'LEFT_BR_CURLY':([31,77,79,109,159,177,215,216,217,218,],[37,83,84,131,181,184,-44,-45,-46,-47,]),'LIBRARY':([32,],[38,]),'SEMICOLON':([33,34,36,51,52,53,54,55,56,57,58,59,78,80,112,114,115,126,128,134,135,139,140,144,145,146,148,149,150,152,173,174,175,176,179,190,199,200,201,202,],[39,43,45,74,75,-79,-81,-82,-77,-78,-75,-76,-85,85,39,136,137,147,151,156,157,158,-80,170,171,172,-98,-100,-102,-104,-99,-101,-103,-105,185,193,203,204,205,206,]),'EQUAL':([33,78,88,103,112,180,],[40,-85,113,125,40,186,]),'LEFT_BR':([33,35,101,108,110,],[41,44,119,130,132,]),'LEFT_BR_SQUARED':([33,51,88,112,134,140,146,],[42,42,42,42,42,42,42,]),'PUBLIC':([37,],[47,]),'PRIVATE':([37,],[48,]),'PROTECTED':([37,],[49,]),'IF':([39,43,70,74,75,83,84,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,156,157,170,171,172,178,181,184,189,191,192,],[-93,-97,-94,-96,-95,101,101,101,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,101,-83,-84,-106,-107,-90,-89,-88,-91,-92,-48,101,101,-49,-52,-43,]),'COUT':([39,43,70,74,75,83,84,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,156,157,170,171,172,178,181,184,189,191,192,],[-93,-97,-94,-96,-95,106,106,106,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,106,-83,-84,-106,-107,-90,-89,-88,-91,-92,-48,106,106,-49,-52,-43,]),'CIN':([39,43,70,74,75,83,84,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,156,157,170,171,172,178,181,184,189,191,192,],[-93,-97,-94,-96,-95,107,107,107,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,107,-83,-84,-106,-107,-90,-89,-88,-91,-92,-48,107,107,-49,-52,-43,]),'WHILE':([39,43,70,74,75,83,84,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,156,157,170,171,172,178,181,184,189,191,192,],[-93,-97,-94,-96,-95,108,108,108,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,108,-83,-84,-106,-107,-90,-89,-88,-91,-92,-48,108,108,-49,-52,-43,]),'FOR':([39,43,70,74,75,83,84,90,91,92,93,94,95,96,97,98,99,100,104,105,131,136,137,147,151,156,157,170,171,172,178,181,184,189,191,192,],[-93,-97,-94,-96,-95,110,110,110,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,110,-83,-84,-106,-107,-90,-89,-88,-91,-92,-48,110,110,-49,-52,-43,]),'INT_NUMBER':([39,40,42,43,70,74,75,83,84,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,130,131,136,137,147,151,156,157,160,161,162,163,164,165,166,167,168,169,170,171,172,178,181,184,186,189,191,192,195,196,197,198,],[-93,56,63,-97,-94,-96,-95,56,56,56,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,56,56,56,56,-61,-62,-63,-64,56,56,56,-83,-84,-106,-107,-90,-89,56,-73,-74,56,-55,-56,-57,-58,-59,-60,-88,-91,-92,-48,56,56,190,-49,-52,-43,199,200,201,202,]),'FLOAT_NUMBER':([39,40,43,70,74,75,83,84,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,130,131,136,137,147,151,156,157,160,161,162,163,164,165,166,167,168,169,170,171,172,178,181,184,189,191,192,],[-93,57,-97,-94,-96,-95,57,57,57,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,57,57,57,57,-61,-62,-63,-64,57,57,57,-83,-84,-106,-107,-90,-89,57,-73,-74,57,-55,-56,-57,-58,-59,-60,-88,-91,-92,-48,57,57,-49,-52,-43,]),'TEXT':([39,40,43,70,74,75,83,84,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,127,130,131,136,137,147,151,156,157,160,161,162,163,164,165,166,167,168,169,170,171,172,178,181,184,189,191,192,],[-93,58,-97,-94,-96,-95,58,58,58,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,58,58,58,58,-61,-62,-63,-64,58,149,58,58,-83,-84,-106,-107,-90,-89,58,-73,-74,58,-55,-56,-57,-58,-59,-60,-88,-91,-92,-48,58,58,-49,-52,-43,]),'SIGN':([39,40,43,70,74,75,83,84,90,91,92,93,94,95,96,97,98,99,100,104,105,113,117,119,120,121,122,123,124,125,130,131,136,137,147,151,156,157,160,161,162,163,164,165,166,167,168,169,170,171,172,178,181,184,189,191,192,],[-93,59,-97,-94,-96,-95,59,59,59,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,59,59,59,59,-61,-62,-63,-64,59,59,59,-83,-84,-106,-107,-90,-89,59,-73,-74,59,-55,-56,-57,-58,-59,-60,-88,-91,-92,-48,59,59,-49,-52,-43,]),'RETURN':([39,43,70,74,75,83,89,90,91,92,93,94,95,96,97,98,99,100,104,105,118,136,137,147,151,156,157,170,171,172,178,189,191,192,],[-93,-97,-94,-96,-95,-110,117,-33,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,-34,-83,-84,-106,-107,-90,-89,-88,-91,-92,-48,-49,-52,-43,]),'BREAK':([39,43,70,74,75,90,91,92,93,94,95,96,97,98,99,100,104,105,118,131,136,137,147,151,154,156,157,170,171,172,178,189,191,192,],[-93,-97,-94,-96,-95,-33,-35,-36,-37,-38,-39,-40,-41,-42,-50,-51,-86,-87,-34,-110,-83,-84,-106,-107,179,-90,-89,-88,-91,-92,-48,-49,-52,-43,]),'RIGHT_BR':([41,44,53,54,55,56,57,58,59,61,62,64,76,78,82,86,140,141,142,153,182,183,211,212,213,214,],[-110,-110,-79,-81,-82,-77,-78,-75,-76,77,-22,79,-20,-85,-110,-21,-80,159,-53,177,-54,-108,215,216,217,218,]),'COLON':([47,48,49,],[71,72,73,]),'PLUS':([53,55,56,57,58,59,78,88,102,103,],[-79,-82,-77,-78,-75,-76,-85,-80,121,-81,]),'MINUS':([53,55,56,57,58,59,78,88,102,103,],[-79,-82,-77,-78,-75,-76,-85,-80,122,-81,]),'MULTIPLY':([53,55,56,57,58,59,78,88,102,103,],[-79,-82,-77,-78,-75,-76,-85,-80,123,-81,]),'DIVIDE':([53,55,56,57,58,59,78,88,102,103,],[-79,-82,-77,-78,-75,-76,-85,-80,124,-81,]),'LESS':([53,54,55,56,57,58,59,78,140,143,194,],[-79,-81,-82,-77,-78,-75,-76,-85,-80,164,195,]),'LESS_EQUAL':([53,54,55,56,57,58,59,78,140,143,194,],[-79,-81,-82,-77,-78,-75,-76,-85,-80,165,196,]),'GREATER':([53,54,55,56,57,58,59,78,140,143,194,],[-79,-81,-82,-77,-78,-75,-76,-85,-80,166,197,]),'GREATER_EQUAL':([53,54,55,56,57,58,59,78,140,143,194,],[-79,-81,-82,-77,-78,-75,-76,-85,-80,167,198,]),'EQUAL_EQUAL':([53,54,55,56,57,58,59,78,140,143,],[-79,-81,-82,-77,-78,-75,-76,-85,-80,168,]),'NOT_EQUAL':([53,54,55,56,57,58,59,78,140,143,],[-79,-81,-82,-77,-78,-75,-76,-85,-80,169,]),'AND':([53,54,55,56,57,58,59,78,140,142,183,],[-79,-81,-82,-77,-78,-75,-76,-85,-80,161,-108,]),'OR':([53,54,55,56,57,58,59,78,140,142,183,],[-79,-81,-82,-77,-78,-75,-76,-85,-80,162,-108,]),'RIGHT_BR_SQUARED':([63,],[78,]),'COMMA':([76,],[82,]),'PLUS_PLUS':([88,207,208,],[114,211,212,]),'MINUS_MINUS':([88,209,210,],[115,213,214,]),'OUT':([106,148,149,150,],[127,127,127,127,]),'IN':([107,152,],[129,129,]),'ENDL':([127,],[150,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start_symbol':([0,],[1,]),'program':([0,],[2,]),'program_components':([0,5,6,],[3,27,29,]),'empty':([0,5,6,37,41,44,46,66,82,83,84,90,131,181,184,],[4,28,28,50,62,62,67,67,62,95,95,95,95,95,95,]),'program_component':([0,5,6,],[5,5,5,]),'using_namespace_std':([0,5,6,],[6,6,6,]),'function_definition':([0,5,6,46,66,],[7,7,7,69,69,]),'class_definition':([0,5,6,],[8,8,8,]),'including':([0,5,6,],[9,9,9,]),'var_declaration':([0,5,6,46,66,83,84,90,131,181,184,],[10,10,10,68,68,96,96,96,96,96,96,]),'array_declaration':([0,5,6,46,66,83,84,90,131,181,184,],[11,11,11,70,70,70,70,70,70,70,70,]),'type_function_definition':([0,5,6,46,66,],[13,13,13,13,13,]),'void_function_definition':([0,5,6,46,66,],[14,14,14,14,14,]),'type':([0,5,6,41,44,46,66,82,83,84,90,131,181,184,],[17,17,17,60,60,17,17,60,87,87,87,87,87,87,]),'get_array_element':([17,40,83,84,87,90,113,117,119,120,125,130,131,160,163,181,184,],[34,54,103,103,34,103,54,54,54,54,54,54,103,54,54,103,103,]),'protection_level':([37,],[46,]),'value':([40,83,84,90,113,117,119,120,125,130,131,160,163,181,184,],[52,102,102,102,135,139,143,144,145,143,102,143,183,102,102,]),'number':([40,83,84,90,113,117,119,120,125,130,131,160,163,181,184,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'string_value':([40,83,84,90,113,117,119,120,125,130,131,160,163,181,184,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'function_var_declaration':([41,44,82,],[61,64,86,]),'class_declarations':([46,66,],[65,81,]),'class_declaration':([46,66,],[66,66,]),'instructions':([83,84,90,131,181,184,],[89,111,118,154,187,188,]),'instruction':([83,84,90,131,181,184,],[90,90,90,90,90,90,]),'loop':([83,84,90,131,181,184,],[91,91,91,91,91,91,]),'if_statement':([83,84,90,131,181,184,],[92,92,92,92,92,92,]),'assignment':([83,84,90,131,181,184,],[93,93,93,93,93,93,]),'operation':([83,84,90,131,181,184,],[94,94,94,94,94,94,]),'print':([83,84,90,131,181,184,],[97,97,97,97,97,97,]),'input':([83,84,90,131,181,184,],[98,98,98,98,98,98,]),'while_loop':([83,84,90,131,181,184,],[99,99,99,99,99,99,]),'for_loop':([83,84,90,131,181,184,],[100,100,100,100,100,100,]),'increment':([83,84,90,131,181,184,],[104,104,104,104,104,104,]),'decrement':([83,84,90,131,181,184,],[105,105,105,105,105,105,]),'for_loop_statement':([83,84,90,131,181,184,],[109,109,109,109,109,109,]),'returning':([89,],[116,]),'operator':([102,],[120,]),'out':([106,148,149,150,],[126,173,174,175,]),'in':([107,152,],[128,176,]),'comparisons':([119,130,160,],[141,153,182,]),'comparison':([119,130,160,],[142,142,142,]),'conjunction':([142,],[160,]),'comparator':([143,],[163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start_symbol","S'",1,None,None,None),
  ('start_symbol -> program','start_symbol',1,'p_start_symbol','Parser.py',160),
  ('program -> program_components','program',1,'p_program','Parser.py',166),
  ('program -> empty','program',1,'p_program','Parser.py',167),
  ('program_components -> program_component','program_components',1,'p_program_components','Parser.py',173),
  ('program_components -> program_component program_components','program_components',2,'p_program_components','Parser.py',174),
  ('program_components -> using_namespace_std program_components','program_components',2,'p_program_components','Parser.py',175),
  ('program_components -> empty','program_components',1,'p_program_components','Parser.py',176),
  ('program_component -> function_definition','program_component',1,'p_program_component','Parser.py',182),
  ('program_component -> class_definition','program_component',1,'p_program_component','Parser.py',183),
  ('program_component -> including','program_component',1,'p_program_component','Parser.py',184),
  ('program_component -> var_declaration','program_component',1,'p_program_component','Parser.py',185),
  ('program_component -> array_declaration','program_component',1,'p_program_component','Parser.py',186),
  ('program_component -> empty','program_component',1,'p_program_component','Parser.py',187),
  ('using_namespace_std -> USING NAMESPACE STD SEMICOLON','using_namespace_std',4,'p_using_namespace_std','Parser.py',194),
  ('including -> HASH INCLUDE LIBRARY','including',3,'p_including','Parser.py',200),
  ('function_definition -> type_function_definition','function_definition',1,'p_function_definition','Parser.py',207),
  ('function_definition -> void_function_definition','function_definition',1,'p_function_definition','Parser.py',208),
  ('type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions returning RIGHT_BR_CURLY','type_function_definition',9,'p_type_function_definition','Parser.py',214),
  ('void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY','void_function_definition',8,'p_void_function_definition','Parser.py',220),
  ('function_var_declaration -> type VAR','function_var_declaration',2,'p_function_var_declaration','Parser.py',226),
  ('function_var_declaration -> type VAR COMMA function_var_declaration','function_var_declaration',4,'p_function_var_declaration','Parser.py',227),
  ('function_var_declaration -> empty','function_var_declaration',1,'p_function_var_declaration','Parser.py',228),
  ('class_definition -> CLASS VAR LEFT_BR_CURLY protection_level class_declarations RIGHT_BR_CURLY SEMICOLON','class_definition',7,'p_class_definition','Parser.py',235),
  ('protection_level -> PUBLIC COLON','protection_level',2,'p_protection_level','Parser.py',241),
  ('protection_level -> PRIVATE COLON','protection_level',2,'p_protection_level','Parser.py',242),
  ('protection_level -> PROTECTED COLON','protection_level',2,'p_protection_level','Parser.py',243),
  ('protection_level -> empty','protection_level',1,'p_protection_level','Parser.py',244),
  ('class_declaration -> var_declaration','class_declaration',1,'p_class_declaration','Parser.py',250),
  ('class_declaration -> function_definition','class_declaration',1,'p_class_declaration','Parser.py',251),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','Parser.py',257),
  ('class_declarations -> class_declaration class_declarations','class_declarations',2,'p_class_declarations','Parser.py',258),
  ('class_declarations -> empty','class_declarations',1,'p_class_declarations','Parser.py',259),
  ('instructions -> instruction','instructions',1,'p_instructions','Parser.py',266),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','Parser.py',267),
  ('instruction -> loop','instruction',1,'p_instruction','Parser.py',273),
  ('instruction -> if_statement','instruction',1,'p_instruction','Parser.py',274),
  ('instruction -> assignment','instruction',1,'p_instruction','Parser.py',275),
  ('instruction -> operation','instruction',1,'p_instruction','Parser.py',276),
  ('instruction -> empty','instruction',1,'p_instruction','Parser.py',277),
  ('instruction -> var_declaration','instruction',1,'p_instruction','Parser.py',278),
  ('instruction -> print','instruction',1,'p_instruction','Parser.py',279),
  ('instruction -> input','instruction',1,'p_instruction','Parser.py',280),
  ('while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY','while_loop',7,'p_while_loop','Parser.py',286),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',292),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',293),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',294),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',295),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY instructions RIGHT_BR_CURLY','for_loop',4,'p_for_loop','Parser.py',301),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY instructions BREAK SEMICOLON RIGHT_BR_CURLY','for_loop',6,'p_for_loop','Parser.py',302),
  ('loop -> while_loop','loop',1,'p_loop','Parser.py',308),
  ('loop -> for_loop','loop',1,'p_loop','Parser.py',309),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY instructions RIGHT_BR_CURLY','if_statement',7,'p_if_statement','Parser.py',321),
  ('comparisons -> comparison','comparisons',1,'p_comparisons','Parser.py',327),
  ('comparisons -> comparison conjunction comparisons','comparisons',3,'p_comparisons','Parser.py',328),
  ('comparator -> LESS','comparator',1,'p_comparator','Parser.py',339),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','Parser.py',340),
  ('comparator -> GREATER','comparator',1,'p_comparator','Parser.py',341),
  ('comparator -> GREATER_EQUAL','comparator',1,'p_comparator','Parser.py',342),
  ('comparator -> EQUAL_EQUAL','comparator',1,'p_comparator','Parser.py',343),
  ('comparator -> NOT_EQUAL','comparator',1,'p_comparator','Parser.py',344),
  ('operator -> PLUS','operator',1,'p_operator','Parser.py',350),
  ('operator -> MINUS','operator',1,'p_operator','Parser.py',351),
  ('operator -> MULTIPLY','operator',1,'p_operator','Parser.py',352),
  ('operator -> DIVIDE','operator',1,'p_operator','Parser.py',353),
  ('type -> INT','type',1,'p_type','Parser.py',359),
  ('type -> CHAR','type',1,'p_type','Parser.py',360),
  ('type -> STRING','type',1,'p_type','Parser.py',361),
  ('type -> BOOL','type',1,'p_type','Parser.py',362),
  ('type -> FLOAT','type',1,'p_type','Parser.py',363),
  ('type -> LONG','type',1,'p_type','Parser.py',364),
  ('type -> SHORT','type',1,'p_type','Parser.py',365),
  ('type -> DOUBLE','type',1,'p_type','Parser.py',366),
  ('conjunction -> AND','conjunction',1,'p_conjunction','Parser.py',372),
  ('conjunction -> OR','conjunction',1,'p_conjunction','Parser.py',373),
  ('string_value -> TEXT','string_value',1,'p_string_value','Parser.py',379),
  ('string_value -> SIGN','string_value',1,'p_string_value','Parser.py',380),
  ('number -> INT_NUMBER','number',1,'p_number','Parser.py',386),
  ('number -> FLOAT_NUMBER','number',1,'p_number','Parser.py',387),
  ('value -> number','value',1,'p_value','Parser.py',400),
  ('value -> VAR','value',1,'p_value','Parser.py',401),
  ('value -> get_array_element','value',1,'p_value','Parser.py',402),
  ('value -> string_value','value',1,'p_value','Parser.py',403),
  ('increment -> VAR PLUS_PLUS SEMICOLON','increment',3,'p_increment','Parser.py',409),
  ('decrement -> VAR MINUS_MINUS SEMICOLON','decrement',3,'p_decrement','Parser.py',415),
  ('get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',421),
  ('operation -> increment','operation',1,'p_operation','Parser.py',427),
  ('operation -> decrement','operation',1,'p_operation','Parser.py',428),
  ('operation -> value operator value SEMICOLON','operation',4,'p_operation','Parser.py',429),
  ('assignment -> VAR EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',435),
  ('assignment -> VAR EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',436),
  ('assignment -> get_array_element EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',437),
  ('assignment -> get_array_element EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',438),
  ('var_declaration -> type VAR SEMICOLON','var_declaration',3,'p_var_declaration','Parser.py',444),
  ('var_declaration -> array_declaration','var_declaration',1,'p_var_declaration','Parser.py',445),
  ('var_declaration -> type VAR EQUAL value SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',446),
  ('var_declaration -> type VAR EQUAL VAR SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',447),
  ('array_declaration -> type get_array_element SEMICOLON','array_declaration',3,'p_array_declaration','Parser.py',453),
  ('out -> OUT VAR','out',2,'p_out','Parser.py',459),
  ('out -> OUT VAR out','out',3,'p_out','Parser.py',460),
  ('out -> OUT TEXT','out',2,'p_out','Parser.py',461),
  ('out -> OUT TEXT out','out',3,'p_out','Parser.py',462),
  ('out -> OUT ENDL','out',2,'p_out','Parser.py',463),
  ('out -> OUT ENDL out','out',3,'p_out','Parser.py',464),
  ('in -> IN VAR','in',2,'p_in','Parser.py',470),
  ('in -> IN VAR in','in',3,'p_in','Parser.py',471),
  ('print -> COUT out SEMICOLON','print',3,'p_print','Parser.py',477),
  ('input -> CIN in SEMICOLON','input',3,'p_input','Parser.py',483),
  ('comparison -> value comparator value','comparison',3,'p_comparison','Parser.py',489),
  ('returning -> RETURN value SEMICOLON','returning',3,'p_returning','Parser.py',495),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',500),
]
