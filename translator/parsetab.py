
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR CIN CLASS COMMA COMMENT COUT DIVIDE DOUBLE ELSE ENDL EQUAL EQUAL_EQUAL FALSE FLOAT FLOAT_NUMBER FOR GREATER GREATER_EQUAL HASH ID IF IN INCLUDE INT INT_NUMBER LEFT_BR LEFT_BR_CURLY LEFT_BR_SQUARED LESS LESS_EQUAL LIBRARY LONG MINUS MINUS_MINUS MULTIPLY NAMESPACE NOT_EQUAL OR OUT PLUS PLUS_PLUS RETURN RIGHT_BR RIGHT_BR_CURLY RIGHT_BR_SQUARED SEMICOLON SHORT SIGN STD STRING TEXT TRUE USING VAR VOID WHILE\n    start_symbol : program\n    \n    program : program_components\n            | empty\n    \n    program_components : program_component\n        | program_component program_components\n    \n    program_component : function_definition\n        | class_definition\n        | including\n        | using_namespace_std\n        | var_declaration\n        | array_declaration\n        | comment\n        | empty\n    \n    using_namespace_std : USING NAMESPACE STD SEMICOLON\n    \n    including : HASH INCLUDE LIBRARY\n    \n    function_definition : type_function_definition\n        | void_function_definition\n    \n    type_function_definition : type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY\n    \n    void_function_definition : VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    function_var_declaration : var_declaration_no_semicolon\n        | var_declaration_no_semicolon COMMA function_var_declaration\n        | empty\n    \n    var_declaration_no_semicolon : type VAR\n    \n    class_definition : CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON\n    \n    class_declaration : var_declaration\n        | function_definition\n    \n    class_declarations : class_declaration\n        | class_declaration class_declarations\n        | empty\n    \n    instructions : instruction\n        | instruction instructions\n    \n    instruction : loop\n        | if_statement\n        | assignment\n        | operation\n        | empty\n        | var_declaration\n        | print\n        | input\n        | comment\n    \n    while_loop : WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n        | WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    for_loop_statement : FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n    \n    for_loop : for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    loop : while_loop\n        | for_loop\n    \n    else_statement : ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    if_statement : IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n                 | IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY  else_statement\n    \n    comparisons : comparison\n        | comparison conjunction comparisons\n    \n    comparison : value comparator value\n    \n    comparator : LESS\n        | LESS_EQUAL\n        | GREATER\n        | GREATER_EQUAL\n        | EQUAL_EQUAL\n        | NOT_EQUAL\n    \n    operator : PLUS\n        | MINUS\n        | MULTIPLY\n        | DIVIDE\n    \n    type : INT\n        | CHAR\n        | STRING\n        | BOOL\n        | FLOAT\n        | LONG\n        | SHORT\n        | DOUBLE\n    \n    conjunction : AND\n        | OR\n    \n    string_value : TEXT\n        | SIGN\n    \n    number : INT_NUMBER\n        | FLOAT_NUMBER\n    \n    bool_value : TRUE\n        | FALSE\n    \n    value : number\n        | VAR\n        | get_array_element\n        | string_value\n        | bool_value\n    \n    increment : VAR PLUS_PLUS SEMICOLON\n    \n    decrement : VAR MINUS_MINUS SEMICOLON\n    \n    get_array_element : VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED\n    \n    operation : increment\n        | decrement\n        | value operator value SEMICOLON\n    \n    assignment : VAR EQUAL value SEMICOLON\n               | VAR EQUAL VAR SEMICOLON\n               | get_array_element EQUAL value SEMICOLON\n               | get_array_element EQUAL VAR SEMICOLON\n    \n    var_declaration : type VAR SEMICOLON\n        | array_declaration\n        | type VAR EQUAL value SEMICOLON\n        | type VAR EQUAL VAR SEMICOLON\n    \n    array_declaration : type get_array_element SEMICOLON\n    \n    out : OUT VAR\n        | OUT VAR out\n        | OUT TEXT\n        | OUT TEXT out\n        | OUT ENDL\n        | OUT ENDL out\n    \n    in : IN VAR\n       | IN VAR in\n    \n    print : COUT out SEMICOLON\n    \n    input : CIN in SEMICOLON\n    \n    returning : RETURN value SEMICOLON\n    \n    comment : COMMENT\n    empty : change_tab_number : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,19,29,30,38,40,44,47,72,73,84,134,139,],[-114,0,-1,-2,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-5,-13,-15,-97,-101,-14,-100,-99,-24,-19,-18,]),'CLASS':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,72,73,84,134,139,],[15,-13,15,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-15,-97,-101,-14,-100,-99,-24,-19,-18,]),'HASH':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,72,73,84,134,139,],[16,-13,16,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-15,-97,-101,-14,-100,-99,-24,-19,-18,]),'USING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,72,73,84,134,139,],[17,-13,17,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-15,-97,-101,-14,-100,-99,-24,-19,-18,]),'COMMENT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,71,72,73,81,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,134,137,138,139,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[19,-13,19,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-15,-97,-101,-14,-98,-100,-99,-115,-115,-24,19,19,19,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,19,-94,-93,-92,-95,-96,-115,-115,-115,-47,19,19,19,-51,-41,-42,-52,19,-50,]),'VOID':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,44,46,47,67,69,70,71,72,73,84,134,139,],[20,-13,20,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-115,-15,-97,-101,20,-14,20,-25,-26,-98,-100,-99,-24,-19,-18,]),'INT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,67,69,70,71,72,73,76,81,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,133,134,137,138,139,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[21,-13,21,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-115,-15,-97,21,-101,21,21,-14,21,-25,-26,-98,-100,-99,21,-115,-115,-24,21,21,21,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,157,-19,-87,-88,-18,-110,-111,21,-94,-93,-92,-95,-96,-115,-115,-115,-47,21,21,21,-51,-41,-42,-52,21,-50,]),'CHAR':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,67,69,70,71,72,73,76,81,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,134,137,138,139,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[22,-13,22,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-115,-15,-97,22,-101,22,22,-14,22,-25,-26,-98,-100,-99,22,-115,-115,-24,22,22,22,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,22,-94,-93,-92,-95,-96,-115,-115,-115,-47,22,22,22,-51,-41,-42,-52,22,-50,]),'STRING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,67,69,70,71,72,73,76,81,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,134,137,138,139,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[23,-13,23,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-115,-15,-97,23,-101,23,23,-14,23,-25,-26,-98,-100,-99,23,-115,-115,-24,23,23,23,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,23,-94,-93,-92,-95,-96,-115,-115,-115,-47,23,23,23,-51,-41,-42,-52,23,-50,]),'BOOL':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,67,69,70,71,72,73,76,81,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,134,137,138,139,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[24,-13,24,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-115,-15,-97,24,-101,24,24,-14,24,-25,-26,-98,-100,-99,24,-115,-115,-24,24,24,24,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,24,-94,-93,-92,-95,-96,-115,-115,-115,-47,24,24,24,-51,-41,-42,-52,24,-50,]),'FLOAT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,67,69,70,71,72,73,76,81,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,134,137,138,139,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[25,-13,25,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-115,-15,-97,25,-101,25,25,-14,25,-25,-26,-98,-100,-99,25,-115,-115,-24,25,25,25,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,25,-94,-93,-92,-95,-96,-115,-115,-115,-47,25,25,25,-51,-41,-42,-52,25,-50,]),'LONG':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,67,69,70,71,72,73,76,81,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,134,137,138,139,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[26,-13,26,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-115,-15,-97,26,-101,26,26,-14,26,-25,-26,-98,-100,-99,26,-115,-115,-24,26,26,26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,26,-94,-93,-92,-95,-96,-115,-115,-115,-47,26,26,26,-51,-41,-42,-52,26,-50,]),'SHORT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,67,69,70,71,72,73,76,81,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,134,137,138,139,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[27,-13,27,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-115,-15,-97,27,-101,27,27,-14,27,-25,-26,-98,-100,-99,27,-115,-115,-24,27,27,27,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,27,-94,-93,-92,-95,-96,-115,-115,-115,-47,27,27,27,-51,-41,-42,-52,27,-50,]),'DOUBLE':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,67,69,70,71,72,73,76,81,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,134,137,138,139,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[28,-13,28,-6,-7,-8,-9,-10,-11,-12,-16,-17,-113,-13,-115,-15,-97,28,-101,28,28,-14,28,-25,-26,-98,-100,-99,28,-115,-115,-24,28,28,28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-19,-87,-88,-18,-110,-111,28,-94,-93,-92,-95,-96,-115,-115,-115,-47,28,28,28,-51,-41,-42,-52,28,-50,]),'RIGHT_BR_CURLY':([13,14,19,37,40,44,46,66,67,68,69,70,71,72,73,80,83,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,112,117,119,132,134,137,138,139,148,152,156,158,159,160,172,173,174,181,183,186,187,188,190,191,192,194,195,196,198,199,200,202,208,213,218,],[-16,-17,-113,-115,-97,-101,-114,79,-27,-29,-25,-26,-98,-100,-99,-28,-115,-114,-30,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,134,139,-31,-115,-19,-87,-88,-18,-110,-111,-114,-94,-93,-112,-92,-95,-96,188,-115,-115,-115,-47,-114,-114,-114,198,199,200,-51,-41,-42,-52,-114,218,-50,]),'VAR':([15,18,19,20,21,22,23,24,25,26,27,28,40,41,44,60,71,72,73,81,83,85,86,87,90,91,92,93,94,95,96,97,98,99,100,101,105,106,114,118,120,121,122,123,124,125,126,128,130,131,132,137,138,148,152,156,157,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,183,186,187,188,190,191,192,197,198,199,200,202,208,214,215,216,217,218,],[31,34,-113,36,-66,-67,-68,-69,-70,-71,-72,-73,-97,48,-101,74,-98,-100,-99,-115,-115,88,88,113,88,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,135,141,141,141,-62,-63,-64,-65,147,149,153,141,-115,-87,-88,-110,-111,88,182,-94,-93,141,-74,-75,141,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,88,88,88,201,-51,-41,-42,-52,88,219,220,221,222,-50,]),'INCLUDE':([16,],[32,]),'NAMESPACE':([17,],[33,]),'IF':([19,40,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,137,138,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,-101,-98,-100,-99,-115,-115,102,102,102,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,102,-94,-93,-92,-95,-96,-115,-115,-115,-47,102,102,102,-51,-41,-42,-52,102,-50,]),'COUT':([19,40,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,137,138,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,-101,-98,-100,-99,-115,-115,107,107,107,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,107,-94,-93,-92,-95,-96,-115,-115,-115,-47,107,107,107,-51,-41,-42,-52,107,-50,]),'CIN':([19,40,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,137,138,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,-101,-98,-100,-99,-115,-115,108,108,108,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,108,-94,-93,-92,-95,-96,-115,-115,-115,-47,108,108,108,-51,-41,-42,-52,108,-50,]),'WHILE':([19,40,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,137,138,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,-101,-98,-100,-99,-115,-115,109,109,109,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,109,-94,-93,-92,-95,-96,-115,-115,-115,-47,109,109,109,-51,-41,-42,-52,109,-50,]),'FOR':([19,40,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,132,137,138,148,152,156,158,159,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,-101,-98,-100,-99,-115,-115,111,111,111,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-115,-87,-88,-110,-111,111,-94,-93,-92,-95,-96,-115,-115,-115,-47,111,111,111,-51,-41,-42,-52,111,-50,]),'INT_NUMBER':([19,40,41,43,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,114,118,120,121,122,123,124,125,126,131,132,137,138,148,152,156,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,183,186,187,188,189,190,191,192,198,199,200,202,204,205,206,207,208,218,],[-113,-97,54,64,-101,-98,-100,-99,-115,-115,54,54,54,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,54,54,54,54,-62,-63,-64,-65,54,54,-115,-87,-88,-110,-111,54,-94,-93,54,-74,-75,54,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,193,54,54,54,-51,-41,-42,-52,209,210,211,212,54,-50,]),'FLOAT_NUMBER':([19,40,41,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,114,118,120,121,122,123,124,125,126,131,132,137,138,148,152,156,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,55,-101,-98,-100,-99,-115,-115,55,55,55,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,55,55,55,55,-62,-63,-64,-65,55,55,-115,-87,-88,-110,-111,55,-94,-93,55,-74,-75,55,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,55,55,55,-51,-41,-42,-52,55,-50,]),'TEXT':([19,40,41,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,114,118,120,121,122,123,124,125,126,128,131,132,137,138,148,152,156,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,56,-101,-98,-100,-99,-115,-115,56,56,56,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,56,56,56,56,-62,-63,-64,-65,56,150,56,-115,-87,-88,-110,-111,56,-94,-93,56,-74,-75,56,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,56,56,56,-51,-41,-42,-52,56,-50,]),'SIGN':([19,40,41,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,114,118,120,121,122,123,124,125,126,131,132,137,138,148,152,156,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,57,-101,-98,-100,-99,-115,-115,57,57,57,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,57,57,57,57,-62,-63,-64,-65,57,57,-115,-87,-88,-110,-111,57,-94,-93,57,-74,-75,57,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,57,57,57,-51,-41,-42,-52,57,-50,]),'TRUE':([19,40,41,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,114,118,120,121,122,123,124,125,126,131,132,137,138,148,152,156,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,58,-101,-98,-100,-99,-115,-115,58,58,58,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,58,58,58,58,-62,-63,-64,-65,58,58,-115,-87,-88,-110,-111,58,-94,-93,58,-74,-75,58,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,58,58,58,-51,-41,-42,-52,58,-50,]),'FALSE':([19,40,41,44,71,72,73,81,83,85,86,90,91,92,93,94,95,96,97,98,99,100,101,105,106,114,118,120,121,122,123,124,125,126,131,132,137,138,148,152,156,158,159,162,163,164,165,166,167,168,169,170,171,172,173,174,183,186,187,188,190,191,192,198,199,200,202,208,218,],[-113,-97,59,-101,-98,-100,-99,-115,-115,59,59,59,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,59,59,59,59,-62,-63,-64,-65,59,59,-115,-87,-88,-110,-111,59,-94,-93,59,-74,-75,59,-56,-57,-58,-59,-60,-61,-92,-95,-96,-115,-115,-115,-47,59,59,59,-51,-41,-42,-52,59,-50,]),'RETURN':([19,40,44,71,72,73,81,85,89,90,91,92,93,94,95,96,97,98,99,100,101,105,106,119,137,138,148,152,158,159,172,173,174,188,198,199,200,202,218,],[-113,-97,-101,-98,-100,-99,-115,-114,118,-30,-32,-33,-34,-35,-36,-37,-38,-39,-40,-48,-49,-90,-91,-31,-87,-88,-110,-111,-94,-93,-92,-95,-96,-47,-51,-41,-42,-52,-50,]),'LEFT_BR_CURLY':([31,75,78,110,161,179,180,203,227,228,229,230,],[37,81,83,132,183,186,187,208,-43,-44,-45,-46,]),'LIBRARY':([32,],[38,]),'STD':([33,],[39,]),'SEMICOLON':([34,35,39,48,49,50,51,52,53,54,55,56,57,58,59,77,79,113,115,116,127,129,135,136,140,141,145,146,147,149,150,151,153,175,176,177,178,193,209,210,211,212,],[40,44,47,72,73,-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,84,40,137,138,148,152,158,159,160,-83,172,173,174,-102,-104,-106,-108,-103,-105,-107,-109,197,214,215,216,217,]),'EQUAL':([34,77,88,104,113,182,],[41,-89,114,126,41,189,]),'LEFT_BR':([34,36,102,109,111,],[42,45,120,131,133,]),'LEFT_BR_SQUARED':([34,48,88,113,135,141,147,],[43,43,43,43,43,43,43,]),'RIGHT_BR':([42,45,50,51,52,53,54,55,56,57,58,59,61,62,63,65,74,76,77,82,141,142,143,154,155,184,185,223,224,225,226,],[-114,-114,-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,75,-20,-22,78,-23,-114,-89,-21,-83,161,-53,179,180,-54,-55,227,228,229,230,]),'PLUS':([50,52,53,54,55,56,57,58,59,77,88,103,104,],[-82,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,122,-84,]),'MINUS':([50,52,53,54,55,56,57,58,59,77,88,103,104,],[-82,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,123,-84,]),'MULTIPLY':([50,52,53,54,55,56,57,58,59,77,88,103,104,],[-82,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,124,-84,]),'DIVIDE':([50,52,53,54,55,56,57,58,59,77,88,103,104,],[-82,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,125,-84,]),'LESS':([50,51,52,53,54,55,56,57,58,59,77,141,144,155,201,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,166,-86,204,]),'LESS_EQUAL':([50,51,52,53,54,55,56,57,58,59,77,141,144,155,201,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,167,-86,205,]),'GREATER':([50,51,52,53,54,55,56,57,58,59,77,141,144,155,201,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,168,-86,206,]),'GREATER_EQUAL':([50,51,52,53,54,55,56,57,58,59,77,141,144,155,201,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,169,-86,207,]),'EQUAL_EQUAL':([50,51,52,53,54,55,56,57,58,59,77,141,144,155,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,170,-86,]),'NOT_EQUAL':([50,51,52,53,54,55,56,57,58,59,77,141,144,155,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,171,-86,]),'AND':([50,51,52,53,54,55,56,57,58,59,77,141,143,185,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,163,-55,]),'OR':([50,51,52,53,54,55,56,57,58,59,77,141,143,185,],[-82,-84,-85,-86,-78,-79,-76,-77,-80,-81,-89,-83,164,-55,]),'COMMA':([62,74,],[76,-23,]),'RIGHT_BR_SQUARED':([64,],[77,]),'PLUS_PLUS':([88,219,220,],[115,223,224,]),'MINUS_MINUS':([88,221,222,],[116,225,226,]),'OUT':([107,149,150,151,],[128,128,128,128,]),'IN':([108,153,],[130,130,]),'ENDL':([128,],[151,]),'ELSE':([198,],[203,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start_symbol':([0,],[1,]),'program':([0,],[2,]),'program_components':([0,5,],[3,29,]),'empty':([0,5,42,45,46,67,76,85,86,90,156,190,191,192,208,],[4,30,63,63,68,68,63,95,95,95,95,95,95,95,95,]),'program_component':([0,5,],[5,5,]),'function_definition':([0,5,46,67,],[6,6,70,70,]),'class_definition':([0,5,],[7,7,]),'including':([0,5,],[8,8,]),'using_namespace_std':([0,5,],[9,9,]),'var_declaration':([0,5,46,67,85,86,90,156,190,191,192,208,],[10,10,69,69,96,96,96,96,96,96,96,96,]),'array_declaration':([0,5,46,67,85,86,90,156,190,191,192,208,],[11,11,71,71,71,71,71,71,71,71,71,71,]),'comment':([0,5,85,86,90,156,190,191,192,208,],[12,12,99,99,99,99,99,99,99,99,]),'type_function_definition':([0,5,46,67,],[13,13,13,13,]),'void_function_definition':([0,5,46,67,],[14,14,14,14,]),'type':([0,5,42,45,46,67,76,85,86,90,156,190,191,192,208,],[18,18,60,60,18,18,60,87,87,87,87,87,87,87,87,]),'get_array_element':([18,41,85,86,87,90,114,118,120,121,126,131,156,162,165,190,191,192,208,],[35,51,104,104,35,104,51,51,51,51,51,51,104,51,51,104,104,104,104,]),'change_tab_number':([37,81,83,132,183,186,187,],[46,85,86,156,190,191,192,]),'value':([41,85,86,90,114,118,120,121,126,131,156,162,165,190,191,192,208,],[49,103,103,103,136,140,144,145,146,144,103,144,185,103,103,103,103,]),'number':([41,85,86,90,114,118,120,121,126,131,156,162,165,190,191,192,208,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'string_value':([41,85,86,90,114,118,120,121,126,131,156,162,165,190,191,192,208,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'bool_value':([41,85,86,90,114,118,120,121,126,131,156,162,165,190,191,192,208,],[53,53,53,53,53,53,53,53,53,155,53,53,53,53,53,53,53,]),'function_var_declaration':([42,45,76,],[61,65,82,]),'var_declaration_no_semicolon':([42,45,76,],[62,62,62,]),'class_declarations':([46,67,],[66,80,]),'class_declaration':([46,67,],[67,67,]),'instructions':([85,86,90,156,190,191,192,208,],[89,112,119,181,194,195,196,213,]),'instruction':([85,86,90,156,190,191,192,208,],[90,90,90,90,90,90,90,90,]),'loop':([85,86,90,156,190,191,192,208,],[91,91,91,91,91,91,91,91,]),'if_statement':([85,86,90,156,190,191,192,208,],[92,92,92,92,92,92,92,92,]),'assignment':([85,86,90,156,190,191,192,208,],[93,93,93,93,93,93,93,93,]),'operation':([85,86,90,156,190,191,192,208,],[94,94,94,94,94,94,94,94,]),'print':([85,86,90,156,190,191,192,208,],[97,97,97,97,97,97,97,97,]),'input':([85,86,90,156,190,191,192,208,],[98,98,98,98,98,98,98,98,]),'while_loop':([85,86,90,156,190,191,192,208,],[100,100,100,100,100,100,100,100,]),'for_loop':([85,86,90,156,190,191,192,208,],[101,101,101,101,101,101,101,101,]),'increment':([85,86,90,156,190,191,192,208,],[105,105,105,105,105,105,105,105,]),'decrement':([85,86,90,156,190,191,192,208,],[106,106,106,106,106,106,106,106,]),'for_loop_statement':([85,86,90,156,190,191,192,208,],[110,110,110,110,110,110,110,110,]),'returning':([89,],[117,]),'operator':([103,],[121,]),'out':([107,149,150,151,],[127,175,176,177,]),'in':([108,153,],[129,178,]),'comparisons':([120,131,162,],[142,154,184,]),'comparison':([120,131,162,],[143,143,143,]),'conjunction':([143,],[162,]),'comparator':([144,],[165,]),'else_statement':([198,],[202,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start_symbol","S'",1,None,None,None),
  ('start_symbol -> program','start_symbol',1,'p_start_symbol','Parser.py',158),
  ('program -> program_components','program',1,'p_program','Parser.py',166),
  ('program -> empty','program',1,'p_program','Parser.py',167),
  ('program_components -> program_component','program_components',1,'p_program_components','Parser.py',174),
  ('program_components -> program_component program_components','program_components',2,'p_program_components','Parser.py',175),
  ('program_component -> function_definition','program_component',1,'p_program_component','Parser.py',185),
  ('program_component -> class_definition','program_component',1,'p_program_component','Parser.py',186),
  ('program_component -> including','program_component',1,'p_program_component','Parser.py',187),
  ('program_component -> using_namespace_std','program_component',1,'p_program_component','Parser.py',188),
  ('program_component -> var_declaration','program_component',1,'p_program_component','Parser.py',189),
  ('program_component -> array_declaration','program_component',1,'p_program_component','Parser.py',190),
  ('program_component -> comment','program_component',1,'p_program_component','Parser.py',191),
  ('program_component -> empty','program_component',1,'p_program_component','Parser.py',192),
  ('using_namespace_std -> USING NAMESPACE STD SEMICOLON','using_namespace_std',4,'p_using_namespace_std','Parser.py',200),
  ('including -> HASH INCLUDE LIBRARY','including',3,'p_including','Parser.py',208),
  ('function_definition -> type_function_definition','function_definition',1,'p_function_definition','Parser.py',217),
  ('function_definition -> void_function_definition','function_definition',1,'p_function_definition','Parser.py',218),
  ('type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY','type_function_definition',10,'p_type_function_definition','Parser.py',225),
  ('void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','void_function_definition',9,'p_void_function_definition','Parser.py',234),
  ('function_var_declaration -> var_declaration_no_semicolon','function_var_declaration',1,'p_function_var_declaration','Parser.py',243),
  ('function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration','function_var_declaration',3,'p_function_var_declaration','Parser.py',244),
  ('function_var_declaration -> empty','function_var_declaration',1,'p_function_var_declaration','Parser.py',245),
  ('var_declaration_no_semicolon -> type VAR','var_declaration_no_semicolon',2,'p_var_declaration_no_semicolon','Parser.py',255),
  ('class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON','class_definition',7,'p_class_definition','Parser.py',263),
  ('class_declaration -> var_declaration','class_declaration',1,'p_class_declaration','Parser.py',272),
  ('class_declaration -> function_definition','class_declaration',1,'p_class_declaration','Parser.py',273),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','Parser.py',280),
  ('class_declarations -> class_declaration class_declarations','class_declarations',2,'p_class_declarations','Parser.py',281),
  ('class_declarations -> empty','class_declarations',1,'p_class_declarations','Parser.py',282),
  ('instructions -> instruction','instructions',1,'p_instructions','Parser.py',292),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','Parser.py',293),
  ('instruction -> loop','instruction',1,'p_instruction','Parser.py',302),
  ('instruction -> if_statement','instruction',1,'p_instruction','Parser.py',303),
  ('instruction -> assignment','instruction',1,'p_instruction','Parser.py',304),
  ('instruction -> operation','instruction',1,'p_instruction','Parser.py',305),
  ('instruction -> empty','instruction',1,'p_instruction','Parser.py',306),
  ('instruction -> var_declaration','instruction',1,'p_instruction','Parser.py',307),
  ('instruction -> print','instruction',1,'p_instruction','Parser.py',308),
  ('instruction -> input','instruction',1,'p_instruction','Parser.py',309),
  ('instruction -> comment','instruction',1,'p_instruction','Parser.py',310),
  ('while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',320),
  ('while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',321),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',330),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',331),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',332),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',333),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','for_loop',5,'p_for_loop','Parser.py',360),
  ('loop -> while_loop','loop',1,'p_loop','Parser.py',369),
  ('loop -> for_loop','loop',1,'p_loop','Parser.py',370),
  ('else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY','else_statement',4,'p_else_statement','Parser.py',377),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','if_statement',8,'p_if_statement','Parser.py',389),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement','if_statement',9,'p_if_statement','Parser.py',390),
  ('comparisons -> comparison','comparisons',1,'p_comparisons','Parser.py',402),
  ('comparisons -> comparison conjunction comparisons','comparisons',3,'p_comparisons','Parser.py',403),
  ('comparison -> value comparator value','comparison',3,'p_comparison','Parser.py',413),
  ('comparator -> LESS','comparator',1,'p_comparator','Parser.py',421),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','Parser.py',422),
  ('comparator -> GREATER','comparator',1,'p_comparator','Parser.py',423),
  ('comparator -> GREATER_EQUAL','comparator',1,'p_comparator','Parser.py',424),
  ('comparator -> EQUAL_EQUAL','comparator',1,'p_comparator','Parser.py',425),
  ('comparator -> NOT_EQUAL','comparator',1,'p_comparator','Parser.py',426),
  ('operator -> PLUS','operator',1,'p_operator','Parser.py',433),
  ('operator -> MINUS','operator',1,'p_operator','Parser.py',434),
  ('operator -> MULTIPLY','operator',1,'p_operator','Parser.py',435),
  ('operator -> DIVIDE','operator',1,'p_operator','Parser.py',436),
  ('type -> INT','type',1,'p_type','Parser.py',443),
  ('type -> CHAR','type',1,'p_type','Parser.py',444),
  ('type -> STRING','type',1,'p_type','Parser.py',445),
  ('type -> BOOL','type',1,'p_type','Parser.py',446),
  ('type -> FLOAT','type',1,'p_type','Parser.py',447),
  ('type -> LONG','type',1,'p_type','Parser.py',448),
  ('type -> SHORT','type',1,'p_type','Parser.py',449),
  ('type -> DOUBLE','type',1,'p_type','Parser.py',450),
  ('conjunction -> AND','conjunction',1,'p_conjunction','Parser.py',457),
  ('conjunction -> OR','conjunction',1,'p_conjunction','Parser.py',458),
  ('string_value -> TEXT','string_value',1,'p_string_value','Parser.py',465),
  ('string_value -> SIGN','string_value',1,'p_string_value','Parser.py',466),
  ('number -> INT_NUMBER','number',1,'p_number','Parser.py',473),
  ('number -> FLOAT_NUMBER','number',1,'p_number','Parser.py',474),
  ('bool_value -> TRUE','bool_value',1,'p_bool_value','Parser.py',481),
  ('bool_value -> FALSE','bool_value',1,'p_bool_value','Parser.py',482),
  ('value -> number','value',1,'p_value','Parser.py',489),
  ('value -> VAR','value',1,'p_value','Parser.py',490),
  ('value -> get_array_element','value',1,'p_value','Parser.py',491),
  ('value -> string_value','value',1,'p_value','Parser.py',492),
  ('value -> bool_value','value',1,'p_value','Parser.py',493),
  ('increment -> VAR PLUS_PLUS SEMICOLON','increment',3,'p_increment','Parser.py',500),
  ('decrement -> VAR MINUS_MINUS SEMICOLON','decrement',3,'p_decrement','Parser.py',507),
  ('get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',514),
  ('operation -> increment','operation',1,'p_operation','Parser.py',521),
  ('operation -> decrement','operation',1,'p_operation','Parser.py',522),
  ('operation -> value operator value SEMICOLON','operation',4,'p_operation','Parser.py',523),
  ('assignment -> VAR EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',533),
  ('assignment -> VAR EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',534),
  ('assignment -> get_array_element EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',535),
  ('assignment -> get_array_element EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',536),
  ('var_declaration -> type VAR SEMICOLON','var_declaration',3,'p_var_declaration','Parser.py',543),
  ('var_declaration -> array_declaration','var_declaration',1,'p_var_declaration','Parser.py',544),
  ('var_declaration -> type VAR EQUAL value SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',545),
  ('var_declaration -> type VAR EQUAL VAR SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',546),
  ('array_declaration -> type get_array_element SEMICOLON','array_declaration',3,'p_array_declaration','Parser.py',558),
  ('out -> OUT VAR','out',2,'p_out','Parser.py',566),
  ('out -> OUT VAR out','out',3,'p_out','Parser.py',567),
  ('out -> OUT TEXT','out',2,'p_out','Parser.py',568),
  ('out -> OUT TEXT out','out',3,'p_out','Parser.py',569),
  ('out -> OUT ENDL','out',2,'p_out','Parser.py',570),
  ('out -> OUT ENDL out','out',3,'p_out','Parser.py',571),
  ('in -> IN VAR','in',2,'p_in','Parser.py',587),
  ('in -> IN VAR in','in',3,'p_in','Parser.py',588),
  ('print -> COUT out SEMICOLON','print',3,'p_print','Parser.py',598),
  ('input -> CIN in SEMICOLON','input',3,'p_input','Parser.py',605),
  ('returning -> RETURN value SEMICOLON','returning',3,'p_returning','Parser.py',612),
  ('comment -> COMMENT','comment',1,'p_comment','Parser.py',622),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',627),
  ('change_tab_number -> <empty>','change_tab_number',0,'p_change_tab_number','Parser.py',637),
]
