
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL CHAR CIN CLASS COMMA COMMENT COUT DIVIDE DOUBLE ELSE ENDL EQUAL EQUAL_EQUAL FALSE FLOAT FLOAT_NUMBER FOR GREATER GREATER_EQUAL HASH ID IF IN INCLUDE INT INT_NUMBER LEFT_BR LEFT_BR_CURLY LEFT_BR_SQUARED LESS LESS_EQUAL LIBRARY LONG MINUS MINUS_MINUS MULTIPLY NAMESPACE NOT_EQUAL OR OUT PLUS PLUS_PLUS RETURN RIGHT_BR RIGHT_BR_CURLY RIGHT_BR_SQUARED SEMICOLON SHORT SIGN STD STRING TEXT TRUE USING VAR VOID WHILE\n    start_symbol : program\n    \n    program : program_components\n            | empty\n    \n    program_components : program_component\n        | program_component program_components\n    \n    program_component : function_definition\n        | class_definition\n        | including\n        | using_namespace_std\n        | var_declaration\n        | array_declaration\n        | comment\n        | empty\n    \n    using_namespace_std : USING NAMESPACE STD SEMICOLON\n    \n    including : HASH INCLUDE LIBRARY\n    \n    function_definition : type_function_definition\n        | void_function_definition\n    \n    type_function_definition : type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY\n    \n    void_function_definition : VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    function_var_declaration : var_declaration_no_semicolon\n        | var_declaration_no_semicolon COMMA function_var_declaration\n        | empty\n    \n    var_declaration_no_semicolon : type VAR\n    \n    class_definition : CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON\n    \n    class_declaration : var_declaration\n        | function_definition\n    \n    class_declarations : class_declaration\n        | class_declaration class_declarations\n        | empty\n    \n    instructions : instruction\n        | instruction instructions\n    \n    instruction : loop\n        | if_statement\n        | assignment\n        | operation\n        | empty\n        | var_declaration\n        | print\n        | input\n        | comment\n    \n    while_loop : WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n        | WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    for_loop_statement : FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR\n        | FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR\n    \n    for_loop : for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n    \n    loop : while_loop\n        | for_loop\n    \n    else_statement : ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY\n    \n    if_statement : IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY\n                 | IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY  else_statement\n    \n    comparisons : comparison\n        | comparison conjunction comparisons\n    \n    comparison : value comparator value\n    \n    comparator : LESS\n        | LESS_EQUAL\n        | GREATER\n        | GREATER_EQUAL\n        | EQUAL_EQUAL\n        | NOT_EQUAL\n    \n    operator : PLUS\n        | MINUS\n        | MULTIPLY\n        | DIVIDE\n    \n    type : INT\n        | CHAR\n        | STRING\n        | BOOL\n        | FLOAT\n        | LONG\n        | SHORT\n        | DOUBLE\n    \n    conjunction : AND\n        | OR\n    \n    string_value : TEXT\n        | SIGN\n    \n    number : INT_NUMBER\n        | FLOAT_NUMBER\n    \n    bool_value : TRUE\n        | FALSE\n    \n    value : number\n        | VAR\n        | get_array_element\n        | string_value\n        | bool_value\n        | math_operation\n    \n    increment : VAR PLUS_PLUS SEMICOLON\n    \n    decrement : VAR MINUS_MINUS SEMICOLON\n    \n    math_operation : VAR operator VAR\n        | VAR operator number\n        | number operator number\n    \n    operation : increment\n        | decrement\n    \n    get_array_element : VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED\n        | VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED\n    \n    assignment : VAR EQUAL value SEMICOLON\n               | VAR EQUAL VAR SEMICOLON\n               | get_array_element EQUAL value SEMICOLON\n               | get_array_element EQUAL VAR SEMICOLON\n    \n    var_declaration : type VAR SEMICOLON\n        | array_declaration\n        | type VAR EQUAL value SEMICOLON\n        | type VAR EQUAL VAR SEMICOLON\n    \n    array_declaration : type get_array_element SEMICOLON\n    \n    out : OUT VAR\n        | OUT VAR out\n        | OUT TEXT\n        | OUT TEXT out\n        | OUT ENDL\n        | OUT ENDL out\n    \n    in : IN VAR\n       | IN VAR in\n    \n    print : COUT out SEMICOLON\n    \n    input : CIN in SEMICOLON\n    \n    returning : RETURN value SEMICOLON\n    \n    comment : COMMENT\n    empty : change_tab_number : '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,19,29,30,38,40,44,47,74,80,96,140,145,],[-122,0,-1,-2,-3,-4,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-5,-13,-15,-105,-109,-14,-108,-107,-24,-19,-18,]),'CLASS':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,74,80,96,140,145,],[15,-13,15,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-15,-105,-109,-14,-108,-107,-24,-19,-18,]),'HASH':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,74,80,96,140,145,],[16,-13,16,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-15,-105,-109,-14,-108,-107,-24,-19,-18,]),'USING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,74,80,96,140,145,],[17,-13,17,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-15,-105,-109,-14,-108,-107,-24,-19,-18,]),'COMMENT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,38,40,44,47,73,74,80,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,140,143,144,145,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[19,-13,19,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-15,-105,-109,-14,-106,-108,-107,-123,-123,-24,19,19,19,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-19,-92,-93,-18,-118,-119,19,-102,-101,-103,-104,-123,-123,-123,-51,19,19,19,-55,-41,-42,-56,19,-54,]),'VOID':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,44,46,47,69,71,72,73,74,80,96,140,145,],[20,-13,20,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-123,-15,-105,-109,20,-14,20,-25,-26,-106,-108,-107,-24,-19,-18,]),'INT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,139,140,143,144,145,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[21,-13,21,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-123,-15,-105,21,-109,21,21,-14,21,-25,-26,-106,-108,-107,21,-123,-123,-24,21,21,21,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,162,-19,-92,-93,-18,-118,-119,21,-102,-101,-103,-104,-123,-123,-123,-51,21,21,21,-55,-41,-42,-56,21,-54,]),'CHAR':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,140,143,144,145,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[22,-13,22,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-123,-15,-105,22,-109,22,22,-14,22,-25,-26,-106,-108,-107,22,-123,-123,-24,22,22,22,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-19,-92,-93,-18,-118,-119,22,-102,-101,-103,-104,-123,-123,-123,-51,22,22,22,-55,-41,-42,-56,22,-54,]),'STRING':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,140,143,144,145,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[23,-13,23,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-123,-15,-105,23,-109,23,23,-14,23,-25,-26,-106,-108,-107,23,-123,-123,-24,23,23,23,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-19,-92,-93,-18,-118,-119,23,-102,-101,-103,-104,-123,-123,-123,-51,23,23,23,-55,-41,-42,-56,23,-54,]),'BOOL':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,140,143,144,145,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[24,-13,24,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-123,-15,-105,24,-109,24,24,-14,24,-25,-26,-106,-108,-107,24,-123,-123,-24,24,24,24,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-19,-92,-93,-18,-118,-119,24,-102,-101,-103,-104,-123,-123,-123,-51,24,24,24,-55,-41,-42,-56,24,-54,]),'FLOAT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,140,143,144,145,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[25,-13,25,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-123,-15,-105,25,-109,25,25,-14,25,-25,-26,-106,-108,-107,25,-123,-123,-24,25,25,25,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-19,-92,-93,-18,-118,-119,25,-102,-101,-103,-104,-123,-123,-123,-51,25,25,25,-55,-41,-42,-56,25,-54,]),'LONG':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,140,143,144,145,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[26,-13,26,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-123,-15,-105,26,-109,26,26,-14,26,-25,-26,-106,-108,-107,26,-123,-123,-24,26,26,26,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-19,-92,-93,-18,-118,-119,26,-102,-101,-103,-104,-123,-123,-123,-51,26,26,26,-55,-41,-42,-56,26,-54,]),'SHORT':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,140,143,144,145,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[27,-13,27,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-123,-15,-105,27,-109,27,27,-14,27,-25,-26,-106,-108,-107,27,-123,-123,-24,27,27,27,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-19,-92,-93,-18,-118,-119,27,-102,-101,-103,-104,-123,-123,-123,-51,27,27,27,-55,-41,-42,-56,27,-54,]),'DOUBLE':([0,4,5,6,7,8,9,10,11,12,13,14,19,30,37,38,40,42,44,45,46,47,69,71,72,73,74,80,84,93,95,96,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,140,143,144,145,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[28,-13,28,-6,-7,-8,-9,-10,-11,-12,-16,-17,-121,-13,-123,-15,-105,28,-109,28,28,-14,28,-25,-26,-106,-108,-107,28,-123,-123,-24,28,28,28,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-19,-92,-93,-18,-118,-119,28,-102,-101,-103,-104,-123,-123,-123,-51,28,28,28,-55,-41,-42,-56,28,-54,]),'RIGHT_BR_CURLY':([13,14,19,37,40,44,46,68,69,70,71,72,73,74,80,89,95,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,123,128,130,138,140,143,144,145,153,157,161,163,164,165,177,178,185,187,190,191,192,194,195,196,198,199,200,202,203,204,206,212,221,230,],[-16,-17,-121,-123,-105,-109,-122,88,-27,-29,-25,-26,-106,-108,-107,-28,-123,-122,-30,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,140,145,-31,-123,-19,-92,-93,-18,-118,-119,-122,-102,-101,-120,-103,-104,192,-123,-123,-123,-51,-122,-122,-122,202,203,204,-55,-41,-42,-56,-122,230,-54,]),'VAR':([15,18,19,20,21,22,23,24,25,26,27,28,40,41,43,44,61,73,74,75,76,77,78,79,80,93,95,97,98,99,102,103,104,105,106,107,108,109,110,111,112,113,116,117,125,129,131,132,134,136,137,138,143,144,153,157,161,162,163,164,167,168,169,170,171,172,173,174,175,176,177,178,187,190,191,192,194,195,196,201,202,203,204,206,208,209,210,211,212,222,223,224,225,226,227,228,229,230,],[31,34,-121,36,-70,-71,-72,-73,-74,-75,-76,-77,-105,48,65,-109,82,-106,-108,90,-66,-67,-68,-69,-107,-123,-123,100,100,124,100,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,141,147,147,152,154,158,147,-123,-92,-93,-118,-119,100,186,-102,-101,147,-78,-79,147,-60,-61,-62,-63,-64,-65,-103,-104,-123,-123,-123,-51,100,100,100,205,-55,-41,-42,-56,213,215,217,219,100,231,232,233,234,235,236,237,238,-54,]),'INCLUDE':([16,],[32,]),'NAMESPACE':([17,],[33,]),'IF':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,143,144,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[-121,-105,-109,-106,-108,-107,-123,-123,114,114,114,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-92,-93,-118,-119,114,-102,-101,-103,-104,-123,-123,-123,-51,114,114,114,-55,-41,-42,-56,114,-54,]),'COUT':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,143,144,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[-121,-105,-109,-106,-108,-107,-123,-123,118,118,118,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-92,-93,-118,-119,118,-102,-101,-103,-104,-123,-123,-123,-51,118,118,118,-55,-41,-42,-56,118,-54,]),'CIN':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,143,144,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[-121,-105,-109,-106,-108,-107,-123,-123,119,119,119,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-92,-93,-118,-119,119,-102,-101,-103,-104,-123,-123,-123,-51,119,119,119,-55,-41,-42,-56,119,-54,]),'WHILE':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,143,144,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[-121,-105,-109,-106,-108,-107,-123,-123,120,120,120,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-92,-93,-118,-119,120,-102,-101,-103,-104,-123,-123,-123,-51,120,120,120,-55,-41,-42,-56,120,-54,]),'FOR':([19,40,44,73,74,80,93,95,97,98,102,103,104,105,106,107,108,109,110,111,112,113,116,117,138,143,144,153,157,161,163,164,177,178,187,190,191,192,194,195,196,202,203,204,206,212,230,],[-121,-105,-109,-106,-108,-107,-123,-123,122,122,122,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-123,-92,-93,-118,-119,122,-102,-101,-103,-104,-123,-123,-123,-51,122,122,122,-55,-41,-42,-56,122,-54,]),'RETURN':([19,40,44,73,74,80,93,97,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,130,143,144,153,157,163,164,177,178,192,202,203,204,206,230,],[-121,-105,-109,-106,-108,-107,-123,-122,129,-30,-32,-33,-34,-35,-36,-37,-38,-39,-40,-52,-53,-97,-98,-31,-92,-93,-118,-119,-102,-101,-103,-104,-51,-55,-41,-42,-56,-54,]),'LEFT_BR_CURLY':([31,83,87,121,166,183,184,207,247,248,249,250,251,252,253,254,],[37,93,95,138,187,190,191,212,-44,-43,-46,-45,-48,-47,-50,-49,]),'LIBRARY':([32,],[38,]),'STD':([33,],[39,]),'SEMICOLON':([34,35,39,48,49,50,51,52,53,54,55,56,57,58,59,60,85,86,88,90,91,92,124,126,127,133,135,141,142,146,147,151,152,154,155,156,158,179,180,181,182,197,213,214,215,216,217,218,219,220,],[40,44,47,74,80,-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,-100,-99,96,-94,-95,-96,40,143,144,153,157,163,164,165,-87,177,178,-110,-112,-114,-116,-111,-113,-115,-117,201,222,223,224,225,226,227,228,229,]),'EQUAL':([34,85,86,100,115,124,186,],[41,-100,-99,125,132,41,193,]),'LEFT_BR':([34,36,114,120,122,],[42,45,131,137,139,]),'LEFT_BR_SQUARED':([34,48,100,124,141,147,152,],[43,43,43,43,43,43,43,]),'INT_NUMBER':([41,43,75,76,77,78,79,81,125,129,131,132,137,167,168,169,170,171,172,173,174,175,176,193,208,209,210,211,],[55,66,55,-66,-67,-68,-69,55,55,55,55,55,55,55,-78,-79,55,-60,-61,-62,-63,-64,-65,197,214,216,218,220,]),'FLOAT_NUMBER':([41,75,76,77,78,79,81,125,129,131,132,137,167,168,169,170,171,172,173,174,175,176,],[56,56,-66,-67,-68,-69,56,56,56,56,56,56,56,-78,-79,56,-60,-61,-62,-63,-64,-65,]),'TEXT':([41,125,129,131,132,134,137,167,168,169,170,171,172,173,174,175,176,],[57,57,57,57,57,155,57,57,-78,-79,57,-60,-61,-62,-63,-64,-65,]),'SIGN':([41,125,129,131,132,137,167,168,169,170,171,172,173,174,175,176,],[58,58,58,58,58,58,58,-78,-79,58,-60,-61,-62,-63,-64,-65,]),'TRUE':([41,125,129,131,132,137,167,168,169,170,171,172,173,174,175,176,],[59,59,59,59,59,59,59,-78,-79,59,-60,-61,-62,-63,-64,-65,]),'FALSE':([41,125,129,131,132,137,167,168,169,170,171,172,173,174,175,176,],[60,60,60,60,60,60,60,-78,-79,60,-60,-61,-62,-63,-64,-65,]),'RIGHT_BR':([42,45,50,51,52,53,54,55,56,57,58,59,60,62,63,64,67,82,84,85,86,90,91,92,94,147,148,149,159,160,188,189,239,240,241,242,243,244,245,246,],[-122,-122,-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,83,-20,-22,87,-23,-122,-100,-99,-94,-95,-96,-21,-87,166,-57,183,184,-58,-59,247,248,249,250,251,252,253,254,]),'PLUS':([48,50,55,56,141,147,152,],[76,76,-82,-83,76,76,76,]),'MINUS':([48,50,55,56,141,147,152,],[77,77,-82,-83,77,77,77,]),'MULTIPLY':([48,50,55,56,141,147,152,],[78,78,-82,-83,78,78,78,]),'DIVIDE':([48,50,55,56,141,147,152,],[79,79,-82,-83,79,79,79,]),'LESS':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,147,150,160,205,],[-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,-100,-99,-94,-95,-96,-87,171,-90,208,]),'LESS_EQUAL':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,147,150,160,205,],[-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,-100,-99,-94,-95,-96,-87,172,-90,209,]),'GREATER':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,147,150,160,205,],[-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,-100,-99,-94,-95,-96,-87,173,-90,210,]),'GREATER_EQUAL':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,147,150,160,205,],[-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,-100,-99,-94,-95,-96,-87,174,-90,211,]),'EQUAL_EQUAL':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,147,150,160,],[-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,-100,-99,-94,-95,-96,-87,175,-90,]),'NOT_EQUAL':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,147,150,160,],[-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,-100,-99,-94,-95,-96,-87,176,-90,]),'AND':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,147,149,189,],[-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,-100,-99,-94,-95,-96,-87,168,-59,]),'OR':([50,51,52,53,54,55,56,57,58,59,60,85,86,90,91,92,147,149,189,],[-86,-88,-89,-90,-91,-82,-83,-80,-81,-84,-85,-100,-99,-94,-95,-96,-87,169,-59,]),'COMMA':([63,82,],[84,-23,]),'RIGHT_BR_SQUARED':([65,66,],[85,86,]),'PLUS_PLUS':([100,231,232,233,234,],[126,239,240,241,242,]),'MINUS_MINUS':([100,235,236,237,238,],[127,243,244,245,246,]),'OUT':([118,154,155,156,],[134,134,134,134,]),'IN':([119,158,],[136,136,]),'ENDL':([134,],[156,]),'ELSE':([202,],[207,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start_symbol':([0,],[1,]),'program':([0,],[2,]),'program_components':([0,5,],[3,29,]),'empty':([0,5,42,45,46,69,84,97,98,102,161,194,195,196,212,],[4,30,64,64,70,70,64,107,107,107,107,107,107,107,107,]),'program_component':([0,5,],[5,5,]),'function_definition':([0,5,46,69,],[6,6,72,72,]),'class_definition':([0,5,],[7,7,]),'including':([0,5,],[8,8,]),'using_namespace_std':([0,5,],[9,9,]),'var_declaration':([0,5,46,69,97,98,102,161,194,195,196,212,],[10,10,71,71,108,108,108,108,108,108,108,108,]),'array_declaration':([0,5,46,69,97,98,102,161,194,195,196,212,],[11,11,73,73,73,73,73,73,73,73,73,73,]),'comment':([0,5,97,98,102,161,194,195,196,212,],[12,12,111,111,111,111,111,111,111,111,]),'type_function_definition':([0,5,46,69,],[13,13,13,13,]),'void_function_definition':([0,5,46,69,],[14,14,14,14,]),'type':([0,5,42,45,46,69,84,97,98,102,161,194,195,196,212,],[18,18,61,61,18,18,61,99,99,99,99,99,99,99,99,]),'get_array_element':([18,41,97,98,99,102,125,129,131,132,137,161,167,170,194,195,196,212,],[35,51,115,115,35,115,51,51,51,51,51,115,51,51,115,115,115,115,]),'change_tab_number':([37,93,95,138,187,190,191,],[46,97,98,161,194,195,196,]),'value':([41,125,129,131,132,137,167,170,],[49,142,146,150,151,150,150,189,]),'number':([41,75,81,125,129,131,132,137,167,170,],[50,91,92,50,50,50,50,50,50,50,]),'string_value':([41,125,129,131,132,137,167,170,],[52,52,52,52,52,52,52,52,]),'bool_value':([41,125,129,131,132,137,167,170,],[53,53,53,53,53,160,53,53,]),'math_operation':([41,125,129,131,132,137,167,170,],[54,54,54,54,54,54,54,54,]),'function_var_declaration':([42,45,84,],[62,67,94,]),'var_declaration_no_semicolon':([42,45,84,],[63,63,63,]),'class_declarations':([46,69,],[68,89,]),'class_declaration':([46,69,],[69,69,]),'operator':([48,50,141,147,152,],[75,81,75,75,75,]),'instructions':([97,98,102,161,194,195,196,212,],[101,123,130,185,198,199,200,221,]),'instruction':([97,98,102,161,194,195,196,212,],[102,102,102,102,102,102,102,102,]),'loop':([97,98,102,161,194,195,196,212,],[103,103,103,103,103,103,103,103,]),'if_statement':([97,98,102,161,194,195,196,212,],[104,104,104,104,104,104,104,104,]),'assignment':([97,98,102,161,194,195,196,212,],[105,105,105,105,105,105,105,105,]),'operation':([97,98,102,161,194,195,196,212,],[106,106,106,106,106,106,106,106,]),'print':([97,98,102,161,194,195,196,212,],[109,109,109,109,109,109,109,109,]),'input':([97,98,102,161,194,195,196,212,],[110,110,110,110,110,110,110,110,]),'while_loop':([97,98,102,161,194,195,196,212,],[112,112,112,112,112,112,112,112,]),'for_loop':([97,98,102,161,194,195,196,212,],[113,113,113,113,113,113,113,113,]),'increment':([97,98,102,161,194,195,196,212,],[116,116,116,116,116,116,116,116,]),'decrement':([97,98,102,161,194,195,196,212,],[117,117,117,117,117,117,117,117,]),'for_loop_statement':([97,98,102,161,194,195,196,212,],[121,121,121,121,121,121,121,121,]),'returning':([101,],[128,]),'out':([118,154,155,156,],[133,179,180,181,]),'in':([119,158,],[135,182,]),'comparisons':([131,137,167,],[148,159,188,]),'comparison':([131,137,167,],[149,149,149,]),'conjunction':([149,],[167,]),'comparator':([150,],[170,]),'else_statement':([202,],[206,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start_symbol","S'",1,None,None,None),
  ('start_symbol -> program','start_symbol',1,'p_start_symbol','Parser.py',158),
  ('program -> program_components','program',1,'p_program','Parser.py',166),
  ('program -> empty','program',1,'p_program','Parser.py',167),
  ('program_components -> program_component','program_components',1,'p_program_components','Parser.py',174),
  ('program_components -> program_component program_components','program_components',2,'p_program_components','Parser.py',175),
  ('program_component -> function_definition','program_component',1,'p_program_component','Parser.py',185),
  ('program_component -> class_definition','program_component',1,'p_program_component','Parser.py',186),
  ('program_component -> including','program_component',1,'p_program_component','Parser.py',187),
  ('program_component -> using_namespace_std','program_component',1,'p_program_component','Parser.py',188),
  ('program_component -> var_declaration','program_component',1,'p_program_component','Parser.py',189),
  ('program_component -> array_declaration','program_component',1,'p_program_component','Parser.py',190),
  ('program_component -> comment','program_component',1,'p_program_component','Parser.py',191),
  ('program_component -> empty','program_component',1,'p_program_component','Parser.py',192),
  ('using_namespace_std -> USING NAMESPACE STD SEMICOLON','using_namespace_std',4,'p_using_namespace_std','Parser.py',200),
  ('including -> HASH INCLUDE LIBRARY','including',3,'p_including','Parser.py',208),
  ('function_definition -> type_function_definition','function_definition',1,'p_function_definition','Parser.py',217),
  ('function_definition -> void_function_definition','function_definition',1,'p_function_definition','Parser.py',218),
  ('type_function_definition -> type VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions returning RIGHT_BR_CURLY','type_function_definition',10,'p_type_function_definition','Parser.py',225),
  ('void_function_definition -> VOID VAR LEFT_BR function_var_declaration RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','void_function_definition',9,'p_void_function_definition','Parser.py',234),
  ('function_var_declaration -> var_declaration_no_semicolon','function_var_declaration',1,'p_function_var_declaration','Parser.py',243),
  ('function_var_declaration -> var_declaration_no_semicolon COMMA function_var_declaration','function_var_declaration',3,'p_function_var_declaration','Parser.py',244),
  ('function_var_declaration -> empty','function_var_declaration',1,'p_function_var_declaration','Parser.py',245),
  ('var_declaration_no_semicolon -> type VAR','var_declaration_no_semicolon',2,'p_var_declaration_no_semicolon','Parser.py',255),
  ('class_definition -> CLASS VAR LEFT_BR_CURLY change_tab_number class_declarations RIGHT_BR_CURLY SEMICOLON','class_definition',7,'p_class_definition','Parser.py',263),
  ('class_declaration -> var_declaration','class_declaration',1,'p_class_declaration','Parser.py',272),
  ('class_declaration -> function_definition','class_declaration',1,'p_class_declaration','Parser.py',273),
  ('class_declarations -> class_declaration','class_declarations',1,'p_class_declarations','Parser.py',284),
  ('class_declarations -> class_declaration class_declarations','class_declarations',2,'p_class_declarations','Parser.py',285),
  ('class_declarations -> empty','class_declarations',1,'p_class_declarations','Parser.py',286),
  ('instructions -> instruction','instructions',1,'p_instructions','Parser.py',296),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','Parser.py',297),
  ('instruction -> loop','instruction',1,'p_instruction','Parser.py',306),
  ('instruction -> if_statement','instruction',1,'p_instruction','Parser.py',307),
  ('instruction -> assignment','instruction',1,'p_instruction','Parser.py',308),
  ('instruction -> operation','instruction',1,'p_instruction','Parser.py',309),
  ('instruction -> empty','instruction',1,'p_instruction','Parser.py',310),
  ('instruction -> var_declaration','instruction',1,'p_instruction','Parser.py',311),
  ('instruction -> print','instruction',1,'p_instruction','Parser.py',312),
  ('instruction -> input','instruction',1,'p_instruction','Parser.py',313),
  ('instruction -> comment','instruction',1,'p_instruction','Parser.py',314),
  ('while_loop -> WHILE LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',327),
  ('while_loop -> WHILE LEFT_BR bool_value RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','while_loop',8,'p_while_loop','Parser.py',328),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',337),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',338),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL INT_NUMBER SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',339),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR LESS_EQUAL VAR SEMICOLON VAR PLUS_PLUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',340),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',341),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',342),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL INT_NUMBER SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',343),
  ('for_loop_statement -> FOR LEFT_BR INT VAR EQUAL INT_NUMBER SEMICOLON VAR GREATER_EQUAL VAR SEMICOLON VAR MINUS_MINUS RIGHT_BR','for_loop_statement',14,'p_for_loop_statement','Parser.py',344),
  ('for_loop -> for_loop_statement LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','for_loop',5,'p_for_loop','Parser.py',371),
  ('loop -> while_loop','loop',1,'p_loop','Parser.py',380),
  ('loop -> for_loop','loop',1,'p_loop','Parser.py',381),
  ('else_statement -> ELSE LEFT_BR_CURLY instructions RIGHT_BR_CURLY','else_statement',4,'p_else_statement','Parser.py',388),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY','if_statement',8,'p_if_statement','Parser.py',400),
  ('if_statement -> IF LEFT_BR comparisons RIGHT_BR LEFT_BR_CURLY change_tab_number instructions RIGHT_BR_CURLY else_statement','if_statement',9,'p_if_statement','Parser.py',401),
  ('comparisons -> comparison','comparisons',1,'p_comparisons','Parser.py',413),
  ('comparisons -> comparison conjunction comparisons','comparisons',3,'p_comparisons','Parser.py',414),
  ('comparison -> value comparator value','comparison',3,'p_comparison','Parser.py',424),
  ('comparator -> LESS','comparator',1,'p_comparator','Parser.py',432),
  ('comparator -> LESS_EQUAL','comparator',1,'p_comparator','Parser.py',433),
  ('comparator -> GREATER','comparator',1,'p_comparator','Parser.py',434),
  ('comparator -> GREATER_EQUAL','comparator',1,'p_comparator','Parser.py',435),
  ('comparator -> EQUAL_EQUAL','comparator',1,'p_comparator','Parser.py',436),
  ('comparator -> NOT_EQUAL','comparator',1,'p_comparator','Parser.py',437),
  ('operator -> PLUS','operator',1,'p_operator','Parser.py',443),
  ('operator -> MINUS','operator',1,'p_operator','Parser.py',444),
  ('operator -> MULTIPLY','operator',1,'p_operator','Parser.py',445),
  ('operator -> DIVIDE','operator',1,'p_operator','Parser.py',446),
  ('type -> INT','type',1,'p_type','Parser.py',452),
  ('type -> CHAR','type',1,'p_type','Parser.py',453),
  ('type -> STRING','type',1,'p_type','Parser.py',454),
  ('type -> BOOL','type',1,'p_type','Parser.py',455),
  ('type -> FLOAT','type',1,'p_type','Parser.py',456),
  ('type -> LONG','type',1,'p_type','Parser.py',457),
  ('type -> SHORT','type',1,'p_type','Parser.py',458),
  ('type -> DOUBLE','type',1,'p_type','Parser.py',459),
  ('conjunction -> AND','conjunction',1,'p_conjunction','Parser.py',466),
  ('conjunction -> OR','conjunction',1,'p_conjunction','Parser.py',467),
  ('string_value -> TEXT','string_value',1,'p_string_value','Parser.py',474),
  ('string_value -> SIGN','string_value',1,'p_string_value','Parser.py',475),
  ('number -> INT_NUMBER','number',1,'p_number','Parser.py',482),
  ('number -> FLOAT_NUMBER','number',1,'p_number','Parser.py',483),
  ('bool_value -> TRUE','bool_value',1,'p_bool_value','Parser.py',490),
  ('bool_value -> FALSE','bool_value',1,'p_bool_value','Parser.py',491),
  ('value -> number','value',1,'p_value','Parser.py',498),
  ('value -> VAR','value',1,'p_value','Parser.py',499),
  ('value -> get_array_element','value',1,'p_value','Parser.py',500),
  ('value -> string_value','value',1,'p_value','Parser.py',501),
  ('value -> bool_value','value',1,'p_value','Parser.py',502),
  ('value -> math_operation','value',1,'p_value','Parser.py',503),
  ('increment -> VAR PLUS_PLUS SEMICOLON','increment',3,'p_increment','Parser.py',510),
  ('decrement -> VAR MINUS_MINUS SEMICOLON','decrement',3,'p_decrement','Parser.py',517),
  ('math_operation -> VAR operator VAR','math_operation',3,'p_math_operation','Parser.py',523),
  ('math_operation -> VAR operator number','math_operation',3,'p_math_operation','Parser.py',524),
  ('math_operation -> number operator number','math_operation',3,'p_math_operation','Parser.py',525),
  ('operation -> increment','operation',1,'p_operation','Parser.py',532),
  ('operation -> decrement','operation',1,'p_operation','Parser.py',533),
  ('get_array_element -> VAR LEFT_BR_SQUARED INT_NUMBER RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',539),
  ('get_array_element -> VAR LEFT_BR_SQUARED VAR RIGHT_BR_SQUARED','get_array_element',4,'p_get_array_element','Parser.py',540),
  ('assignment -> VAR EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',548),
  ('assignment -> VAR EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',549),
  ('assignment -> get_array_element EQUAL value SEMICOLON','assignment',4,'p_assignment','Parser.py',550),
  ('assignment -> get_array_element EQUAL VAR SEMICOLON','assignment',4,'p_assignment','Parser.py',551),
  ('var_declaration -> type VAR SEMICOLON','var_declaration',3,'p_var_declaration','Parser.py',558),
  ('var_declaration -> array_declaration','var_declaration',1,'p_var_declaration','Parser.py',559),
  ('var_declaration -> type VAR EQUAL value SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',560),
  ('var_declaration -> type VAR EQUAL VAR SEMICOLON','var_declaration',5,'p_var_declaration','Parser.py',561),
  ('array_declaration -> type get_array_element SEMICOLON','array_declaration',3,'p_array_declaration','Parser.py',573),
  ('out -> OUT VAR','out',2,'p_out','Parser.py',581),
  ('out -> OUT VAR out','out',3,'p_out','Parser.py',582),
  ('out -> OUT TEXT','out',2,'p_out','Parser.py',583),
  ('out -> OUT TEXT out','out',3,'p_out','Parser.py',584),
  ('out -> OUT ENDL','out',2,'p_out','Parser.py',585),
  ('out -> OUT ENDL out','out',3,'p_out','Parser.py',586),
  ('in -> IN VAR','in',2,'p_in','Parser.py',602),
  ('in -> IN VAR in','in',3,'p_in','Parser.py',603),
  ('print -> COUT out SEMICOLON','print',3,'p_print','Parser.py',616),
  ('input -> CIN in SEMICOLON','input',3,'p_input','Parser.py',623),
  ('returning -> RETURN value SEMICOLON','returning',3,'p_returning','Parser.py',630),
  ('comment -> COMMENT','comment',1,'p_comment','Parser.py',640),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',645),
  ('change_tab_number -> <empty>','change_tab_number',0,'p_change_tab_number','Parser.py',655),
]
