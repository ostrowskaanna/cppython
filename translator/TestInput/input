// C++ program to demonstrate the working of protected inheritance

#include <iostream>
using namespace std;

class Base {
   private:
    int pvt = 1;
    float f = 1.99;
    bool x = true;

   protected:
    int prot = 2;
    bool y = false;
    string c = "str";

   public:
    int pub = 3;
    double d = 1.23;
    long l = 4294967;
    char c = 'x';

    // function to access private member
    int getPVT() {
        return pvt;
    }
};

class ProtectedDerived : protected Base {
   public:
    // function to access protected member from Base
    int getProt() {
        return prot;
    }

    // function to access public member from Base
    int getPub() {
        return pub;
    }

    void foo(){
        for(int i = 0; i<10; i++ ){
            cout << i;
        }

        int index = 0;

        while( index < 10 && (index != 2 || index == 3){
            if( index == 5 ){
                break;
            } else {
                cout << index;
                index++;
            }
        }

        int day = 4;
        switch (day) {
          case 1:
            cout << "Monday";
            break;
          case 2:
            cout << "Tuesday";
            break;
          case 3:
            cout << "Wednesday";
            break;
          case 4:
            cout << "Thursday";
            break;
          case 5:
            cout << "Friday";
            break;
          case 6:
            cout << "Saturday";
            break;
          case 7:
            cout << "Sunday";
            break;
        }
    }

};

int main() {
    ProtectedDerived object1;
    cout << "Private cannot be accessed." << endl;
    cout << "Protected = " << object1.getProt() << endl;
    cout << "Public = " << object1.getPub() << endl;
    return 0;
}
